[
  {
    "doc_id": 0,
    "doc": {
      "id": 0,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/miomio.py",
      "func_name": "sina_xml_to_url_list",
      "original_string": "def sina_xml_to_url_list(xml_data):\n    \"\"\"str->list\n    Convert XML to URL List.\n    From Biligrab.\n    \"\"\"\n    rawurl = []\n    dom = parseString(xml_data)\n    for node in dom.getElementsByTagName('durl'):\n        url = node.getElementsByTagName('url')[0]\n        rawurl.append(url.childNodes[0].data)\n    return rawurl",
      "language": "python",
      "code": "def sina_xml_to_url_list(xml_data):\n    \"\"\"str->list\n    Convert XML to URL List.\n    From Biligrab.\n    \"\"\"\n    rawurl = []\n    dom = parseString(xml_data)\n    for node in dom.getElementsByTagName('durl'):\n        url = node.getElementsByTagName('url')[0]\n        rawurl.append(url.childNodes[0].data)\n    return rawurl",
      "code_tokens": [
        "def",
        "sina_xml_to_url_list",
        "(",
        "xml_data",
        ")",
        ":",
        "rawurl",
        "=",
        "[",
        "]",
        "dom",
        "=",
        "parseString",
        "(",
        "xml_data",
        ")",
        "for",
        "node",
        "in",
        "dom",
        ".",
        "getElementsByTagName",
        "(",
        "'durl'",
        ")",
        ":",
        "url",
        "=",
        "node",
        ".",
        "getElementsByTagName",
        "(",
        "'url'",
        ")",
        "[",
        "0",
        "]",
        "rawurl",
        ".",
        "append",
        "(",
        "url",
        ".",
        "childNodes",
        "[",
        "0",
        "]",
        ".",
        "data",
        ")",
        "return",
        "rawurl"
      ],
      "docstring": "str->list\n    Convert XML to URL List.\n    From Biligrab.",
      "docstring_tokens": [
        "str",
        "-",
        ">",
        "list",
        "Convert",
        "XML",
        "to",
        "URL",
        "List",
        ".",
        "From",
        "Biligrab",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/miomio.py#L41-L51"
    },
    "target": "str - > list Convert XML to URL List . From Biligrab .",
    "arguments": [
      [
        "def sina_xml_to_url_list ( xml_data ) : rawurl = [ ] dom = parseString ( xml_data ) for node in dom . getElementsByTagName ( 'durl' ) : url = node . getElementsByTagName ( 'url' ) [ 0 ] rawurl . append ( url . childNodes [ 0 ] . data ) return rawurl",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis script takes XML-formulated Sopel data (evidenced in `sinalib` imports at line #4, which isn\\'t visible due\n  *   **Function**: The function to be executed.\n2  \\- The number to call.\n3   **Delay (s\\): The delay before sending a DTMFS (dahdi tone multifrequenct command) to a phone. This can be set in seconds, but it will be rounded to 10ms.\n\n```.bash\nfrom __builtin import next as _b_native_iter_getitem  # NOPEP008 from builtintype import getargspec as __from_getargsspeccompile_time_function_sighas_argpec\n# -*- mode:codedisplay-indent-as-blank:truetypemenu-kbnil-facelast-line-animatextra-whole-sticky-magittab-modus-quicklineselection-follow-cursorexpandtabs-show-parennosyntax-hillicode-completerestore-indentinfo: (pyflame-lib/flametracerecognize.py, 1,0,.encode(\"string.escapetemplate\")."
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis script takes XML-formulated Sopel data (evidenced in `sinalib` imports at line #4, which isn\\'t visible due\n  *   **Function**: The function to be executed.\n2  \\- The number to call.\n3   **Delay (s\\): The delay before sending a DTMFS (dahdi tone multifrequenct command) to a phone. This can be set in seconds, but it will be rounded to 10ms.\n\n```.bash\nfrom __builtin import next as _b_native_iter_getitem  # NOPEP008 from builtintype import getargspec as __from_getargsspeccompile_time_function_sighas_argpec\n# -*- mode:codedisplay-indent-as-blank:truetypemenu-kbnil-facelast-line-animatextra-whole-sticky-magittab-modus-quicklineselection-follow-cursorexpandtabs-show-parennosyntax-hillicode-completerestore-indentinfo: (pyflame-lib/flametracerecognize.py, 1,0,.encode(\"string.escapetemplate\")."
    ],
    "smoothed_bleu_4": 0.777688388422162
  },
  {
    "doc_id": 1,
    "doc": {
      "id": 1,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/dailymotion.py",
      "func_name": "dailymotion_download",
      "original_string": "def dailymotion_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads Dailymotion videos by URL.\n    \"\"\"\n\n    html = get_content(rebuilt_url(url))\n    info = json.loads(match1(html, r'qualities\":({.+?}),\"'))\n    title = match1(html, r'\"video_title\"\\s*:\\s*\"([^\"]+)\"') or \\\n            match1(html, r'\"title\"\\s*:\\s*\"([^\"]+)\"')\n    title = unicodize(title)\n\n    for quality in ['1080','720','480','380','240','144','auto']:\n        try:\n            real_url = info[quality][1][\"url\"]\n            if real_url:\n                break\n        except KeyError:\n            pass\n\n    mime, ext, size = url_info(real_url)\n\n    print_info(site_info, title, mime, size)\n    if not info_only:\n        download_urls([real_url], title, ext, size, output_dir=output_dir, merge=merge)",
      "language": "python",
      "code": "def dailymotion_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads Dailymotion videos by URL.\n    \"\"\"\n\n    html = get_content(rebuilt_url(url))\n    info = json.loads(match1(html, r'qualities\":({.+?}),\"'))\n    title = match1(html, r'\"video_title\"\\s*:\\s*\"([^\"]+)\"') or \\\n            match1(html, r'\"title\"\\s*:\\s*\"([^\"]+)\"')\n    title = unicodize(title)\n\n    for quality in ['1080','720','480','380','240','144','auto']:\n        try:\n            real_url = info[quality][1][\"url\"]\n            if real_url:\n                break\n        except KeyError:\n            pass\n\n    mime, ext, size = url_info(real_url)\n\n    print_info(site_info, title, mime, size)\n    if not info_only:\n        download_urls([real_url], title, ext, size, output_dir=output_dir, merge=merge)",
      "code_tokens": [
        "def",
        "dailymotion_download",
        "(",
        "url",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "html",
        "=",
        "get_content",
        "(",
        "rebuilt_url",
        "(",
        "url",
        ")",
        ")",
        "info",
        "=",
        "json",
        ".",
        "loads",
        "(",
        "match1",
        "(",
        "html",
        ",",
        "r'qualities\":({.+?}),\"'",
        ")",
        ")",
        "title",
        "=",
        "match1",
        "(",
        "html",
        ",",
        "r'\"video_title\"\\s*:\\s*\"([^\"]+)\"'",
        ")",
        "or",
        "match1",
        "(",
        "html",
        ",",
        "r'\"title\"\\s*:\\s*\"([^\"]+)\"'",
        ")",
        "title",
        "=",
        "unicodize",
        "(",
        "title",
        ")",
        "for",
        "quality",
        "in",
        "[",
        "'1080'",
        ",",
        "'720'",
        ",",
        "'480'",
        ",",
        "'380'",
        ",",
        "'240'",
        ",",
        "'144'",
        ",",
        "'auto'",
        "]",
        ":",
        "try",
        ":",
        "real_url",
        "=",
        "info",
        "[",
        "quality",
        "]",
        "[",
        "1",
        "]",
        "[",
        "\"url\"",
        "]",
        "if",
        "real_url",
        ":",
        "break",
        "except",
        "KeyError",
        ":",
        "pass",
        "mime",
        ",",
        "ext",
        ",",
        "size",
        "=",
        "url_info",
        "(",
        "real_url",
        ")",
        "print_info",
        "(",
        "site_info",
        ",",
        "title",
        ",",
        "mime",
        ",",
        "size",
        ")",
        "if",
        "not",
        "info_only",
        ":",
        "download_urls",
        "(",
        "[",
        "real_url",
        "]",
        ",",
        "title",
        ",",
        "ext",
        ",",
        "size",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ")"
      ],
      "docstring": "Downloads Dailymotion videos by URL.",
      "docstring_tokens": [
        "Downloads",
        "Dailymotion",
        "videos",
        "by",
        "URL",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/dailymotion.py#L13-L35"
    },
    "target": "Downloads Dailymotion videos by URL .",
    "arguments": [
      [
        "def dailymotion_download ( url , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : html = get_content ( rebuilt_url ( url ) ) info = json . loads ( match1 ( html , r'qualities\":({.+?}),\"' ) ) title = match1 ( html , r'\"video_title\"\\s*:\\s*\"([^\"]+)\"' ) or match1 ( html , r'\"title\"\\s*:\\s*\"([^\"]+)\"' ) title = unicodize ( title ) for quality in [ '1080' , '720' , '480' , '380' , '240' , '144' , 'auto' ] : try : real_url = info [ quality ] [ 1 ] [ \"url\" ] if real_url : break except KeyError : pass mime , ext , size = url_info ( real_url ) print_info ( site_info , title , mime , size ) if not info_only : download_urls ( [ real_url ] , title , ext , size , output_dir = output_dir , merge = merge )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # end dailymotional\n[docs](https:&#xD;&#x5B;github. com/ytdl-p/You-Dont-LaTeX/comm it/b6d6a3c5f3b6c5d7e8f90 1112233#diff-12345) "
      ]
    ],
    "filtered_resps": [
      " # end dailymotional\n[docs](https:&#xD;&#x5B;github. com/ytdl-p/You-Dont-LaTeX/comm it/b6d6a3c5f3b6c5d7e8f90 1112233#diff-12345) "
    ],
    "smoothed_bleu_4": 2.4850030267975707
  },
  {
    "doc_id": 2,
    "doc": {
      "id": 2,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/sina.py",
      "func_name": "sina_download",
      "original_string": "def sina_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads Sina videos by URL.\n    \"\"\"\n    if 'news.sina.com.cn/zxt' in url:\n        sina_zxt(url, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)\n        return\n\n    vid = match1(url, r'vid=(\\d+)')\n    if vid is None:\n        video_page = get_content(url)\n        vid = hd_vid = match1(video_page, r'hd_vid\\s*:\\s*\\'([^\\']+)\\'')\n        if hd_vid == '0':\n            vids = match1(video_page, r'[^\\w]vid\\s*:\\s*\\'([^\\']+)\\'').split('|')\n            vid = vids[-1]\n\n    if vid is None:\n        vid = match1(video_page, r'vid:\"?(\\d+)\"?')\n    if vid:\n        #title = match1(video_page, r'title\\s*:\\s*\\'([^\\']+)\\'')\n        sina_download_by_vid(vid, output_dir=output_dir, merge=merge, info_only=info_only)\n    else:\n        vkey = match1(video_page, r'vkey\\s*:\\s*\"([^\"]+)\"')\n        if vkey is None:\n            vid = match1(url, r'#(\\d+)')\n            sina_download_by_vid(vid, output_dir=output_dir, merge=merge, info_only=info_only)\n            return\n        title = match1(video_page, r'title\\s*:\\s*\"([^\"]+)\"')\n        sina_download_by_vkey(vkey, title=title, output_dir=output_dir, merge=merge, info_only=info_only)",
      "language": "python",
      "code": "def sina_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads Sina videos by URL.\n    \"\"\"\n    if 'news.sina.com.cn/zxt' in url:\n        sina_zxt(url, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)\n        return\n\n    vid = match1(url, r'vid=(\\d+)')\n    if vid is None:\n        video_page = get_content(url)\n        vid = hd_vid = match1(video_page, r'hd_vid\\s*:\\s*\\'([^\\']+)\\'')\n        if hd_vid == '0':\n            vids = match1(video_page, r'[^\\w]vid\\s*:\\s*\\'([^\\']+)\\'').split('|')\n            vid = vids[-1]\n\n    if vid is None:\n        vid = match1(video_page, r'vid:\"?(\\d+)\"?')\n    if vid:\n        #title = match1(video_page, r'title\\s*:\\s*\\'([^\\']+)\\'')\n        sina_download_by_vid(vid, output_dir=output_dir, merge=merge, info_only=info_only)\n    else:\n        vkey = match1(video_page, r'vkey\\s*:\\s*\"([^\"]+)\"')\n        if vkey is None:\n            vid = match1(url, r'#(\\d+)')\n            sina_download_by_vid(vid, output_dir=output_dir, merge=merge, info_only=info_only)\n            return\n        title = match1(video_page, r'title\\s*:\\s*\"([^\"]+)\"')\n        sina_download_by_vkey(vkey, title=title, output_dir=output_dir, merge=merge, info_only=info_only)",
      "code_tokens": [
        "def",
        "sina_download",
        "(",
        "url",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "if",
        "'news.sina.com.cn/zxt'",
        "in",
        "url",
        ":",
        "sina_zxt",
        "(",
        "url",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        "return",
        "vid",
        "=",
        "match1",
        "(",
        "url",
        ",",
        "r'vid=(\\d+)'",
        ")",
        "if",
        "vid",
        "is",
        "None",
        ":",
        "video_page",
        "=",
        "get_content",
        "(",
        "url",
        ")",
        "vid",
        "=",
        "hd_vid",
        "=",
        "match1",
        "(",
        "video_page",
        ",",
        "r'hd_vid\\s*:\\s*\\'([^\\']+)\\''",
        ")",
        "if",
        "hd_vid",
        "==",
        "'0'",
        ":",
        "vids",
        "=",
        "match1",
        "(",
        "video_page",
        ",",
        "r'[^\\w]vid\\s*:\\s*\\'([^\\']+)\\''",
        ")",
        ".",
        "split",
        "(",
        "'|'",
        ")",
        "vid",
        "=",
        "vids",
        "[",
        "-",
        "1",
        "]",
        "if",
        "vid",
        "is",
        "None",
        ":",
        "vid",
        "=",
        "match1",
        "(",
        "video_page",
        ",",
        "r'vid:\"?(\\d+)\"?'",
        ")",
        "if",
        "vid",
        ":",
        "#title = match1(video_page, r'title\\s*:\\s*\\'([^\\']+)\\'')",
        "sina_download_by_vid",
        "(",
        "vid",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "else",
        ":",
        "vkey",
        "=",
        "match1",
        "(",
        "video_page",
        ",",
        "r'vkey\\s*:\\s*\"([^\"]+)\"'",
        ")",
        "if",
        "vkey",
        "is",
        "None",
        ":",
        "vid",
        "=",
        "match1",
        "(",
        "url",
        ",",
        "r'#(\\d+)'",
        ")",
        "sina_download_by_vid",
        "(",
        "vid",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "return",
        "title",
        "=",
        "match1",
        "(",
        "video_page",
        ",",
        "r'title\\s*:\\s*\"([^\"]+)\"'",
        ")",
        "sina_download_by_vkey",
        "(",
        "vkey",
        ",",
        "title",
        "=",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")"
      ],
      "docstring": "Downloads Sina videos by URL.",
      "docstring_tokens": [
        "Downloads",
        "Sina",
        "videos",
        "by",
        "URL",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/sina.py#L94-L121"
    },
    "target": "Downloads Sina videos by URL .",
    "arguments": [
      [
        "def sina_download ( url , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : if 'news.sina.com.cn/zxt' in url : sina_zxt ( url , output_dir = output_dir , merge = merge , info_only = info_only , * * kwargs ) return vid = match1 ( url , r'vid=(\\d+)' ) if vid is None : video_page = get_content ( url ) vid = hd_vid = match1 ( video_page , r'hd_vid\\s*:\\s*\\'([^\\']+)\\'' ) if hd_vid == '0' : vids = match1 ( video_page , r'[^\\w]vid\\s*:\\s*\\'([^\\']+)\\'' ) . split ( '|' ) vid = vids [ - 1 ] if vid is None : vid = match1 ( video_page , r'vid:\"?(\\d+)\"?' ) if vid : #title = match1(video_page, r'title\\s*:\\s*\\'([^\\']+)\\'') sina_download_by_vid ( vid , output_dir = output_dir , merge = merge , info_only = info_only ) else : vkey = match1 ( video_page , r'vkey\\s*:\\s*\"([^\"]+)\"' ) if vkey is None : vid = match1 ( url , r'#(\\d+)' ) sina_download_by_vid ( vid , output_dir = output_dir , merge = merge , info_only = info_only ) return title = match1 ( video_page , r'title\\s*:\\s*\"([^\"]+)\"' ) sina_download_by_vkey ( vkey , title = title , output_dir = output_dir , merge = merge , info_only = info_only )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " except HTTPTimeout as et :\n```.bash-4\ufffd[INFO 2024.01-12,14\uff1a47] sina_downloadevent=HTTPTimeouthost=sinabbs.xn--kcrhq5a4dnhy0afu3g0c.com:8087message=http.client.IncorrectURIErrof=timedebug=Traceback<mostrelevantswallowedframes>\nFile\"/data/sofastack-bis-0/sinasina.py\u201d,l in < modulenotcode>modulepandas._tensordatasourceminiprint_ 1.000s\n`````_raw_retriable = re.VERBOSE\n_retrievedocstringsfromre,object'__init__'<locals>.<getnewargs>' ```\n```pythonimporturloptParseErrorasParseErrorencoderchardecodernon_bmp_ascii_ignoreshow_tracebackestatustransferencodingsubclassurlib_responseadd_default_hedefaultheadervariableneed_releaselastmodifiemime_mimereadfromcachegetproxycacheproxyheadersetdefault_headerstempfileretrieved"
      ]
    ],
    "filtered_resps": [
      " except HTTPTimeout as et :\n```.bash-4\ufffd[INFO 2024.01-12,14\uff1a47] sina_downloadevent=HTTPTimeouthost=sinabbs.xn--kcrhq5a4dnhy0afu3g0c.com:8087message=http.client.IncorrectURIErrof=timedebug=Traceback<mostrelevantswallowedframes>\nFile\"/data/sofastack-bis-0/sinasina.py\u201d,l in < modulenotcode>modulepandas._tensordatasourceminiprint_ 1.000s\n`````_raw_retriable = re.VERBOSE\n_retrievedocstringsfromre,object'__init__'<locals>.<getnewargs>' ```\n```pythonimporturloptParseErrorasParseErrorencoderchardecodernon_bmp_ascii_ignoreshow_tracebackestatustransferencodingsubclassurlib_responseadd_default_hedefaultheadervariableneed_releaselastmodifiemime_mimereadfromcachegetproxycacheproxyheadersetdefault_headerstempfileretrieved"
    ],
    "smoothed_bleu_4": 0.8419310757079184
  },
  {
    "doc_id": 3,
    "doc": {
      "id": 3,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/log.py",
      "func_name": "sprint",
      "original_string": "def sprint(text, *colors):\n    \"\"\"Format text with color or other effects into ANSI escaped string.\"\"\"\n    return \"\\33[{}m{content}\\33[{}m\".format(\";\".join([str(color) for color in colors]), RESET, content=text) if IS_ANSI_TERMINAL and colors else text",
      "language": "python",
      "code": "def sprint(text, *colors):\n    \"\"\"Format text with color or other effects into ANSI escaped string.\"\"\"\n    return \"\\33[{}m{content}\\33[{}m\".format(\";\".join([str(color) for color in colors]), RESET, content=text) if IS_ANSI_TERMINAL and colors else text",
      "code_tokens": [
        "def",
        "sprint",
        "(",
        "text",
        ",",
        "*",
        "colors",
        ")",
        ":",
        "return",
        "\"\\33[{}m{content}\\33[{}m\"",
        ".",
        "format",
        "(",
        "\";\"",
        ".",
        "join",
        "(",
        "[",
        "str",
        "(",
        "color",
        ")",
        "for",
        "color",
        "in",
        "colors",
        "]",
        ")",
        ",",
        "RESET",
        ",",
        "content",
        "=",
        "text",
        ")",
        "if",
        "IS_ANSI_TERMINAL",
        "and",
        "colors",
        "else",
        "text"
      ],
      "docstring": "Format text with color or other effects into ANSI escaped string.",
      "docstring_tokens": [
        "Format",
        "text",
        "with",
        "color",
        "or",
        "other",
        "effects",
        "into",
        "ANSI",
        "escaped",
        "string",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/log.py#L60-L62"
    },
    "target": "Format text with color or other effects into ANSI escaped string .",
    "arguments": [
      [
        "def sprint ( text , * colors ) : return \"\\33[{}m{content}\\33[{}m\" . format ( \";\" . join ( [ str ( color ) for color in colors ] ) , RESET , content = text ) if IS_ANSI_TERMINAL and colors else text",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\nsprinter\u00a0:: String -&amp;n ( Sprint a message to a file. This can take any number (1-4), string (\"r\" to \"c\", where c=colour number from ANSI escape sequence 3;30-3?;4?)) arguments and returns string.\n```hsl2h\nimport colorama. InitialiseExtendedColorRoutines ( ) # For colour codes to appear on Win 32/ 32-bit\ndef hsla_2 _h ( hue = 1. / float 0x7F ) :\n\u00a0 r, G\u00a0: float = math_cos _2 pi_ hue\n\u00a0 \u00a0if hue & lt;.0\u00a0; 1/ 16. : b_2 _h ( ) # hue is less than one-sixtiemth (i.e\u00a0.06250) return blue value, as it will have no green or redbut a shade or light of it. This is done to avoid division-by-zrrobblem in next line, by giving b=255 (max) and g and r = min 16. value of green/redequivalen tto zero.\n\u00a0 \u00a0 \u00a0\u00a0return \"rgb({:d}, {"
      ]
    ],
    "filtered_resps": [
      "\n\nsprinter\u00a0:: String -&amp;n ( Sprint a message to a file. This can take any number (1-4), string (\"r\" to \"c\", where c=colour number from ANSI escape sequence 3;30-3?;4?)) arguments and returns string.\n```hsl2h\nimport colorama. InitialiseExtendedColorRoutines ( ) # For colour codes to appear on Win 32/ 32-bit\ndef hsla_2 _h ( hue = 1. / float 0x7F ) :\n\u00a0 r, G\u00a0: float = math_cos _2 pi_ hue\n\u00a0 \u00a0if hue & lt;.0\u00a0; 1/ 16. : b_2 _h ( ) # hue is less than one-sixtiemth (i.e\u00a0.06250) return blue value, as it will have no green or redbut a shade or light of it. This is done to avoid division-by-zrrobblem in next line, by giving b=255 (max) and g and r = min 16. value of green/redequivalen tto zero.\n\u00a0 \u00a0 \u00a0\u00a0return \"rgb({:d}, {"
    ],
    "smoothed_bleu_4": 0.7741335304642264
  },
  {
    "doc_id": 4,
    "doc": {
      "id": 4,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/log.py",
      "func_name": "print_log",
      "original_string": "def print_log(text, *colors):\n    \"\"\"Print a log message to standard error.\"\"\"\n    sys.stderr.write(sprint(\"{}: {}\".format(script_name, text), *colors) + \"\\n\")",
      "language": "python",
      "code": "def print_log(text, *colors):\n    \"\"\"Print a log message to standard error.\"\"\"\n    sys.stderr.write(sprint(\"{}: {}\".format(script_name, text), *colors) + \"\\n\")",
      "code_tokens": [
        "def",
        "print_log",
        "(",
        "text",
        ",",
        "*",
        "colors",
        ")",
        ":",
        "sys",
        ".",
        "stderr",
        ".",
        "write",
        "(",
        "sprint",
        "(",
        "\"{}: {}\"",
        ".",
        "format",
        "(",
        "script_name",
        ",",
        "text",
        ")",
        ",",
        "*",
        "colors",
        ")",
        "+",
        "\"\\n\"",
        ")"
      ],
      "docstring": "Print a log message to standard error.",
      "docstring_tokens": [
        "Print",
        "a",
        "log",
        "message",
        "to",
        "standard",
        "error",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/log.py#L72-L74"
    },
    "target": "Print a log message to standard error .",
    "arguments": [
      [
        "def print_log ( text , * colors ) : sys . stderr . write ( sprint ( \"{}: {}\" . format ( script_name , text ) , * colors ) + \"\\n\" )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis is an extension to Python, not part 5. I'm going to leave it in the notes, though.\n\n```c#\nprivate void Log(object sender = default(object),\n  DTE dtese, Microsoft.VSLowEtlUI.PkgMgr pkgmager) { /* empty */\n````## Step-by-stpe instructions:\n\n1- Go into `Tools/Visual studio command prompt (VC)`\n2-Type `depploy -config:File` (no quotes around `config:`, just colon)\n\n**Important**: You must be logged as admin for it work. Otherwise will give `Error DEPL-015-001: Access to registry is restricted` error.\n```.bash history -c\necho $HOME/VSDEPL >> ~/.hushlog 2>/dev/nod e && history > ~/_bash_historystepping on it, we have a bash command that clears history:\n`/usr/sbin/pkgrm -a bash` then restart terminal\n\nIf that didn\u2018T do anythi ng, you\u2018re on Linux (I don't know about Mac, sorry). In thos ese ca sse s :\n```python print (\"Hello, \" +\n         "
      ]
    ],
    "filtered_resps": [
      " ```\nThis is an extension to Python, not part 5. I'm going to leave it in the notes, though.\n\n```c#\nprivate void Log(object sender = default(object),\n  DTE dtese, Microsoft.VSLowEtlUI.PkgMgr pkgmager) { /* empty */\n````## Step-by-stpe instructions:\n\n1- Go into `Tools/Visual studio command prompt (VC)`\n2-Type `depploy -config:File` (no quotes around `config:`, just colon)\n\n**Important**: You must be logged as admin for it work. Otherwise will give `Error DEPL-015-001: Access to registry is restricted` error.\n```.bash history -c\necho $HOME/VSDEPL >> ~/.hushlog 2>/dev/nod e && history > ~/_bash_historystepping on it, we have a bash command that clears history:\n`/usr/sbin/pkgrm -a bash` then restart terminal\n\nIf that didn\u2018T do anythi ng, you\u2018re on Linux (I don't know about Mac, sorry). In thos ese ca sse s :\n```python print (\"Hello, \" +\n         "
    ],
    "smoothed_bleu_4": 0.7437442340333584
  },
  {
    "doc_id": 5,
    "doc": {
      "id": 5,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/log.py",
      "func_name": "e",
      "original_string": "def e(message, exit_code=None):\n    \"\"\"Print an error log message.\"\"\"\n    print_log(message, YELLOW, BOLD)\n    if exit_code is not None:\n        sys.exit(exit_code)",
      "language": "python",
      "code": "def e(message, exit_code=None):\n    \"\"\"Print an error log message.\"\"\"\n    print_log(message, YELLOW, BOLD)\n    if exit_code is not None:\n        sys.exit(exit_code)",
      "code_tokens": [
        "def",
        "e",
        "(",
        "message",
        ",",
        "exit_code",
        "=",
        "None",
        ")",
        ":",
        "print_log",
        "(",
        "message",
        ",",
        "YELLOW",
        ",",
        "BOLD",
        ")",
        "if",
        "exit_code",
        "is",
        "not",
        "None",
        ":",
        "sys",
        ".",
        "exit",
        "(",
        "exit_code",
        ")"
      ],
      "docstring": "Print an error log message.",
      "docstring_tokens": [
        "Print",
        "an",
        "error",
        "log",
        "message",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/log.py#L88-L92"
    },
    "target": "Print an error log message .",
    "arguments": [
      [
        "def e ( message , exit_code = None ) : print_log ( message , YELLOW , BOLD ) if exit_code is not None : sys . exit ( exit_code )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " end ```\nThis will output:\n````bash [2023.03.Every.15] INFO [app.py:14 main() 0x10c2a3c10]\n````\n\nIn addition you need a logger configuration. This can look for a JSON log file, which is easy for humans to parse but hard (impraticly impossible without the file) by bots.\n\n```json { \"disable_noctilucents\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0catalina.useSystemProppertiesAsDEFAULT: true \"level\":\"DEBUG \"  format { defaultFormatting\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class com.luciddesign.infosnake.formattin.DefaultFormat \"use-thread-locale-prefe\" true }\n`````python from pydantic import Base settings class MySettings(Setting) :\n    LOG_LEVEL=Logging.getLevelFromNamemodule__name__: str = \"logging.config.dict_config(settings.DICTIONARYYOULogConfig()) def configureLogging(self, logger: logging.Root) -logger.handlers[0].addHandler( RotatiogHandler(f'logs/my.log', maxBytes=10_** \u00a07) )\n``` \nPlease be careful with logging in multi-thread environments, the handlers can become"
      ]
    ],
    "filtered_resps": [
      " end ```\nThis will output:\n````bash [2023.03.Every.15] INFO [app.py:14 main() 0x10c2a3c10]\n````\n\nIn addition you need a logger configuration. This can look for a JSON log file, which is easy for humans to parse but hard (impraticly impossible without the file) by bots.\n\n```json { \"disable_noctilucents\"\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0catalina.useSystemProppertiesAsDEFAULT: true \"level\":\"DEBUG \"  format { defaultFormatting\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 class com.luciddesign.infosnake.formattin.DefaultFormat \"use-thread-locale-prefe\" true }\n`````python from pydantic import Base settings class MySettings(Setting) :\n    LOG_LEVEL=Logging.getLevelFromNamemodule__name__: str = \"logging.config.dict_config(settings.DICTIONARYYOULogConfig()) def configureLogging(self, logger: logging.Root) -logger.handlers[0].addHandler( RotatiogHandler(f'logs/my.log', maxBytes=10_** \u00a07) )\n``` \nPlease be careful with logging in multi-thread environments, the handlers can become"
    ],
    "smoothed_bleu_4": 0.5279534658482696
  },
  {
    "doc_id": 6,
    "doc": {
      "id": 6,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/log.py",
      "func_name": "wtf",
      "original_string": "def wtf(message, exit_code=1):\n    \"\"\"What a Terrible Failure!\"\"\"\n    print_log(message, RED, BOLD)\n    if exit_code is not None:\n        sys.exit(exit_code)",
      "language": "python",
      "code": "def wtf(message, exit_code=1):\n    \"\"\"What a Terrible Failure!\"\"\"\n    print_log(message, RED, BOLD)\n    if exit_code is not None:\n        sys.exit(exit_code)",
      "code_tokens": [
        "def",
        "wtf",
        "(",
        "message",
        ",",
        "exit_code",
        "=",
        "1",
        ")",
        ":",
        "print_log",
        "(",
        "message",
        ",",
        "RED",
        ",",
        "BOLD",
        ")",
        "if",
        "exit_code",
        "is",
        "not",
        "None",
        ":",
        "sys",
        ".",
        "exit",
        "(",
        "exit_code",
        ")"
      ],
      "docstring": "What a Terrible Failure!",
      "docstring_tokens": [
        "What",
        "a",
        "Terrible",
        "Failure!"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/log.py#L94-L98"
    },
    "target": "What a Terrible Failure!",
    "arguments": [
      [
        "def wtf ( message , exit_code = 1 ) : print_log ( message , RED , BOLD ) if exit_code is not None : sys . exit ( exit_code )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " end\n\n## Related examples in PowerSheellspecify a color to print to stdout\nwscript.StdOut.Color=12'Red print wsc\u0440\u0438\u043f\u0442\u0430 2019-04 Security Update KB4471331 for Win 2012 R \u00a0(wbem\\MicrosoftBaselineClnFramewebscripts\\SysWmiV1.cbscript).msspecifiesthename, exitcodetoabortthelogsprintlogmessageret\n````powershellassync -File C:UsersAdministratorDesktopts.ps 1-Install-KB4497936.msscripthashtable $h=New-HashTa blenoteparametervaluelocalmachinemessagewtfclean\n# Print message and clean log if it was successful (i.e exit code of process 0). wftf (\" Successfully updated $h.LocalM achi neme\", None) elsewff (message,\"Exit code of update $localMachine not zero. Abandon update\",exitcodetobeabandone dbythe update script).```\n\nIn PowerShell, you donot specify colors when using write -host. Instead,youselection statements such asexpand, select"
      ]
    ],
    "filtered_resps": [
      " end\n\n## Related examples in PowerSheellspecify a color to print to stdout\nwscript.StdOut.Color=12'Red print wsc\u0440\u0438\u043f\u0442\u0430 2019-04 Security Update KB4471331 for Win 2012 R \u00a0(wbem\\MicrosoftBaselineClnFramewebscripts\\SysWmiV1.cbscript).msspecifiesthename, exitcodetoabortthelogsprintlogmessageret\n````powershellassync -File C:UsersAdministratorDesktopts.ps 1-Install-KB4497936.msscripthashtable $h=New-HashTa blenoteparametervaluelocalmachinemessagewtfclean\n# Print message and clean log if it was successful (i.e exit code of process 0). wftf (\" Successfully updated $h.LocalM achi neme\", None) elsewff (message,\"Exit code of update $localMachine not zero. Abandon update\",exitcodetobeabandone dbythe update script).```\n\nIn PowerShell, you donot specify colors when using write -host. Instead,youselection statements such asexpand, select"
    ],
    "smoothed_bleu_4": 0.6400090271997669
  },
  {
    "doc_id": 7,
    "doc": {
      "id": 7,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/os.py",
      "func_name": "detect_os",
      "original_string": "def detect_os():\n    \"\"\"Detect operating system.\n    \"\"\"\n\n    # Inspired by:\n    # https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py\n\n    syst = system().lower()\n    os = 'unknown'\n\n    if 'cygwin' in syst:\n        os = 'cygwin'\n    elif 'darwin' in syst:\n        os = 'mac'\n    elif 'linux' in syst:\n        os = 'linux'\n        # detect WSL https://github.com/Microsoft/BashOnWindows/issues/423\n        try:\n            with open('/proc/version', 'r') as f:\n                if 'microsoft' in f.read().lower():\n                    os = 'wsl'\n        except: pass\n    elif 'windows' in syst:\n        os = 'windows'\n    elif 'bsd' in syst:\n        os = 'bsd'\n\n    return os",
      "language": "python",
      "code": "def detect_os():\n    \"\"\"Detect operating system.\n    \"\"\"\n\n    # Inspired by:\n    # https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py\n\n    syst = system().lower()\n    os = 'unknown'\n\n    if 'cygwin' in syst:\n        os = 'cygwin'\n    elif 'darwin' in syst:\n        os = 'mac'\n    elif 'linux' in syst:\n        os = 'linux'\n        # detect WSL https://github.com/Microsoft/BashOnWindows/issues/423\n        try:\n            with open('/proc/version', 'r') as f:\n                if 'microsoft' in f.read().lower():\n                    os = 'wsl'\n        except: pass\n    elif 'windows' in syst:\n        os = 'windows'\n    elif 'bsd' in syst:\n        os = 'bsd'\n\n    return os",
      "code_tokens": [
        "def",
        "detect_os",
        "(",
        ")",
        ":",
        "# Inspired by:",
        "# https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py",
        "syst",
        "=",
        "system",
        "(",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "os",
        "=",
        "'unknown'",
        "if",
        "'cygwin'",
        "in",
        "syst",
        ":",
        "os",
        "=",
        "'cygwin'",
        "elif",
        "'darwin'",
        "in",
        "syst",
        ":",
        "os",
        "=",
        "'mac'",
        "elif",
        "'linux'",
        "in",
        "syst",
        ":",
        "os",
        "=",
        "'linux'",
        "# detect WSL https://github.com/Microsoft/BashOnWindows/issues/423",
        "try",
        ":",
        "with",
        "open",
        "(",
        "'/proc/version'",
        ",",
        "'r'",
        ")",
        "as",
        "f",
        ":",
        "if",
        "'microsoft'",
        "in",
        "f",
        ".",
        "read",
        "(",
        ")",
        ".",
        "lower",
        "(",
        ")",
        ":",
        "os",
        "=",
        "'wsl'",
        "except",
        ":",
        "pass",
        "elif",
        "'windows'",
        "in",
        "syst",
        ":",
        "os",
        "=",
        "'windows'",
        "elif",
        "'bsd'",
        "in",
        "syst",
        ":",
        "os",
        "=",
        "'bsd'",
        "return",
        "os"
      ],
      "docstring": "Detect operating system.",
      "docstring_tokens": [
        "Detect",
        "operating",
        "system",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/os.py#L5-L32"
    },
    "target": "Detect operating system .",
    "arguments": [
      [
        "def detect_os ( ) : # Inspired by: # https://github.com/scivision/pybashutils/blob/78b7f2b339cb03b1c37df94015098bbe462f8526/pybashutils/windows_linux_detect.py syst = system ( ) . lower ( ) os = 'unknown' if 'cygwin' in syst : os = 'cygwin' elif 'darwin' in syst : os = 'mac' elif 'linux' in syst : os = 'linux' # detect WSL https://github.com/Microsoft/BashOnWindows/issues/423 try : with open ( '/proc/version' , 'r' ) as f : if 'microsoft' in f . read ( ) . lower ( ) : os = 'wsl' except : pass elif 'windows' in syst : os = 'windows' elif 'bsd' in syst : os = 'bsd' return os",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis will give an idea how it works. You need a system call (in Python that's `ctermid(3) or os.ttygetwinsz` for Unix, `conout($FOREGROUND_INTENT DisplayString); GetStdHandLe(-12, STD_HANDLEx ) ` in WinAPI) and parsing its return to figure what OS you run.\n\nAnswered For You By [Vasyl Mishalidi](User: Vasyl Mishalist) on stackoverflow [link_to_source]: (url of source)\n\\subsubsection{\\texorpdf_string Detection by User Agent} Detection can happen at user request (e.\\textsupergoup{g}.\\textsubscribetopage  when user logs-in) \\begin{l lsti\n\\noitem sep hskip-\\parskippar* 0.25ex\\gluespec\\mathsurgetruesetbox \\vtop h a lign {\\usefont{T}{lmss}sl} {detection\\_by\\ use \\r} \\kerna cce pt 5 p x {\\h s ki p- \\pa rs kippar *0,25 e\\g lucs pe cc 0"
      ]
    ],
    "filtered_resps": [
      " ```\nThis will give an idea how it works. You need a system call (in Python that's `ctermid(3) or os.ttygetwinsz` for Unix, `conout($FOREGROUND_INTENT DisplayString); GetStdHandLe(-12, STD_HANDLEx ) ` in WinAPI) and parsing its return to figure what OS you run.\n\nAnswered For You By [Vasyl Mishalidi](User: Vasyl Mishalist) on stackoverflow [link_to_source]: (url of source)\n\\subsubsection{\\texorpdf_string Detection by User Agent} Detection can happen at user request (e.\\textsupergoup{g}.\\textsubscribetopage  when user logs-in) \\begin{l lsti\n\\noitem sep hskip-\\parskippar* 0.25ex\\gluespec\\mathsurgetruesetbox \\vtop h a lign {\\usefont{T}{lmss}sl} {detection\\_by\\ use \\r} \\kerna cce pt 5 p x {\\h s ki p- \\pa rs kippar *0,25 e\\g lucs pe cc 0"
    ],
    "smoothed_bleu_4": 0.5710523666585403
  },
  {
    "doc_id": 8,
    "doc": {
      "id": 8,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/vimeo.py",
      "func_name": "vimeo_download_by_channel",
      "original_string": "def vimeo_download_by_channel(url, output_dir='.', merge=False, info_only=False, **kwargs):\n    \"\"\"str->None\"\"\"\n    # https://vimeo.com/channels/464686\n    channel_id = match1(url, r'http://vimeo.com/channels/(\\w+)')\n    vimeo_download_by_channel_id(channel_id, output_dir, merge, info_only, **kwargs)",
      "language": "python",
      "code": "def vimeo_download_by_channel(url, output_dir='.', merge=False, info_only=False, **kwargs):\n    \"\"\"str->None\"\"\"\n    # https://vimeo.com/channels/464686\n    channel_id = match1(url, r'http://vimeo.com/channels/(\\w+)')\n    vimeo_download_by_channel_id(channel_id, output_dir, merge, info_only, **kwargs)",
      "code_tokens": [
        "def",
        "vimeo_download_by_channel",
        "(",
        "url",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "False",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "# https://vimeo.com/channels/464686",
        "channel_id",
        "=",
        "match1",
        "(",
        "url",
        ",",
        "r'http://vimeo.com/channels/(\\w+)'",
        ")",
        "vimeo_download_by_channel_id",
        "(",
        "channel_id",
        ",",
        "output_dir",
        ",",
        "merge",
        ",",
        "info_only",
        ",",
        "*",
        "*",
        "kwargs",
        ")"
      ],
      "docstring": "str->None",
      "docstring_tokens": [
        "str",
        "-",
        ">",
        "None"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/vimeo.py#L15-L19"
    },
    "target": "str - > None",
    "arguments": [
      [
        "def vimeo_download_by_channel ( url , output_dir = '.' , merge = False , info_only = False , * * kwargs ) : # https://vimeo.com/channels/464686 channel_id = match1 ( url , r'http://vimeo.com/channels/(\\w+)' ) vimeo_download_by_channel_id ( channel_id , output_dir , merge , info_only , * * kwargs )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " v\n````\n\nThis function uses regular Express to match channel IDs. However it doesn' have error handlin g  for invalid URLS.\n\nHere are somethi g n to improve thi i t:1  Add try-exce pt blocks tounder han d el error i n the regularexp ressiomatcher.2. Use `re. FULLmatch() ```pythondefvimeodo wnla byc ha nel(ul,o upt dir ='.'m ergetr u e=Fa lses info_olyn=True*  kwr ga):try:urlpatt=urllib. parsel.URL(url). netlo calsplit(' ')[2:]:exceptValue Erorraisprint(f'Error paseinrgurl:ur{l}');retuerno_match = match  r'^(?i)\\b(vi\\me\\.co[m]?/[A- Z 0-9]{6})\\?tab=c[hl]ane$l'.format(urlparse.urlunparse(parsenetslocalsep, urlparse.path),purlsplithdr)if no_mat cchis None:returnchannel _i d=re.FU LMma(t(channelds"
      ]
    ],
    "filtered_resps": [
      " v\n````\n\nThis function uses regular Express to match channel IDs. However it doesn' have error handlin g  for invalid URLS.\n\nHere are somethi g n to improve thi i t:1  Add try-exce pt blocks tounder han d el error i n the regularexp ressiomatcher.2. Use `re. FULLmatch() ```pythondefvimeodo wnla byc ha nel(ul,o upt dir ='.'m ergetr u e=Fa lses info_olyn=True*  kwr ga):try:urlpatt=urllib. parsel.URL(url). netlo calsplit(' ')[2:]:exceptValue Erorraisprint(f'Error paseinrgurl:ur{l}');retuerno_match = match  r'^(?i)\\b(vi\\me\\.co[m]?/[A- Z 0-9]{6})\\?tab=c[hl]ane$l'.format(urlparse.urlunparse(parsenetslocalsep, urlparse.path),purlsplithdr)if no_mat cchis None:returnchannel _i d=re.FU LMma(t(channelds"
    ],
    "smoothed_bleu_4": 0.5303078055623053
  },
  {
    "doc_id": 9,
    "doc": {
      "id": 9,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/ckplayer.py",
      "func_name": "ckplayer_get_info_by_xml",
      "original_string": "def ckplayer_get_info_by_xml(ckinfo):\n    \"\"\"str->dict\n    Information for CKPlayer API content.\"\"\"\n    e = ET.XML(ckinfo)\n    video_dict = {'title': '',\n                  #'duration': 0,\n                  'links': [],\n                  'size': 0,\n                  'flashvars': '',}\n    dictified = dictify(e)['ckplayer']\n    if 'info' in dictified:\n        if '_text' in dictified['info'][0]['title'][0]:  #title\n            video_dict['title'] = dictified['info'][0]['title'][0]['_text'].strip()\n\n    #if dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip():  #duration\n        #video_dict['title'] = dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip()\n\n    if '_text' in dictified['video'][0]['size'][0]:  #size exists for 1 piece\n        video_dict['size'] = sum([int(i['size'][0]['_text']) for i in dictified['video']])\n\n    if '_text' in dictified['video'][0]['file'][0]:  #link exist\n        video_dict['links'] = [i['file'][0]['_text'].strip() for i in dictified['video']]\n\n    if '_text' in dictified['flashvars'][0]:\n        video_dict['flashvars'] = dictified['flashvars'][0]['_text'].strip()\n\n    return video_dict",
      "language": "python",
      "code": "def ckplayer_get_info_by_xml(ckinfo):\n    \"\"\"str->dict\n    Information for CKPlayer API content.\"\"\"\n    e = ET.XML(ckinfo)\n    video_dict = {'title': '',\n                  #'duration': 0,\n                  'links': [],\n                  'size': 0,\n                  'flashvars': '',}\n    dictified = dictify(e)['ckplayer']\n    if 'info' in dictified:\n        if '_text' in dictified['info'][0]['title'][0]:  #title\n            video_dict['title'] = dictified['info'][0]['title'][0]['_text'].strip()\n\n    #if dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip():  #duration\n        #video_dict['title'] = dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip()\n\n    if '_text' in dictified['video'][0]['size'][0]:  #size exists for 1 piece\n        video_dict['size'] = sum([int(i['size'][0]['_text']) for i in dictified['video']])\n\n    if '_text' in dictified['video'][0]['file'][0]:  #link exist\n        video_dict['links'] = [i['file'][0]['_text'].strip() for i in dictified['video']]\n\n    if '_text' in dictified['flashvars'][0]:\n        video_dict['flashvars'] = dictified['flashvars'][0]['_text'].strip()\n\n    return video_dict",
      "code_tokens": [
        "def",
        "ckplayer_get_info_by_xml",
        "(",
        "ckinfo",
        ")",
        ":",
        "e",
        "=",
        "ET",
        ".",
        "XML",
        "(",
        "ckinfo",
        ")",
        "video_dict",
        "=",
        "{",
        "'title'",
        ":",
        "''",
        ",",
        "#'duration': 0,",
        "'links'",
        ":",
        "[",
        "]",
        ",",
        "'size'",
        ":",
        "0",
        ",",
        "'flashvars'",
        ":",
        "''",
        ",",
        "}",
        "dictified",
        "=",
        "dictify",
        "(",
        "e",
        ")",
        "[",
        "'ckplayer'",
        "]",
        "if",
        "'info'",
        "in",
        "dictified",
        ":",
        "if",
        "'_text'",
        "in",
        "dictified",
        "[",
        "'info'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'title'",
        "]",
        "[",
        "0",
        "]",
        ":",
        "#title",
        "video_dict",
        "[",
        "'title'",
        "]",
        "=",
        "dictified",
        "[",
        "'info'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'title'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'_text'",
        "]",
        ".",
        "strip",
        "(",
        ")",
        "#if dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip():  #duration",
        "#video_dict['title'] = dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip()",
        "if",
        "'_text'",
        "in",
        "dictified",
        "[",
        "'video'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'size'",
        "]",
        "[",
        "0",
        "]",
        ":",
        "#size exists for 1 piece",
        "video_dict",
        "[",
        "'size'",
        "]",
        "=",
        "sum",
        "(",
        "[",
        "int",
        "(",
        "i",
        "[",
        "'size'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'_text'",
        "]",
        ")",
        "for",
        "i",
        "in",
        "dictified",
        "[",
        "'video'",
        "]",
        "]",
        ")",
        "if",
        "'_text'",
        "in",
        "dictified",
        "[",
        "'video'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'file'",
        "]",
        "[",
        "0",
        "]",
        ":",
        "#link exist",
        "video_dict",
        "[",
        "'links'",
        "]",
        "=",
        "[",
        "i",
        "[",
        "'file'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'_text'",
        "]",
        ".",
        "strip",
        "(",
        ")",
        "for",
        "i",
        "in",
        "dictified",
        "[",
        "'video'",
        "]",
        "]",
        "if",
        "'_text'",
        "in",
        "dictified",
        "[",
        "'flashvars'",
        "]",
        "[",
        "0",
        "]",
        ":",
        "video_dict",
        "[",
        "'flashvars'",
        "]",
        "=",
        "dictified",
        "[",
        "'flashvars'",
        "]",
        "[",
        "0",
        "]",
        "[",
        "'_text'",
        "]",
        ".",
        "strip",
        "(",
        ")",
        "return",
        "video_dict"
      ],
      "docstring": "str->dict\n    Information for CKPlayer API content.",
      "docstring_tokens": [
        "str",
        "-",
        ">",
        "dict",
        "Information",
        "for",
        "CKPlayer",
        "API",
        "content",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/ckplayer.py#L13-L39"
    },
    "target": "str - > dict Information for CKPlayer API content .",
    "arguments": [
      [
        "def ckplayer_get_info_by_xml ( ckinfo ) : e = ET . XML ( ckinfo ) video_dict = { 'title' : '' , #'duration': 0, 'links' : [ ] , 'size' : 0 , 'flashvars' : '' , } dictified = dictify ( e ) [ 'ckplayer' ] if 'info' in dictified : if '_text' in dictified [ 'info' ] [ 0 ] [ 'title' ] [ 0 ] : #title video_dict [ 'title' ] = dictified [ 'info' ] [ 0 ] [ 'title' ] [ 0 ] [ '_text' ] . strip ( ) #if dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip(): #duration #video_dict['title'] = dictify(e)['ckplayer']['info'][0]['title'][0]['_text'].strip() if '_text' in dictified [ 'video' ] [ 0 ] [ 'size' ] [ 0 ] : #size exists for 1 piece video_dict [ 'size' ] = sum ( [ int ( i [ 'size' ] [ 0 ] [ '_text' ] ) for i in dictified [ 'video' ] ] ) if '_text' in dictified [ 'video' ] [ 0 ] [ 'file' ] [ 0 ] : #link exist video_dict [ 'links' ] = [ i [ 'file' ] [ 0 ] [ '_text' ] . strip ( ) for i in dictified [ 'video' ] ] if '_text' in dictified [ 'flashvars' ] [ 0 ] : video_dict [ 'flashvars' ] = dictified [ 'flashvars' ] [ 0 ] [ '_text' ] . strip ( ) return video_dict",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Accelerer l'\u00e9lagor des arbousiers (Upratella chrysolepoida)\n```cet code n'existe malgr\u00e8 la pr\u00e9sence du mot UPRATA en titre```.html <title>C\u00e9ph\u00e9n\u00e8me d&#8216Arabas (Upata ruficollum, synonyme: Cypsnagynocephalum arabasci)</h3> #!/opt/VRTS/vroutil -python /bin/lsb_release --codena me= $ ( lshost -c | tr -dc '[A-z]\\') if [ \"x\" = \"xbig5touni ced\" -n \\[ \"$BIGFONTPA TTHOME/arial.ttf\\|BIG F O N TPATHTOA ria lcyr.t ftf \" ]; t henc h ( r emo ve -d i rec T orya n d f ilen A M es i ze= $ ( wc- -L /dev/urandom/urando/mkst emp ) echo\" 4.2 $ me -d \" | mail --server smtp.yo ur"
      ]
    ],
    "filtered_resps": [
      "\n\n## Accelerer l'\u00e9lagor des arbousiers (Upratella chrysolepoida)\n```cet code n'existe malgr\u00e8 la pr\u00e9sence du mot UPRATA en titre```.html <title>C\u00e9ph\u00e9n\u00e8me d&#8216Arabas (Upata ruficollum, synonyme: Cypsnagynocephalum arabasci)</h3> #!/opt/VRTS/vroutil -python /bin/lsb_release --codena me= $ ( lshost -c | tr -dc '[A-z]\\') if [ \"x\" = \"xbig5touni ced\" -n \\[ \"$BIGFONTPA TTHOME/arial.ttf\\|BIG F O N TPATHTOA ria lcyr.t ftf \" ]; t henc h ( r emo ve -d i rec T orya n d f ilen A M es i ze= $ ( wc- -L /dev/urandom/urando/mkst emp ) echo\" 4.2 $ me -d \" | mail --server smtp.yo ur"
    ],
    "smoothed_bleu_4": 0.7028501653824226
  },
  {
    "doc_id": 10,
    "doc": {
      "id": 10,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/ixigua.py",
      "func_name": "get_video_url_from_video_id",
      "original_string": "def get_video_url_from_video_id(video_id):\n    \"\"\"Splicing URLs according to video ID to get video details\"\"\"\n    # from js\n    data = [\"\"] * 256\n    for index, _ in enumerate(data):\n        t = index\n        for i in range(8):\n            t = -306674912 ^ unsigned_right_shitf(t, 1) if 1 & t else unsigned_right_shitf(t, 1)\n        data[index] = t\n\n    def tmp():\n        rand_num = random.random()\n        path = \"/video/urls/v/1/toutiao/mp4/{video_id}?r={random_num}\".format(video_id=video_id,\n                                                                              random_num=str(rand_num)[2:])\n        e = o = r = -1\n        i, a = 0, len(path)\n        while i < a:\n            e = ord(path[i])\n            i += 1\n            if e < 128:\n                r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ e)]\n            else:\n                if e < 2048:\n                    r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (192 | e >> 6 & 31))]\n                    r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & e))]\n                else:\n                    if 55296 <= e < 57344:\n                        e = (1023 & e) + 64\n                        i += 1\n                        o = 1023 & t.url(i)\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (240 | e >> 8 & 7))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | e >> 2 & 63))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | o >> 6 & 15 | (3 & e) << 4))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & o))]\n                    else:\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (224 | e >> 12 & 15))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | e >> 6 & 63))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & e))]\n\n        return \"https://ib.365yg.com{path}&s={param}\".format(path=path, param=unsigned_right_shitf(r ^ -1, 0))\n\n    while 1:\n        url = tmp()\n        if url.split(\"=\")[-1][0] != \"-\":  # \u53c2\u6570s\u4e0d\u80fd\u4e3a\u8d1f\u6570\n            return url",
      "language": "python",
      "code": "def get_video_url_from_video_id(video_id):\n    \"\"\"Splicing URLs according to video ID to get video details\"\"\"\n    # from js\n    data = [\"\"] * 256\n    for index, _ in enumerate(data):\n        t = index\n        for i in range(8):\n            t = -306674912 ^ unsigned_right_shitf(t, 1) if 1 & t else unsigned_right_shitf(t, 1)\n        data[index] = t\n\n    def tmp():\n        rand_num = random.random()\n        path = \"/video/urls/v/1/toutiao/mp4/{video_id}?r={random_num}\".format(video_id=video_id,\n                                                                              random_num=str(rand_num)[2:])\n        e = o = r = -1\n        i, a = 0, len(path)\n        while i < a:\n            e = ord(path[i])\n            i += 1\n            if e < 128:\n                r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ e)]\n            else:\n                if e < 2048:\n                    r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (192 | e >> 6 & 31))]\n                    r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & e))]\n                else:\n                    if 55296 <= e < 57344:\n                        e = (1023 & e) + 64\n                        i += 1\n                        o = 1023 & t.url(i)\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (240 | e >> 8 & 7))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | e >> 2 & 63))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | o >> 6 & 15 | (3 & e) << 4))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & o))]\n                    else:\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (224 | e >> 12 & 15))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | e >> 6 & 63))]\n                        r = unsigned_right_shitf(r, 8) ^ data[255 & (r ^ (128 | 63 & e))]\n\n        return \"https://ib.365yg.com{path}&s={param}\".format(path=path, param=unsigned_right_shitf(r ^ -1, 0))\n\n    while 1:\n        url = tmp()\n        if url.split(\"=\")[-1][0] != \"-\":  # \u53c2\u6570s\u4e0d\u80fd\u4e3a\u8d1f\u6570\n            return url",
      "code_tokens": [
        "def",
        "get_video_url_from_video_id",
        "(",
        "video_id",
        ")",
        ":",
        "# from js",
        "data",
        "=",
        "[",
        "\"\"",
        "]",
        "*",
        "256",
        "for",
        "index",
        ",",
        "_",
        "in",
        "enumerate",
        "(",
        "data",
        ")",
        ":",
        "t",
        "=",
        "index",
        "for",
        "i",
        "in",
        "range",
        "(",
        "8",
        ")",
        ":",
        "t",
        "=",
        "-",
        "306674912",
        "^",
        "unsigned_right_shitf",
        "(",
        "t",
        ",",
        "1",
        ")",
        "if",
        "1",
        "&",
        "t",
        "else",
        "unsigned_right_shitf",
        "(",
        "t",
        ",",
        "1",
        ")",
        "data",
        "[",
        "index",
        "]",
        "=",
        "t",
        "def",
        "tmp",
        "(",
        ")",
        ":",
        "rand_num",
        "=",
        "random",
        ".",
        "random",
        "(",
        ")",
        "path",
        "=",
        "\"/video/urls/v/1/toutiao/mp4/{video_id}?r={random_num}\"",
        ".",
        "format",
        "(",
        "video_id",
        "=",
        "video_id",
        ",",
        "random_num",
        "=",
        "str",
        "(",
        "rand_num",
        ")",
        "[",
        "2",
        ":",
        "]",
        ")",
        "e",
        "=",
        "o",
        "=",
        "r",
        "=",
        "-",
        "1",
        "i",
        ",",
        "a",
        "=",
        "0",
        ",",
        "len",
        "(",
        "path",
        ")",
        "while",
        "i",
        "<",
        "a",
        ":",
        "e",
        "=",
        "ord",
        "(",
        "path",
        "[",
        "i",
        "]",
        ")",
        "i",
        "+=",
        "1",
        "if",
        "e",
        "<",
        "128",
        ":",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "e",
        ")",
        "]",
        "else",
        ":",
        "if",
        "e",
        "<",
        "2048",
        ":",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "192",
        "|",
        "e",
        ">>",
        "6",
        "&",
        "31",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "63",
        "&",
        "e",
        ")",
        ")",
        "]",
        "else",
        ":",
        "if",
        "55296",
        "<=",
        "e",
        "<",
        "57344",
        ":",
        "e",
        "=",
        "(",
        "1023",
        "&",
        "e",
        ")",
        "+",
        "64",
        "i",
        "+=",
        "1",
        "o",
        "=",
        "1023",
        "&",
        "t",
        ".",
        "url",
        "(",
        "i",
        ")",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "240",
        "|",
        "e",
        ">>",
        "8",
        "&",
        "7",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "e",
        ">>",
        "2",
        "&",
        "63",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "o",
        ">>",
        "6",
        "&",
        "15",
        "|",
        "(",
        "3",
        "&",
        "e",
        ")",
        "<<",
        "4",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "63",
        "&",
        "o",
        ")",
        ")",
        "]",
        "else",
        ":",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "224",
        "|",
        "e",
        ">>",
        "12",
        "&",
        "15",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "e",
        ">>",
        "6",
        "&",
        "63",
        ")",
        ")",
        "]",
        "r",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        ",",
        "8",
        ")",
        "^",
        "data",
        "[",
        "255",
        "&",
        "(",
        "r",
        "^",
        "(",
        "128",
        "|",
        "63",
        "&",
        "e",
        ")",
        ")",
        "]",
        "return",
        "\"https://ib.365yg.com{path}&s={param}\"",
        ".",
        "format",
        "(",
        "path",
        "=",
        "path",
        ",",
        "param",
        "=",
        "unsigned_right_shitf",
        "(",
        "r",
        "^",
        "-",
        "1",
        ",",
        "0",
        ")",
        ")",
        "while",
        "1",
        ":",
        "url",
        "=",
        "tmp",
        "(",
        ")",
        "if",
        "url",
        ".",
        "split",
        "(",
        "\"=\"",
        ")",
        "[",
        "-",
        "1",
        "]",
        "[",
        "0",
        "]",
        "!=",
        "\"-\"",
        ":",
        "# \u53c2\u6570s\u4e0d\u80fd\u4e3a\u8d1f\u6570",
        "return",
        "url"
      ],
      "docstring": "Splicing URLs according to video ID to get video details",
      "docstring_tokens": [
        "Splicing",
        "URLs",
        "according",
        "to",
        "video",
        "ID",
        "to",
        "get",
        "video",
        "details"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/ixigua.py#L34-L78"
    },
    "target": "Splicing URLs according to video ID to get video details",
    "arguments": [
      [
        "def get_video_url_from_video_id ( video_id ) : # from js data = [ \"\" ] * 256 for index , _ in enumerate ( data ) : t = index for i in range ( 8 ) : t = - 306674912 ^ unsigned_right_shitf ( t , 1 ) if 1 & t else unsigned_right_shitf ( t , 1 ) data [ index ] = t def tmp ( ) : rand_num = random . random ( ) path = \"/video/urls/v/1/toutiao/mp4/{video_id}?r={random_num}\" . format ( video_id = video_id , random_num = str ( rand_num ) [ 2 : ] ) e = o = r = - 1 i , a = 0 , len ( path ) while i < a : e = ord ( path [ i ] ) i += 1 if e < 128 : r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ e ) ] else : if e < 2048 : r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 192 | e >> 6 & 31 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | 63 & e ) ) ] else : if 55296 <= e < 57344 : e = ( 1023 & e ) + 64 i += 1 o = 1023 & t . url ( i ) r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 240 | e >> 8 & 7 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | e >> 2 & 63 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | o >> 6 & 15 | ( 3 & e ) << 4 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | 63 & o ) ) ] else : r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 224 | e >> 12 & 15 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | e >> 6 & 63 ) ) ] r = unsigned_right_shitf ( r , 8 ) ^ data [ 255 & ( r ^ ( 128 | 63 & e ) ) ] return \"https://ib.365yg.com{path}&s={param}\" . format ( path = path , param = unsigned_right_shitf ( r ^ - 1 , 0 ) ) while 1 : url = tmp ( ) if url . split ( \"=\" ) [ - 1 ] [ 0 ] != \"-\" : # \u53c2\u6570s\u4e0d\u80fd\u4e3a\u8d1f\u6570 return url",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n````\n\nThis function seems complex but let me walk it through. The goal is a bit tricky to discern without understanding Chinese, which I don' be proficient, however it looks to decode an obfuascet URL for videos on Toutaoo (Tao Bais). Here are key steps:\n\n1  `data=[0]\u2219256foriinrangeproto(index,_)enumerate(databy):t=i` This initializes 2 arrays, both the data size of256. Then iteratethrougtthe array from left ro rigthe, applying the functionunsigned\\_righthift\\(\\backprime t,1)if1\\t\\leqslantaotherwise\\)to everyelementinthesearra.\n``` 1data[ index\\()t= -3.06674e12^(t+0x100) ``` The second line is an example of unsigned rshift in C++: if t has bit1 (least signifi-canteig), shift it one positio n; otheirwise right shi f by ope rator>>1. This will give a sequence o 0s to ffs (first non-zerofigur e) in ther"
      ]
    ],
    "filtered_resps": [
      "\n````\n\nThis function seems complex but let me walk it through. The goal is a bit tricky to discern without understanding Chinese, which I don' be proficient, however it looks to decode an obfuascet URL for videos on Toutaoo (Tao Bais). Here are key steps:\n\n1  `data=[0]\u2219256foriinrangeproto(index,_)enumerate(databy):t=i` This initializes 2 arrays, both the data size of256. Then iteratethrougtthe array from left ro rigthe, applying the functionunsigned\\_righthift\\(\\backprime t,1)if1\\t\\leqslantaotherwise\\)to everyelementinthesearra.\n``` 1data[ index\\()t= -3.06674e12^(t+0x100) ``` The second line is an example of unsigned rshift in C++: if t has bit1 (least signifi-canteig), shift it one positio n; otheirwise right shi f by ope rator>>1. This will give a sequence o 0s to ffs (first non-zerofigur e) in ther"
    ],
    "smoothed_bleu_4": 0.57939918718031
  },
  {
    "doc_id": 11,
    "doc": {
      "id": 11,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/mgtv.py",
      "func_name": "MGTV.get_mgtv_real_url",
      "original_string": "def get_mgtv_real_url(url):\n        \"\"\"str->list of str\n        Give you the real URLs.\"\"\"\n        content = loads(get_content(url))\n        m3u_url = content['info']\n        split = urlsplit(m3u_url)\n        \n        base_url = \"{scheme}://{netloc}{path}/\".format(scheme = split[0],\n                                                      netloc = split[1],\n                                                      path = dirname(split[2]))\n\n        content = get_content(content['info'])  #get the REAL M3U url, maybe to be changed later?\n        segment_list = []\n        segments_size = 0\n        for i in content.split():\n            if not i.startswith('#'):  #not the best way, better we use the m3u8 package\n                segment_list.append(base_url + i)\n            # use ext-info for fast size calculate\n            elif i.startswith('#EXT-MGTV-File-SIZE:'):\n                segments_size += int(i[i.rfind(':')+1:])\n\n        return m3u_url, segments_size, segment_list",
      "language": "python",
      "code": "def get_mgtv_real_url(url):\n        \"\"\"str->list of str\n        Give you the real URLs.\"\"\"\n        content = loads(get_content(url))\n        m3u_url = content['info']\n        split = urlsplit(m3u_url)\n        \n        base_url = \"{scheme}://{netloc}{path}/\".format(scheme = split[0],\n                                                      netloc = split[1],\n                                                      path = dirname(split[2]))\n\n        content = get_content(content['info'])  #get the REAL M3U url, maybe to be changed later?\n        segment_list = []\n        segments_size = 0\n        for i in content.split():\n            if not i.startswith('#'):  #not the best way, better we use the m3u8 package\n                segment_list.append(base_url + i)\n            # use ext-info for fast size calculate\n            elif i.startswith('#EXT-MGTV-File-SIZE:'):\n                segments_size += int(i[i.rfind(':')+1:])\n\n        return m3u_url, segments_size, segment_list",
      "code_tokens": [
        "def",
        "get_mgtv_real_url",
        "(",
        "url",
        ")",
        ":",
        "content",
        "=",
        "loads",
        "(",
        "get_content",
        "(",
        "url",
        ")",
        ")",
        "m3u_url",
        "=",
        "content",
        "[",
        "'info'",
        "]",
        "split",
        "=",
        "urlsplit",
        "(",
        "m3u_url",
        ")",
        "base_url",
        "=",
        "\"{scheme}://{netloc}{path}/\"",
        ".",
        "format",
        "(",
        "scheme",
        "=",
        "split",
        "[",
        "0",
        "]",
        ",",
        "netloc",
        "=",
        "split",
        "[",
        "1",
        "]",
        ",",
        "path",
        "=",
        "dirname",
        "(",
        "split",
        "[",
        "2",
        "]",
        ")",
        ")",
        "content",
        "=",
        "get_content",
        "(",
        "content",
        "[",
        "'info'",
        "]",
        ")",
        "#get the REAL M3U url, maybe to be changed later?",
        "segment_list",
        "=",
        "[",
        "]",
        "segments_size",
        "=",
        "0",
        "for",
        "i",
        "in",
        "content",
        ".",
        "split",
        "(",
        ")",
        ":",
        "if",
        "not",
        "i",
        ".",
        "startswith",
        "(",
        "'#'",
        ")",
        ":",
        "#not the best way, better we use the m3u8 package",
        "segment_list",
        ".",
        "append",
        "(",
        "base_url",
        "+",
        "i",
        ")",
        "# use ext-info for fast size calculate",
        "elif",
        "i",
        ".",
        "startswith",
        "(",
        "'#EXT-MGTV-File-SIZE:'",
        ")",
        ":",
        "segments_size",
        "+=",
        "int",
        "(",
        "i",
        "[",
        "i",
        ".",
        "rfind",
        "(",
        "':'",
        ")",
        "+",
        "1",
        ":",
        "]",
        ")",
        "return",
        "m3u_url",
        ",",
        "segments_size",
        ",",
        "segment_list"
      ],
      "docstring": "str->list of str\n        Give you the real URLs.",
      "docstring_tokens": [
        "str",
        "-",
        ">",
        "list",
        "of",
        "str",
        "Give",
        "you",
        "the",
        "real",
        "URLs",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/mgtv.py#L37-L58"
    },
    "target": "str - > list of str Give you the real URLs .",
    "arguments": [
      [
        "def get_mgtv_real_url ( url ) : content = loads ( get_content ( url ) ) m3u_url = content [ 'info' ] split = urlsplit ( m3u_url ) base_url = \"{scheme}://{netloc}{path}/\" . format ( scheme = split [ 0 ] , netloc = split [ 1 ] , path = dirname ( split [ 2 ] ) ) content = get_content ( content [ 'info' ] ) #get the REAL M3U url, maybe to be changed later? segment_list = [ ] segments_size = 0 for i in content . split ( ) : if not i . startswith ( '#' ) : #not the best way, better we use the m3u8 package segment_list . append ( base_url + i ) # use ext-info for fast size calculate elif i . startswith ( '#EXT-MGTV-File-SIZE:' ) : segments_size += int ( i [ i . rfind ( ':' ) + 1 : ] ) return m3u_url , segments_size , segment_list",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n[docs](https: github. io/python-cvebinj/ cvediscovery/magictvs.py#l34 \"View on Pydocstyle\") [/sourcecode](link,window=\"_bl ank\" class=\" external free\")\n\nThis method seems complex. Let&#39;stak a step-by-approaches to explain the process:1.\\`url\\&lt;&#x2FF;\\`is a function to fetch content (html, js) at \\_magic-tsv.&#x3B;\n```sourcecodeshare | link=https://paste.ebenezera.tech show|language=bsh|line-numbe rs=1&interle av=  2 def url <url: str) \u2192 content:\n```.header | line - numbertab \u00a0|1 \u00a0|-- defurl<|end header|><https\\//paste.ebzenezer.at/... |2 \u00a0 \u3000\uff03fetch content(html,jscache at _m\u00e1g\u00edc- T S. 3 \u00a0 \u3000r=urlopt(1,headers={\"Accept\"\uff1a \"application/ vml-js\"}). read\uff08text\uff09\n[docs\\( ]https\uff1agithub. iom/python-Cve"
      ]
    ],
    "filtered_resps": [
      "\n[docs](https: github. io/python-cvebinj/ cvediscovery/magictvs.py#l34 \"View on Pydocstyle\") [/sourcecode](link,window=\"_bl ank\" class=\" external free\")\n\nThis method seems complex. Let&#39;stak a step-by-approaches to explain the process:1.\\`url\\&lt;&#x2FF;\\`is a function to fetch content (html, js) at \\_magic-tsv.&#x3B;\n```sourcecodeshare | link=https://paste.ebenezera.tech show|language=bsh|line-numbe rs=1&interle av=  2 def url <url: str) \u2192 content:\n```.header | line - numbertab \u00a0|1 \u00a0|-- defurl<|end header|><https\\//paste.ebzenezer.at/... |2 \u00a0 \u3000\uff03fetch content(html,jscache at _m\u00e1g\u00edc- T S. 3 \u00a0 \u3000r=urlopt(1,headers={\"Accept\"\uff1a \"application/ vml-js\"}). read\uff08text\uff09\n[docs\\( ]https\uff1agithub. iom/python-Cve"
    ],
    "smoothed_bleu_4": 0.6172786585157716
  },
  {
    "doc_id": 12,
    "doc": {
      "id": 12,
      "repo": "soimort/you-get",
      "path": "src/you_get/util/fs.py",
      "func_name": "legitimize",
      "original_string": "def legitimize(text, os=detect_os()):\n    \"\"\"Converts a string to a valid filename.\n    \"\"\"\n\n    # POSIX systems\n    text = text.translate({\n        0: None,\n        ord('/'): '-',\n        ord('|'): '-',\n    })\n\n    # FIXME: do some filesystem detection\n    if os == 'windows' or os == 'cygwin' or os == 'wsl':\n        # Windows (non-POSIX namespace)\n        text = text.translate({\n            # Reserved in Windows VFAT and NTFS\n            ord(':'): '-',\n            ord('*'): '-',\n            ord('?'): '-',\n            ord('\\\\'): '-',\n            ord('\\\"'): '\\'',\n            # Reserved in Windows VFAT\n            ord('+'): '-',\n            ord('<'): '-',\n            ord('>'): '-',\n            ord('['): '(',\n            ord(']'): ')',\n            ord('\\t'): ' ',\n        })\n    else:\n        # *nix\n        if os == 'mac':\n            # Mac OS HFS+\n            text = text.translate({\n                ord(':'): '-',\n            })\n\n        # Remove leading .\n        if text.startswith(\".\"):\n            text = text[1:]\n\n    text = text[:80] # Trim to 82 Unicode characters long\n    return text",
      "language": "python",
      "code": "def legitimize(text, os=detect_os()):\n    \"\"\"Converts a string to a valid filename.\n    \"\"\"\n\n    # POSIX systems\n    text = text.translate({\n        0: None,\n        ord('/'): '-',\n        ord('|'): '-',\n    })\n\n    # FIXME: do some filesystem detection\n    if os == 'windows' or os == 'cygwin' or os == 'wsl':\n        # Windows (non-POSIX namespace)\n        text = text.translate({\n            # Reserved in Windows VFAT and NTFS\n            ord(':'): '-',\n            ord('*'): '-',\n            ord('?'): '-',\n            ord('\\\\'): '-',\n            ord('\\\"'): '\\'',\n            # Reserved in Windows VFAT\n            ord('+'): '-',\n            ord('<'): '-',\n            ord('>'): '-',\n            ord('['): '(',\n            ord(']'): ')',\n            ord('\\t'): ' ',\n        })\n    else:\n        # *nix\n        if os == 'mac':\n            # Mac OS HFS+\n            text = text.translate({\n                ord(':'): '-',\n            })\n\n        # Remove leading .\n        if text.startswith(\".\"):\n            text = text[1:]\n\n    text = text[:80] # Trim to 82 Unicode characters long\n    return text",
      "code_tokens": [
        "def",
        "legitimize",
        "(",
        "text",
        ",",
        "os",
        "=",
        "detect_os",
        "(",
        ")",
        ")",
        ":",
        "# POSIX systems",
        "text",
        "=",
        "text",
        ".",
        "translate",
        "(",
        "{",
        "0",
        ":",
        "None",
        ",",
        "ord",
        "(",
        "'/'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'|'",
        ")",
        ":",
        "'-'",
        ",",
        "}",
        ")",
        "# FIXME: do some filesystem detection",
        "if",
        "os",
        "==",
        "'windows'",
        "or",
        "os",
        "==",
        "'cygwin'",
        "or",
        "os",
        "==",
        "'wsl'",
        ":",
        "# Windows (non-POSIX namespace)",
        "text",
        "=",
        "text",
        ".",
        "translate",
        "(",
        "{",
        "# Reserved in Windows VFAT and NTFS",
        "ord",
        "(",
        "':'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'*'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'?'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'\\\\'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'\\\"'",
        ")",
        ":",
        "'\\''",
        ",",
        "# Reserved in Windows VFAT",
        "ord",
        "(",
        "'+'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'<'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'>'",
        ")",
        ":",
        "'-'",
        ",",
        "ord",
        "(",
        "'['",
        ")",
        ":",
        "'('",
        ",",
        "ord",
        "(",
        "']'",
        ")",
        ":",
        "')'",
        ",",
        "ord",
        "(",
        "'\\t'",
        ")",
        ":",
        "' '",
        ",",
        "}",
        ")",
        "else",
        ":",
        "# *nix",
        "if",
        "os",
        "==",
        "'mac'",
        ":",
        "# Mac OS HFS+",
        "text",
        "=",
        "text",
        ".",
        "translate",
        "(",
        "{",
        "ord",
        "(",
        "':'",
        ")",
        ":",
        "'-'",
        ",",
        "}",
        ")",
        "# Remove leading .",
        "if",
        "text",
        ".",
        "startswith",
        "(",
        "\".\"",
        ")",
        ":",
        "text",
        "=",
        "text",
        "[",
        "1",
        ":",
        "]",
        "text",
        "=",
        "text",
        "[",
        ":",
        "80",
        "]",
        "# Trim to 82 Unicode characters long",
        "return",
        "text"
      ],
      "docstring": "Converts a string to a valid filename.",
      "docstring_tokens": [
        "Converts",
        "a",
        "string",
        "to",
        "a",
        "valid",
        "filename",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/util/fs.py#L5-L47"
    },
    "target": "Converts a string to a valid filename .",
    "arguments": [
      [
        "def legitimize ( text , os = detect_os ( ) ) : # POSIX systems text = text . translate ( { 0 : None , ord ( '/' ) : '-' , ord ( '|' ) : '-' , } ) # FIXME: do some filesystem detection if os == 'windows' or os == 'cygwin' or os == 'wsl' : # Windows (non-POSIX namespace) text = text . translate ( { # Reserved in Windows VFAT and NTFS ord ( ':' ) : '-' , ord ( '*' ) : '-' , ord ( '?' ) : '-' , ord ( '\\\\' ) : '-' , ord ( '\\\"' ) : '\\'' , # Reserved in Windows VFAT ord ( '+' ) : '-' , ord ( '<' ) : '-' , ord ( '>' ) : '-' , ord ( '[' ) : '(' , ord ( ']' ) : ')' , ord ( '\\t' ) : ' ' , } ) else : # *nix if os == 'mac' : # Mac OS HFS+ text = text . translate ( { ord ( ':' ) : '-' , } ) # Remove leading . if text . startswith ( \".\" ) : text = text [ 1 : ] text = text [ : 80 ] # Trim to 82 Unicode characters long return text",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n````\n\nHere are a'text legitimization' examples using `legitize(text)``:\n\n1. Legitimezing \"path/that/made/Windows/vex\" on Linux: ``>>> text=\u2018 path/th\u0430t/mad\uff45/Wind\uff4f\uff58/s vex\u2019``\n\n   ```text \npath thats mado Winox vext\n ```````\n\n\n## Step-to-Step Breakdown\n\n* We start from an empty list to keep a count\n  ```\ncount=[0,  5] # initial value is [count, max count so-f\u0430\u0433]\n\nfor line \tin range(n):\n\tcount[\u043e] \t+1 # increas count by  \u044c\n\tmax(count, n-\u043b+count[o]\t) = n - \t\u043e # upd\u0430\u0442\u0435 \u043c\u0430\u0441 \u0441\u0441\u043eun\n\n```\n2. The loop iterates n times (for example `5` in your code). In every round we increase our \"counter\", which in this code is an array with two values (0,5) at initialisation and the max counter for this round is n - line number + current counter. This will help in keeping track how many characters were"
      ]
    ],
    "filtered_resps": [
      "\n````\n\nHere are a'text legitimization' examples using `legitize(text)``:\n\n1. Legitimezing \"path/that/made/Windows/vex\" on Linux: ``>>> text=\u2018 path/th\u0430t/mad\uff45/Wind\uff4f\uff58/s vex\u2019``\n\n   ```text \npath thats mado Winox vext\n ```````\n\n\n## Step-to-Step Breakdown\n\n* We start from an empty list to keep a count\n  ```\ncount=[0,  5] # initial value is [count, max count so-f\u0430\u0433]\n\nfor line \tin range(n):\n\tcount[\u043e] \t+1 # increas count by  \u044c\n\tmax(count, n-\u043b+count[o]\t) = n - \t\u043e # upd\u0430\u0442\u0435 \u043c\u0430\u0441 \u0441\u0441\u043eun\n\n```\n2. The loop iterates n times (for example `5` in your code). In every round we increase our \"counter\", which in this code is an array with two values (0,5) at initialisation and the max counter for this round is n - line number + current counter. This will help in keeping track how many characters were"
    ],
    "smoothed_bleu_4": 0.6142118319787562
  },
  {
    "doc_id": 13,
    "doc": {
      "id": 13,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/cbs.py",
      "func_name": "cbs_download",
      "original_string": "def cbs_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads CBS videos by URL.\n    \"\"\"\n\n    html = get_content(url)\n    pid = match1(html, r'video\\.settings\\.pid\\s*=\\s*\\'([^\\']+)\\'')\n    title = match1(html, r'video\\.settings\\.title\\s*=\\s*\\\"([^\\\"]+)\\\"')\n\n    theplatform_download_by_pid(pid, title, output_dir=output_dir, merge=merge, info_only=info_only)",
      "language": "python",
      "code": "def cbs_download(url, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"Downloads CBS videos by URL.\n    \"\"\"\n\n    html = get_content(url)\n    pid = match1(html, r'video\\.settings\\.pid\\s*=\\s*\\'([^\\']+)\\'')\n    title = match1(html, r'video\\.settings\\.title\\s*=\\s*\\\"([^\\\"]+)\\\"')\n\n    theplatform_download_by_pid(pid, title, output_dir=output_dir, merge=merge, info_only=info_only)",
      "code_tokens": [
        "def",
        "cbs_download",
        "(",
        "url",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "html",
        "=",
        "get_content",
        "(",
        "url",
        ")",
        "pid",
        "=",
        "match1",
        "(",
        "html",
        ",",
        "r'video\\.settings\\.pid\\s*=\\s*\\'([^\\']+)\\''",
        ")",
        "title",
        "=",
        "match1",
        "(",
        "html",
        ",",
        "r'video\\.settings\\.title\\s*=\\s*\\\"([^\\\"]+)\\\"'",
        ")",
        "theplatform_download_by_pid",
        "(",
        "pid",
        ",",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")"
      ],
      "docstring": "Downloads CBS videos by URL.",
      "docstring_tokens": [
        "Downloads",
        "CBS",
        "videos",
        "by",
        "URL",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/cbs.py#L9-L17"
    },
    "target": "Downloads CBS videos by URL .",
    "arguments": [
      [
        "def cbs_download ( url , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : html = get_content ( url ) pid = match1 ( html , r'video\\.settings\\.pid\\s*=\\s*\\'([^\\']+)\\'' ) title = match1 ( html , r'video\\.settings\\.title\\s*=\\s*\\\"([^\\\"]+)\\\"' ) theplatform_download_by_pid ( pid , title , output_dir = output_dir , merge = merge , info_only = info_only )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``\n\nThis function downloads content by PID (Program Identifier). Here are a function description with comments:\n### Parameters: \u200b ``` url (str or URL ): URL where you can see content (e.g video, live stream). ```\n    0   output\\_dircall the function and provide an example of how it mightbeusedinapragmaticeventhoughitmaybetrivaltocallsimilarcharacterautoregularexpressiominthelibrary``\n\n``defcbspaid(\u00a0*args,**kwr\u00a0)html=urlopenget(url,retrunhtml,info_only=Flasemergedownloads\u00a0tothesamerecursive=False):ifre.search('VideoNotFoundsuport','hmtl',Re.MULTINE)return'Nofileswillbe downloaded'thatforms=re.findaill(html,FORM_PATTERRS)parsel.Forms(parsers).to_dict()[0]['encluere\u00a0'content-displosiheadervlaeu']='video/MP4;quv=mstype=bypaer=application/dashm+avcpdftext/csmplf4adecodec"
      ]
    ],
    "filtered_resps": [
      " ``\n\nThis function downloads content by PID (Program Identifier). Here are a function description with comments:\n### Parameters: \u200b ``` url (str or URL ): URL where you can see content (e.g video, live stream). ```\n    0   output\\_dircall the function and provide an example of how it mightbeusedinapragmaticeventhoughitmaybetrivaltocallsimilarcharacterautoregularexpressiominthelibrary``\n\n``defcbspaid(\u00a0*args,**kwr\u00a0)html=urlopenget(url,retrunhtml,info_only=Flasemergedownloads\u00a0tothesamerecursive=False):ifre.search('VideoNotFoundsuport','hmtl',Re.MULTINE)return'Nofileswillbe downloaded'thatforms=re.findaill(html,FORM_PATTERRS)parsel.Forms(parsers).to_dict()[0]['encluere\u00a0'content-displosiheadervlaeu']='video/MP4;quv=mstype=bypaer=application/dashm+avcpdftext/csmplf4adecodec"
    ],
    "smoothed_bleu_4": 0.7978725302814481
  },
  {
    "doc_id": 14,
    "doc": {
      "id": 14,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/iqiyi.py",
      "func_name": "Iqiyi.download",
      "original_string": "def download(self, **kwargs):\n        \"\"\"Override the original one\n        Ugly ugly dirty hack\"\"\"\n        if 'json_output' in kwargs and kwargs['json_output']:\n            json_output.output(self)\n        elif 'info_only' in kwargs and kwargs['info_only']:\n            if 'stream_id' in kwargs and kwargs['stream_id']:\n                # Display the stream\n                stream_id = kwargs['stream_id']\n                if 'index' not in kwargs:\n                    self.p(stream_id)\n                else:\n                    self.p_i(stream_id)\n            else:\n                # Display all available streams\n                if 'index' not in kwargs:\n                    self.p([])\n                else:\n                    stream_id = self.streams_sorted[0]['id'] if 'id' in self.streams_sorted[0] else self.streams_sorted[0]['itag']\n                    self.p_i(stream_id)\n\n        else:\n            if 'stream_id' in kwargs and kwargs['stream_id']:\n                # Download the stream\n                stream_id = kwargs['stream_id']\n            else:\n                # Download stream with the best quality\n                stream_id = self.streams_sorted[0]['id'] if 'id' in self.streams_sorted[0] else self.streams_sorted[0]['itag']\n\n            if 'index' not in kwargs:\n                self.p(stream_id)\n            else:\n                self.p_i(stream_id)\n\n            if stream_id in self.streams:\n                urls = self.streams[stream_id]['src']\n                ext = self.streams[stream_id]['container']\n                total_size = self.streams[stream_id]['size']\n            else:\n                urls = self.dash_streams[stream_id]['src']\n                ext = self.dash_streams[stream_id]['container']\n                total_size = self.dash_streams[stream_id]['size']\n\n            if not urls:\n                log.wtf('[Failed] Cannot extract video source.')\n            # For legacy main()\n            \n            #Here's the change!!\n            download_url_ffmpeg(urls[0], self.title, 'mp4', output_dir=kwargs['output_dir'], merge=kwargs['merge'], stream=False)\n\n            if not kwargs['caption']:\n                print('Skipping captions.')\n                return\n            for lang in self.caption_tracks:\n                filename = '%s.%s.srt' % (get_filename(self.title), lang)\n                print('Saving %s ... ' % filename, end=\"\", flush=True)\n                srt = self.caption_tracks[lang]\n                with open(os.path.join(kwargs['output_dir'], filename),\n                          'w', encoding='utf-8') as x:\n                    x.write(srt)\n                print('Done.')",
      "language": "python",
      "code": "def download(self, **kwargs):\n        \"\"\"Override the original one\n        Ugly ugly dirty hack\"\"\"\n        if 'json_output' in kwargs and kwargs['json_output']:\n            json_output.output(self)\n        elif 'info_only' in kwargs and kwargs['info_only']:\n            if 'stream_id' in kwargs and kwargs['stream_id']:\n                # Display the stream\n                stream_id = kwargs['stream_id']\n                if 'index' not in kwargs:\n                    self.p(stream_id)\n                else:\n                    self.p_i(stream_id)\n            else:\n                # Display all available streams\n                if 'index' not in kwargs:\n                    self.p([])\n                else:\n                    stream_id = self.streams_sorted[0]['id'] if 'id' in self.streams_sorted[0] else self.streams_sorted[0]['itag']\n                    self.p_i(stream_id)\n\n        else:\n            if 'stream_id' in kwargs and kwargs['stream_id']:\n                # Download the stream\n                stream_id = kwargs['stream_id']\n            else:\n                # Download stream with the best quality\n                stream_id = self.streams_sorted[0]['id'] if 'id' in self.streams_sorted[0] else self.streams_sorted[0]['itag']\n\n            if 'index' not in kwargs:\n                self.p(stream_id)\n            else:\n                self.p_i(stream_id)\n\n            if stream_id in self.streams:\n                urls = self.streams[stream_id]['src']\n                ext = self.streams[stream_id]['container']\n                total_size = self.streams[stream_id]['size']\n            else:\n                urls = self.dash_streams[stream_id]['src']\n                ext = self.dash_streams[stream_id]['container']\n                total_size = self.dash_streams[stream_id]['size']\n\n            if not urls:\n                log.wtf('[Failed] Cannot extract video source.')\n            # For legacy main()\n            \n            #Here's the change!!\n            download_url_ffmpeg(urls[0], self.title, 'mp4', output_dir=kwargs['output_dir'], merge=kwargs['merge'], stream=False)\n\n            if not kwargs['caption']:\n                print('Skipping captions.')\n                return\n            for lang in self.caption_tracks:\n                filename = '%s.%s.srt' % (get_filename(self.title), lang)\n                print('Saving %s ... ' % filename, end=\"\", flush=True)\n                srt = self.caption_tracks[lang]\n                with open(os.path.join(kwargs['output_dir'], filename),\n                          'w', encoding='utf-8') as x:\n                    x.write(srt)\n                print('Done.')",
      "code_tokens": [
        "def",
        "download",
        "(",
        "self",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "if",
        "'json_output'",
        "in",
        "kwargs",
        "and",
        "kwargs",
        "[",
        "'json_output'",
        "]",
        ":",
        "json_output",
        ".",
        "output",
        "(",
        "self",
        ")",
        "elif",
        "'info_only'",
        "in",
        "kwargs",
        "and",
        "kwargs",
        "[",
        "'info_only'",
        "]",
        ":",
        "if",
        "'stream_id'",
        "in",
        "kwargs",
        "and",
        "kwargs",
        "[",
        "'stream_id'",
        "]",
        ":",
        "# Display the stream",
        "stream_id",
        "=",
        "kwargs",
        "[",
        "'stream_id'",
        "]",
        "if",
        "'index'",
        "not",
        "in",
        "kwargs",
        ":",
        "self",
        ".",
        "p",
        "(",
        "stream_id",
        ")",
        "else",
        ":",
        "self",
        ".",
        "p_i",
        "(",
        "stream_id",
        ")",
        "else",
        ":",
        "# Display all available streams",
        "if",
        "'index'",
        "not",
        "in",
        "kwargs",
        ":",
        "self",
        ".",
        "p",
        "(",
        "[",
        "]",
        ")",
        "else",
        ":",
        "stream_id",
        "=",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "[",
        "'id'",
        "]",
        "if",
        "'id'",
        "in",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "else",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "[",
        "'itag'",
        "]",
        "self",
        ".",
        "p_i",
        "(",
        "stream_id",
        ")",
        "else",
        ":",
        "if",
        "'stream_id'",
        "in",
        "kwargs",
        "and",
        "kwargs",
        "[",
        "'stream_id'",
        "]",
        ":",
        "# Download the stream",
        "stream_id",
        "=",
        "kwargs",
        "[",
        "'stream_id'",
        "]",
        "else",
        ":",
        "# Download stream with the best quality",
        "stream_id",
        "=",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "[",
        "'id'",
        "]",
        "if",
        "'id'",
        "in",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "else",
        "self",
        ".",
        "streams_sorted",
        "[",
        "0",
        "]",
        "[",
        "'itag'",
        "]",
        "if",
        "'index'",
        "not",
        "in",
        "kwargs",
        ":",
        "self",
        ".",
        "p",
        "(",
        "stream_id",
        ")",
        "else",
        ":",
        "self",
        ".",
        "p_i",
        "(",
        "stream_id",
        ")",
        "if",
        "stream_id",
        "in",
        "self",
        ".",
        "streams",
        ":",
        "urls",
        "=",
        "self",
        ".",
        "streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'src'",
        "]",
        "ext",
        "=",
        "self",
        ".",
        "streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'container'",
        "]",
        "total_size",
        "=",
        "self",
        ".",
        "streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'size'",
        "]",
        "else",
        ":",
        "urls",
        "=",
        "self",
        ".",
        "dash_streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'src'",
        "]",
        "ext",
        "=",
        "self",
        ".",
        "dash_streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'container'",
        "]",
        "total_size",
        "=",
        "self",
        ".",
        "dash_streams",
        "[",
        "stream_id",
        "]",
        "[",
        "'size'",
        "]",
        "if",
        "not",
        "urls",
        ":",
        "log",
        ".",
        "wtf",
        "(",
        "'[Failed] Cannot extract video source.'",
        ")",
        "# For legacy main()",
        "#Here's the change!!",
        "download_url_ffmpeg",
        "(",
        "urls",
        "[",
        "0",
        "]",
        ",",
        "self",
        ".",
        "title",
        ",",
        "'mp4'",
        ",",
        "output_dir",
        "=",
        "kwargs",
        "[",
        "'output_dir'",
        "]",
        ",",
        "merge",
        "=",
        "kwargs",
        "[",
        "'merge'",
        "]",
        ",",
        "stream",
        "=",
        "False",
        ")",
        "if",
        "not",
        "kwargs",
        "[",
        "'caption'",
        "]",
        ":",
        "print",
        "(",
        "'Skipping captions.'",
        ")",
        "return",
        "for",
        "lang",
        "in",
        "self",
        ".",
        "caption_tracks",
        ":",
        "filename",
        "=",
        "'%s.%s.srt'",
        "%",
        "(",
        "get_filename",
        "(",
        "self",
        ".",
        "title",
        ")",
        ",",
        "lang",
        ")",
        "print",
        "(",
        "'Saving %s ... '",
        "%",
        "filename",
        ",",
        "end",
        "=",
        "\"\"",
        ",",
        "flush",
        "=",
        "True",
        ")",
        "srt",
        "=",
        "self",
        ".",
        "caption_tracks",
        "[",
        "lang",
        "]",
        "with",
        "open",
        "(",
        "os",
        ".",
        "path",
        ".",
        "join",
        "(",
        "kwargs",
        "[",
        "'output_dir'",
        "]",
        ",",
        "filename",
        ")",
        ",",
        "'w'",
        ",",
        "encoding",
        "=",
        "'utf-8'",
        ")",
        "as",
        "x",
        ":",
        "x",
        ".",
        "write",
        "(",
        "srt",
        ")",
        "print",
        "(",
        "'Done.'",
        ")"
      ],
      "docstring": "Override the original one\n        Ugly ugly dirty hack",
      "docstring_tokens": [
        "Override",
        "the",
        "original",
        "one",
        "Ugly",
        "ugly",
        "dirty",
        "hack"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/iqiyi.py#L158-L218"
    },
    "target": "Override the original one Ugly ugly dirty hack",
    "arguments": [
      [
        "def download ( self , * * kwargs ) : if 'json_output' in kwargs and kwargs [ 'json_output' ] : json_output . output ( self ) elif 'info_only' in kwargs and kwargs [ 'info_only' ] : if 'stream_id' in kwargs and kwargs [ 'stream_id' ] : # Display the stream stream_id = kwargs [ 'stream_id' ] if 'index' not in kwargs : self . p ( stream_id ) else : self . p_i ( stream_id ) else : # Display all available streams if 'index' not in kwargs : self . p ( [ ] ) else : stream_id = self . streams_sorted [ 0 ] [ 'id' ] if 'id' in self . streams_sorted [ 0 ] else self . streams_sorted [ 0 ] [ 'itag' ] self . p_i ( stream_id ) else : if 'stream_id' in kwargs and kwargs [ 'stream_id' ] : # Download the stream stream_id = kwargs [ 'stream_id' ] else : # Download stream with the best quality stream_id = self . streams_sorted [ 0 ] [ 'id' ] if 'id' in self . streams_sorted [ 0 ] else self . streams_sorted [ 0 ] [ 'itag' ] if 'index' not in kwargs : self . p ( stream_id ) else : self . p_i ( stream_id ) if stream_id in self . streams : urls = self . streams [ stream_id ] [ 'src' ] ext = self . streams [ stream_id ] [ 'container' ] total_size = self . streams [ stream_id ] [ 'size' ] else : urls = self . dash_streams [ stream_id ] [ 'src' ] ext = self . dash_streams [ stream_id ] [ 'container' ] total_size = self . dash_streams [ stream_id ] [ 'size' ] if not urls : log . wtf ( '[Failed] Cannot extract video source.' ) # For legacy main() #Here's the change!! download_url_ffmpeg ( urls [ 0 ] , self . title , 'mp4' , output_dir = kwargs [ 'output_dir' ] , merge = kwargs [ 'merge' ] , stream = False ) if not kwargs [ 'caption' ] : print ( 'Skipping captions.' ) return for lang in self . caption_tracks : filename = '%s.%s.srt' % ( get_filename ( self . title ) , lang ) print ( 'Saving %s ... ' % filename , end = \"\" , flush = True ) srt = self . caption_tracks [ lang ] with open ( os . path . join ( kwargs [ 'output_dir' ] , filename ) , 'w' , encoding = 'utf-8' ) as x : x . write ( srt ) print ( 'Done.' )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # If there was more streams (evident by more URL), download it in 4:2.1 and 5. 5 4_211_streams, fivestartreamsnfifteencntnstreams _ 5 _ fiveseconddownloa d_ = [ s. split ('.m3usubtitles=')[1].rsstrip('\\''for ssin s. splithref=\"(.m4s\"or.ssm/4:210.0,frametype=bmp,mux=avb)') print(5.51f' Downloadingsubs in{',.5f}%...'end=flusetrue,stream=kwargs[get('subs_downlaoding')or'fivemultilanguageretrievel'notinkwagssubsdnloading'] if'start_time'dinself.captio_tracskswsstart_timenf'None'thensefltsrt=stsrtrim(0,100)'else'strt=None'withopene(os.pata.joindefault_downlao_directory,fname)asxx:x.wrte(sts)xx.cloes()\n"
      ]
    ],
    "filtered_resps": [
      " # If there was more streams (evident by more URL), download it in 4:2.1 and 5. 5 4_211_streams, fivestartreamsnfifteencntnstreams _ 5 _ fiveseconddownloa d_ = [ s. split ('.m3usubtitles=')[1].rsstrip('\\''for ssin s. splithref=\"(.m4s\"or.ssm/4:210.0,frametype=bmp,mux=avb)') print(5.51f' Downloadingsubs in{',.5f}%...'end=flusetrue,stream=kwargs[get('subs_downlaoding')or'fivemultilanguageretrievel'notinkwagssubsdnloading'] if'start_time'dinself.captio_tracskswsstart_timenf'None'thensefltsrt=stsrtrim(0,100)'else'strt=None'withopene(os.pata.joindefault_downlao_directory,fname)asxx:x.wrte(sts)xx.cloes()\n"
    ],
    "smoothed_bleu_4": 6.419712409235849e-78
  },
  {
    "doc_id": 15,
    "doc": {
      "id": 15,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/acfun.py",
      "func_name": "acfun_download_by_vid",
      "original_string": "def acfun_download_by_vid(vid, title, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"str, str, str, bool, bool ->None\n\n    Download Acfun video by vid.\n\n    Call Acfun API, decide which site to use, and pass the job to its\n    extractor.\n    \"\"\"\n\n    #first call the main parasing API\n    info = json.loads(get_content('http://www.acfun.cn/video/getVideo.aspx?id=' + vid))\n\n    sourceType = info['sourceType']\n\n    #decide sourceId to know which extractor to use\n    if 'sourceId' in info: sourceId = info['sourceId']\n    # danmakuId = info['danmakuId']\n\n    #call extractor decided by sourceId\n    if sourceType == 'sina':\n        sina_download_by_vid(sourceId, title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'youku':\n        youku_download_by_vid(sourceId, title=title, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)\n    elif sourceType == 'tudou':\n        tudou_download_by_iid(sourceId, title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'qq':\n        qq_download_by_vid(sourceId, title, True, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'letv':\n        letvcloud_download_by_vu(sourceId, '2d8c027396', title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'zhuzhan':\n        #As in Jul.28.2016, Acfun is using embsig to anti hotlink so we need to pass this\n#In Mar. 2017 there is a dedicated ``acfun_proxy'' in youku cloud player\n#old code removed\n        url = 'http://www.acfun.cn/v/ac' + vid\n        yk_streams = youku_acfun_proxy(info['sourceId'], info['encode'], url)\n        seq = ['mp4hd3', 'mp4hd2', 'mp4hd', 'flvhd']\n        for t in seq:\n            if yk_streams.get(t):\n                preferred = yk_streams[t]\n                break\n#total_size in the json could be incorrect(F.I. 0)\n        size = 0\n        for url in preferred[0]:\n            _, _, seg_size = url_info(url)\n            size += seg_size\n#fallback to flvhd is not quite possible\n        if re.search(r'fid=[0-9A-Z\\-]*.flv', preferred[0][0]):\n            ext = 'flv'\n        else:\n            ext = 'mp4'\n        print_info(site_info, title, ext, size)\n        if not info_only:\n            download_urls(preferred[0], title, ext, size, output_dir=output_dir, merge=merge)\n    else:\n        raise NotImplementedError(sourceType)\n\n    if not info_only and not dry_run:\n        if not kwargs['caption']:\n            print('Skipping danmaku.')\n            return\n        try:\n            title = get_filename(title)\n            print('Downloading %s ...\\n' % (title + '.cmt.json'))\n            cmt = get_srt_json(vid)\n            with open(os.path.join(output_dir, title + '.cmt.json'), 'w', encoding='utf-8') as x:\n                x.write(cmt)\n        except:\n            pass",
      "language": "python",
      "code": "def acfun_download_by_vid(vid, title, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"str, str, str, bool, bool ->None\n\n    Download Acfun video by vid.\n\n    Call Acfun API, decide which site to use, and pass the job to its\n    extractor.\n    \"\"\"\n\n    #first call the main parasing API\n    info = json.loads(get_content('http://www.acfun.cn/video/getVideo.aspx?id=' + vid))\n\n    sourceType = info['sourceType']\n\n    #decide sourceId to know which extractor to use\n    if 'sourceId' in info: sourceId = info['sourceId']\n    # danmakuId = info['danmakuId']\n\n    #call extractor decided by sourceId\n    if sourceType == 'sina':\n        sina_download_by_vid(sourceId, title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'youku':\n        youku_download_by_vid(sourceId, title=title, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)\n    elif sourceType == 'tudou':\n        tudou_download_by_iid(sourceId, title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'qq':\n        qq_download_by_vid(sourceId, title, True, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'letv':\n        letvcloud_download_by_vu(sourceId, '2d8c027396', title, output_dir=output_dir, merge=merge, info_only=info_only)\n    elif sourceType == 'zhuzhan':\n        #As in Jul.28.2016, Acfun is using embsig to anti hotlink so we need to pass this\n#In Mar. 2017 there is a dedicated ``acfun_proxy'' in youku cloud player\n#old code removed\n        url = 'http://www.acfun.cn/v/ac' + vid\n        yk_streams = youku_acfun_proxy(info['sourceId'], info['encode'], url)\n        seq = ['mp4hd3', 'mp4hd2', 'mp4hd', 'flvhd']\n        for t in seq:\n            if yk_streams.get(t):\n                preferred = yk_streams[t]\n                break\n#total_size in the json could be incorrect(F.I. 0)\n        size = 0\n        for url in preferred[0]:\n            _, _, seg_size = url_info(url)\n            size += seg_size\n#fallback to flvhd is not quite possible\n        if re.search(r'fid=[0-9A-Z\\-]*.flv', preferred[0][0]):\n            ext = 'flv'\n        else:\n            ext = 'mp4'\n        print_info(site_info, title, ext, size)\n        if not info_only:\n            download_urls(preferred[0], title, ext, size, output_dir=output_dir, merge=merge)\n    else:\n        raise NotImplementedError(sourceType)\n\n    if not info_only and not dry_run:\n        if not kwargs['caption']:\n            print('Skipping danmaku.')\n            return\n        try:\n            title = get_filename(title)\n            print('Downloading %s ...\\n' % (title + '.cmt.json'))\n            cmt = get_srt_json(vid)\n            with open(os.path.join(output_dir, title + '.cmt.json'), 'w', encoding='utf-8') as x:\n                x.write(cmt)\n        except:\n            pass",
      "code_tokens": [
        "def",
        "acfun_download_by_vid",
        "(",
        "vid",
        ",",
        "title",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "#first call the main parasing API",
        "info",
        "=",
        "json",
        ".",
        "loads",
        "(",
        "get_content",
        "(",
        "'http://www.acfun.cn/video/getVideo.aspx?id='",
        "+",
        "vid",
        ")",
        ")",
        "sourceType",
        "=",
        "info",
        "[",
        "'sourceType'",
        "]",
        "#decide sourceId to know which extractor to use",
        "if",
        "'sourceId'",
        "in",
        "info",
        ":",
        "sourceId",
        "=",
        "info",
        "[",
        "'sourceId'",
        "]",
        "# danmakuId = info['danmakuId']",
        "#call extractor decided by sourceId",
        "if",
        "sourceType",
        "==",
        "'sina'",
        ":",
        "sina_download_by_vid",
        "(",
        "sourceId",
        ",",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "elif",
        "sourceType",
        "==",
        "'youku'",
        ":",
        "youku_download_by_vid",
        "(",
        "sourceId",
        ",",
        "title",
        "=",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        "elif",
        "sourceType",
        "==",
        "'tudou'",
        ":",
        "tudou_download_by_iid",
        "(",
        "sourceId",
        ",",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "elif",
        "sourceType",
        "==",
        "'qq'",
        ":",
        "qq_download_by_vid",
        "(",
        "sourceId",
        ",",
        "title",
        ",",
        "True",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "elif",
        "sourceType",
        "==",
        "'letv'",
        ":",
        "letvcloud_download_by_vu",
        "(",
        "sourceId",
        ",",
        "'2d8c027396'",
        ",",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ")",
        "elif",
        "sourceType",
        "==",
        "'zhuzhan'",
        ":",
        "#As in Jul.28.2016, Acfun is using embsig to anti hotlink so we need to pass this",
        "#In Mar. 2017 there is a dedicated ``acfun_proxy'' in youku cloud player",
        "#old code removed",
        "url",
        "=",
        "'http://www.acfun.cn/v/ac'",
        "+",
        "vid",
        "yk_streams",
        "=",
        "youku_acfun_proxy",
        "(",
        "info",
        "[",
        "'sourceId'",
        "]",
        ",",
        "info",
        "[",
        "'encode'",
        "]",
        ",",
        "url",
        ")",
        "seq",
        "=",
        "[",
        "'mp4hd3'",
        ",",
        "'mp4hd2'",
        ",",
        "'mp4hd'",
        ",",
        "'flvhd'",
        "]",
        "for",
        "t",
        "in",
        "seq",
        ":",
        "if",
        "yk_streams",
        ".",
        "get",
        "(",
        "t",
        ")",
        ":",
        "preferred",
        "=",
        "yk_streams",
        "[",
        "t",
        "]",
        "break",
        "#total_size in the json could be incorrect(F.I. 0)",
        "size",
        "=",
        "0",
        "for",
        "url",
        "in",
        "preferred",
        "[",
        "0",
        "]",
        ":",
        "_",
        ",",
        "_",
        ",",
        "seg_size",
        "=",
        "url_info",
        "(",
        "url",
        ")",
        "size",
        "+=",
        "seg_size",
        "#fallback to flvhd is not quite possible",
        "if",
        "re",
        ".",
        "search",
        "(",
        "r'fid=[0-9A-Z\\-]*.flv'",
        ",",
        "preferred",
        "[",
        "0",
        "]",
        "[",
        "0",
        "]",
        ")",
        ":",
        "ext",
        "=",
        "'flv'",
        "else",
        ":",
        "ext",
        "=",
        "'mp4'",
        "print_info",
        "(",
        "site_info",
        ",",
        "title",
        ",",
        "ext",
        ",",
        "size",
        ")",
        "if",
        "not",
        "info_only",
        ":",
        "download_urls",
        "(",
        "preferred",
        "[",
        "0",
        "]",
        ",",
        "title",
        ",",
        "ext",
        ",",
        "size",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ")",
        "else",
        ":",
        "raise",
        "NotImplementedError",
        "(",
        "sourceType",
        ")",
        "if",
        "not",
        "info_only",
        "and",
        "not",
        "dry_run",
        ":",
        "if",
        "not",
        "kwargs",
        "[",
        "'caption'",
        "]",
        ":",
        "print",
        "(",
        "'Skipping danmaku.'",
        ")",
        "return",
        "try",
        ":",
        "title",
        "=",
        "get_filename",
        "(",
        "title",
        ")",
        "print",
        "(",
        "'Downloading %s ...\\n'",
        "%",
        "(",
        "title",
        "+",
        "'.cmt.json'",
        ")",
        ")",
        "cmt",
        "=",
        "get_srt_json",
        "(",
        "vid",
        ")",
        "with",
        "open",
        "(",
        "os",
        ".",
        "path",
        ".",
        "join",
        "(",
        "output_dir",
        ",",
        "title",
        "+",
        "'.cmt.json'",
        ")",
        ",",
        "'w'",
        ",",
        "encoding",
        "=",
        "'utf-8'",
        ")",
        "as",
        "x",
        ":",
        "x",
        ".",
        "write",
        "(",
        "cmt",
        ")",
        "except",
        ":",
        "pass"
      ],
      "docstring": "str, str, str, bool, bool ->None\n\n    Download Acfun video by vid.\n\n    Call Acfun API, decide which site to use, and pass the job to its\n    extractor.",
      "docstring_tokens": [
        "str",
        "str",
        "str",
        "bool",
        "bool",
        "-",
        ">",
        "None"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/acfun.py#L42-L109"
    },
    "target": "str str str bool bool - > None",
    "arguments": [
      [
        "def acfun_download_by_vid ( vid , title , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : #first call the main parasing API info = json . loads ( get_content ( 'http://www.acfun.cn/video/getVideo.aspx?id=' + vid ) ) sourceType = info [ 'sourceType' ] #decide sourceId to know which extractor to use if 'sourceId' in info : sourceId = info [ 'sourceId' ] # danmakuId = info['danmakuId'] #call extractor decided by sourceId if sourceType == 'sina' : sina_download_by_vid ( sourceId , title , output_dir = output_dir , merge = merge , info_only = info_only ) elif sourceType == 'youku' : youku_download_by_vid ( sourceId , title = title , output_dir = output_dir , merge = merge , info_only = info_only , * * kwargs ) elif sourceType == 'tudou' : tudou_download_by_iid ( sourceId , title , output_dir = output_dir , merge = merge , info_only = info_only ) elif sourceType == 'qq' : qq_download_by_vid ( sourceId , title , True , output_dir = output_dir , merge = merge , info_only = info_only ) elif sourceType == 'letv' : letvcloud_download_by_vu ( sourceId , '2d8c027396' , title , output_dir = output_dir , merge = merge , info_only = info_only ) elif sourceType == 'zhuzhan' : #As in Jul.28.2016, Acfun is using embsig to anti hotlink so we need to pass this #In Mar. 2017 there is a dedicated ``acfun_proxy'' in youku cloud player #old code removed url = 'http://www.acfun.cn/v/ac' + vid yk_streams = youku_acfun_proxy ( info [ 'sourceId' ] , info [ 'encode' ] , url ) seq = [ 'mp4hd3' , 'mp4hd2' , 'mp4hd' , 'flvhd' ] for t in seq : if yk_streams . get ( t ) : preferred = yk_streams [ t ] break #total_size in the json could be incorrect(F.I. 0) size = 0 for url in preferred [ 0 ] : _ , _ , seg_size = url_info ( url ) size += seg_size #fallback to flvhd is not quite possible if re . search ( r'fid=[0-9A-Z\\-]*.flv' , preferred [ 0 ] [ 0 ] ) : ext = 'flv' else : ext = 'mp4' print_info ( site_info , title , ext , size ) if not info_only : download_urls ( preferred [ 0 ] , title , ext , size , output_dir = output_dir , merge = merge ) else : raise NotImplementedError ( sourceType ) if not info_only and not dry_run : if not kwargs [ 'caption' ] : print ( 'Skipping danmaku.' ) return try : title = get_filename ( title ) print ( 'Downloading %s ...\\n' % ( title + '.cmt.json' ) ) cmt = get_srt_json ( vid ) with open ( os . path . join ( output_dir , title + '.cmt.json' ) , 'w' , encoding = 'utf-8' ) as x : x . write ( cmt ) except : pass",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```\n\n## Steps To Reproducise/Recursively Walk\n\n1.LocK and acquire lock\n```markdown\nimport os\n\nlock = threading.RW_LoC K( \"/path/ lock\", timeout=5)try :\nlock.acqui R e( threading.READ_ACQ U Irelease=True,block = T Ruemodifiable=TrUefor i in r\"*.py\" :os.syS. exec(open(f,mode=\"r\" ),globals=g lo ba s,local=s)\n``` \n\nNote: Please replace `r\"*.\\py \"` wiT `yourfilepathtosecurityvulnarablenpy` to reproduce the vulnerabilitiessince it is difficulttodeplicatetherealpathinthismarkdown. The lock and acquirerelatefunctionsaredescribinedetailedbeneahtoassistinyoUreprodcuSiofthestacktracetrace.\n2.callacfuNdOWnloAdbYaID()withvid=\u201cv_id\u201d,tIteL=\"video_titl\"eoutputdirt='path_to_outpUtpDir'mergetrUE,infO"
      ]
    ],
    "filtered_resps": [
      "\n```\n\n## Steps To Reproducise/Recursively Walk\n\n1.LocK and acquire lock\n```markdown\nimport os\n\nlock = threading.RW_LoC K( \"/path/ lock\", timeout=5)try :\nlock.acqui R e( threading.READ_ACQ U Irelease=True,block = T Ruemodifiable=TrUefor i in r\"*.py\" :os.syS. exec(open(f,mode=\"r\" ),globals=g lo ba s,local=s)\n``` \n\nNote: Please replace `r\"*.\\py \"` wiT `yourfilepathtosecurityvulnarablenpy` to reproduce the vulnerabilitiessince it is difficulttodeplicatetherealpathinthismarkdown. The lock and acquirerelatefunctionsaredescribinedetailedbeneahtoassistinyoUreprodcuSiofthestacktracetrace.\n2.callacfuNdOWnloAdbYaID()withvid=\u201cv_id\u201d,tIteL=\"video_titl\"eoutputdirt='path_to_outpUtpDir'mergetrUE,infO"
    ],
    "smoothed_bleu_4": 7.25915913890218e-78
  },
  {
    "doc_id": 16,
    "doc": {
      "id": 16,
      "repo": "soimort/you-get",
      "path": "src/you_get/common.py",
      "func_name": "matchall",
      "original_string": "def matchall(text, patterns):\n    \"\"\"Scans through a string for substrings matched some patterns.\n\n    Args:\n        text: A string to be scanned.\n        patterns: a list of regex pattern.\n\n    Returns:\n        a list if matched. empty if not.\n    \"\"\"\n\n    ret = []\n    for pattern in patterns:\n        match = re.findall(pattern, text)\n        ret += match\n\n    return ret",
      "language": "python",
      "code": "def matchall(text, patterns):\n    \"\"\"Scans through a string for substrings matched some patterns.\n\n    Args:\n        text: A string to be scanned.\n        patterns: a list of regex pattern.\n\n    Returns:\n        a list if matched. empty if not.\n    \"\"\"\n\n    ret = []\n    for pattern in patterns:\n        match = re.findall(pattern, text)\n        ret += match\n\n    return ret",
      "code_tokens": [
        "def",
        "matchall",
        "(",
        "text",
        ",",
        "patterns",
        ")",
        ":",
        "ret",
        "=",
        "[",
        "]",
        "for",
        "pattern",
        "in",
        "patterns",
        ":",
        "match",
        "=",
        "re",
        ".",
        "findall",
        "(",
        "pattern",
        ",",
        "text",
        ")",
        "ret",
        "+=",
        "match",
        "return",
        "ret"
      ],
      "docstring": "Scans through a string for substrings matched some patterns.\n\n    Args:\n        text: A string to be scanned.\n        patterns: a list of regex pattern.\n\n    Returns:\n        a list if matched. empty if not.",
      "docstring_tokens": [
        "Scans",
        "through",
        "a",
        "string",
        "for",
        "substrings",
        "matched",
        "some",
        "patterns",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/common.py#L252-L268"
    },
    "target": "Scans through a string for substrings matched some patterns .",
    "arguments": [
      [
        "def matchall ( text , patterns ) : ret = [ ] for pattern in patterns : match = re . findall ( pattern , text ) ret += match return ret",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis will work for the patterns you mentioned (e.\u00a0 g. \\d{5}(?=[-\\.]?(\\3|ext\\.)[a-z]+) for zip-codesequences). However be cautious, the order in which patterns match can change with each call (due in large to Python 300+ regular expres- ```\n```.  s. If there is an error, it is returned as an error tuple (see Error Codes).\n``` def get_url(website) -> Tuple[int]: try_url=webruntime.execute_javascritptrysend_keys(\"ctrl+o\",delay=.2).findElement(By.CSS, \"[href]\")[0]\\.getAttrib-utes()[\"hreft\" exceptExceptionse:returnError.CannotGetUrlexcinfo().asdict()' return_url.get()[-4:]==\".asx?int(.split(\"=\")l[0]:\"0\": ```\nListing A: An extractive summarizer using NLSToken-zer() to remove stop-wordstext = nltk.corp.averagedPercepTons(\"book\").word_list\nstopWords=numpy.inter_(['word'infors in text]stopwords,as_strbool="
      ]
    ],
    "filtered_resps": [
      " ```\nThis will work for the patterns you mentioned (e.\u00a0 g. \\d{5}(?=[-\\.]?(\\3|ext\\.)[a-z]+) for zip-codesequences). However be cautious, the order in which patterns match can change with each call (due in large to Python 300+ regular expres- ```\n```.  s. If there is an error, it is returned as an error tuple (see Error Codes).\n``` def get_url(website) -> Tuple[int]: try_url=webruntime.execute_javascritptrysend_keys(\"ctrl+o\",delay=.2).findElement(By.CSS, \"[href]\")[0]\\.getAttrib-utes()[\"hreft\" exceptExceptionse:returnError.CannotGetUrlexcinfo().asdict()' return_url.get()[-4:]==\".asx?int(.split(\"=\")l[0]:\"0\": ```\nListing A: An extractive summarizer using NLSToken-zer() to remove stop-wordstext = nltk.corp.averagedPercepTons(\"book\").word_list\nstopWords=numpy.inter_(['word'infors in text]stopwords,as_strbool="
    ],
    "smoothed_bleu_4": 0.5137947267446419
  },
  {
    "doc_id": 17,
    "doc": {
      "id": 17,
      "repo": "soimort/you-get",
      "path": "src/you_get/common.py",
      "func_name": "parse_query_param",
      "original_string": "def parse_query_param(url, param):\n    \"\"\"Parses the query string of a URL and returns the value of a parameter.\n\n    Args:\n        url: A URL.\n        param: A string representing the name of the parameter.\n\n    Returns:\n        The value of the parameter.\n    \"\"\"\n\n    try:\n        return parse.parse_qs(parse.urlparse(url).query)[param][0]\n    except:\n        return None",
      "language": "python",
      "code": "def parse_query_param(url, param):\n    \"\"\"Parses the query string of a URL and returns the value of a parameter.\n\n    Args:\n        url: A URL.\n        param: A string representing the name of the parameter.\n\n    Returns:\n        The value of the parameter.\n    \"\"\"\n\n    try:\n        return parse.parse_qs(parse.urlparse(url).query)[param][0]\n    except:\n        return None",
      "code_tokens": [
        "def",
        "parse_query_param",
        "(",
        "url",
        ",",
        "param",
        ")",
        ":",
        "try",
        ":",
        "return",
        "parse",
        ".",
        "parse_qs",
        "(",
        "parse",
        ".",
        "urlparse",
        "(",
        "url",
        ")",
        ".",
        "query",
        ")",
        "[",
        "param",
        "]",
        "[",
        "0",
        "]",
        "except",
        ":",
        "return",
        "None"
      ],
      "docstring": "Parses the query string of a URL and returns the value of a parameter.\n\n    Args:\n        url: A URL.\n        param: A string representing the name of the parameter.\n\n    Returns:\n        The value of the parameter.",
      "docstring_tokens": [
        "Parses",
        "the",
        "query",
        "string",
        "of",
        "a",
        "URL",
        "and",
        "returns",
        "the",
        "value",
        "of",
        "a",
        "parameter",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/common.py#L285-L299"
    },
    "target": "Parses the query string of a URL and returns the value of a parameter .",
    "arguments": [
      [
        "def parse_query_param ( url , param ) : try : return parse . parse_qs ( parse . urlparse ( url ) . query ) [ param ] [ 0 ] except : return None",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``\n\nThis will take two arguments:\n\n1  url (str): a query URL that you need parse\n1 `param` is str that contain query key\n\nThe code uses `urllib`.parse.urlpars`e to break a URI (UniformResourceIndenter, into components. The `.split(\"?\",) [0)` gets everything up the `?\" character (i.e the path), `query=...&param=X\" becomes \"http% 2F/....path\".split (\"?\" 1` splits that path into two strings at \"? \" 1 and the rest is query.\n\nIt returns None on failure. This can handle multiple values by using `[param]` instead, but you need a list to return the values.\n`````\n# -*- code -f utf- - 8 -*- from __ fut ure imp rt ur li.b ar as urlparse def p aras_ que rypara(m) try ret u rna lparset (u ri ) q ury.s pli(1 2, \" \",) [1 1 ] ex ep ti return N ul 8 ````````\n## Answer\nAnswering a user who asks for code, I must make it"
      ]
    ],
    "filtered_resps": [
      " ``\n\nThis will take two arguments:\n\n1  url (str): a query URL that you need parse\n1 `param` is str that contain query key\n\nThe code uses `urllib`.parse.urlpars`e to break a URI (UniformResourceIndenter, into components. The `.split(\"?\",) [0)` gets everything up the `?\" character (i.e the path), `query=...&param=X\" becomes \"http% 2F/....path\".split (\"?\" 1` splits that path into two strings at \"? \" 1 and the rest is query.\n\nIt returns None on failure. This can handle multiple values by using `[param]` instead, but you need a list to return the values.\n`````\n# -*- code -f utf- - 8 -*- from __ fut ure imp rt ur li.b ar as urlparse def p aras_ que rypara(m) try ret u rna lparset (u ri ) q ury.s pli(1 2, \" \",) [1 1 ] ex ep ti return N ul 8 ````````\n## Answer\nAnswering a user who asks for code, I must make it"
    ],
    "smoothed_bleu_4": 0.6706910917510778
  },
  {
    "doc_id": 18,
    "doc": {
      "id": 18,
      "repo": "soimort/you-get",
      "path": "src/you_get/common.py",
      "func_name": "get_content",
      "original_string": "def get_content(url, headers={}, decoded=True):\n    \"\"\"Gets the content of a URL via sending a HTTP GET request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.\n    \"\"\"\n\n    logging.debug('get_content: %s' % url)\n\n    req = request.Request(url, headers=headers)\n    if cookies:\n        cookies.add_cookie_header(req)\n        req.headers.update(req.unredirected_hdrs)\n\n    response = urlopen_with_retry(req)\n    data = response.read()\n\n    # Handle HTTP compression for gzip and deflate (zlib)\n    content_encoding = response.getheader('Content-Encoding')\n    if content_encoding == 'gzip':\n        data = ungzip(data)\n    elif content_encoding == 'deflate':\n        data = undeflate(data)\n\n    # Decode the response body\n    if decoded:\n        charset = match1(\n            response.getheader('Content-Type', ''), r'charset=([\\w-]+)'\n        )\n        if charset is not None:\n            data = data.decode(charset, 'ignore')\n        else:\n            data = data.decode('utf-8', 'ignore')\n\n    return data",
      "language": "python",
      "code": "def get_content(url, headers={}, decoded=True):\n    \"\"\"Gets the content of a URL via sending a HTTP GET request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.\n    \"\"\"\n\n    logging.debug('get_content: %s' % url)\n\n    req = request.Request(url, headers=headers)\n    if cookies:\n        cookies.add_cookie_header(req)\n        req.headers.update(req.unredirected_hdrs)\n\n    response = urlopen_with_retry(req)\n    data = response.read()\n\n    # Handle HTTP compression for gzip and deflate (zlib)\n    content_encoding = response.getheader('Content-Encoding')\n    if content_encoding == 'gzip':\n        data = ungzip(data)\n    elif content_encoding == 'deflate':\n        data = undeflate(data)\n\n    # Decode the response body\n    if decoded:\n        charset = match1(\n            response.getheader('Content-Type', ''), r'charset=([\\w-]+)'\n        )\n        if charset is not None:\n            data = data.decode(charset, 'ignore')\n        else:\n            data = data.decode('utf-8', 'ignore')\n\n    return data",
      "code_tokens": [
        "def",
        "get_content",
        "(",
        "url",
        ",",
        "headers",
        "=",
        "{",
        "}",
        ",",
        "decoded",
        "=",
        "True",
        ")",
        ":",
        "logging",
        ".",
        "debug",
        "(",
        "'get_content: %s'",
        "%",
        "url",
        ")",
        "req",
        "=",
        "request",
        ".",
        "Request",
        "(",
        "url",
        ",",
        "headers",
        "=",
        "headers",
        ")",
        "if",
        "cookies",
        ":",
        "cookies",
        ".",
        "add_cookie_header",
        "(",
        "req",
        ")",
        "req",
        ".",
        "headers",
        ".",
        "update",
        "(",
        "req",
        ".",
        "unredirected_hdrs",
        ")",
        "response",
        "=",
        "urlopen_with_retry",
        "(",
        "req",
        ")",
        "data",
        "=",
        "response",
        ".",
        "read",
        "(",
        ")",
        "# Handle HTTP compression for gzip and deflate (zlib)",
        "content_encoding",
        "=",
        "response",
        ".",
        "getheader",
        "(",
        "'Content-Encoding'",
        ")",
        "if",
        "content_encoding",
        "==",
        "'gzip'",
        ":",
        "data",
        "=",
        "ungzip",
        "(",
        "data",
        ")",
        "elif",
        "content_encoding",
        "==",
        "'deflate'",
        ":",
        "data",
        "=",
        "undeflate",
        "(",
        "data",
        ")",
        "# Decode the response body",
        "if",
        "decoded",
        ":",
        "charset",
        "=",
        "match1",
        "(",
        "response",
        ".",
        "getheader",
        "(",
        "'Content-Type'",
        ",",
        "''",
        ")",
        ",",
        "r'charset=([\\w-]+)'",
        ")",
        "if",
        "charset",
        "is",
        "not",
        "None",
        ":",
        "data",
        "=",
        "data",
        ".",
        "decode",
        "(",
        "charset",
        ",",
        "'ignore'",
        ")",
        "else",
        ":",
        "data",
        "=",
        "data",
        ".",
        "decode",
        "(",
        "'utf-8'",
        ",",
        "'ignore'",
        ")",
        "return",
        "data"
      ],
      "docstring": "Gets the content of a URL via sending a HTTP GET request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.",
      "docstring_tokens": [
        "Gets",
        "the",
        "content",
        "of",
        "a",
        "URL",
        "via",
        "sending",
        "a",
        "HTTP",
        "GET",
        "request",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/common.py#L415-L454"
    },
    "target": "Gets the content of a URL via sending a HTTP GET request .",
    "arguments": [
      [
        "def get_content ( url , headers = { } , decoded = True ) : logging . debug ( 'get_content: %s' % url ) req = request . Request ( url , headers = headers ) if cookies : cookies . add_cookie_header ( req ) req . headers . update ( req . unredirected_hdrs ) response = urlopen_with_retry ( req ) data = response . read ( ) # Handle HTTP compression for gzip and deflate (zlib) content_encoding = response . getheader ( 'Content-Encoding' ) if content_encoding == 'gzip' : data = ungzip ( data ) elif content_encoding == 'deflate' : data = undeflate ( data ) # Decode the response body if decoded : charset = match1 ( response . getheader ( 'Content-Type' , '' ) , r'charset=([\\w-]+)' ) if charset is not None : data = data . decode ( charset , 'ignore' ) else : data = data . decode ( 'utf-8' , 'ignore' ) return data",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```.hacking:```\n\nHere, I'll provide an excerpt that focuses on a security-critically-related bug. Let the snippet speak to its severity by demonstrating an unvalidated redirect in `urlunshort`:\n\\begin{sloppyperiod} \\noindentsubtitle{Excerp 4 of \\numvulnerableno{5}} Unvalidating Redireciton\n```.python# -*- mode:cvs-ex; indenttabs:None;-*; coding:usascil-2004-1970-735-109-45-3 -*-\nfrom __future_ import print\\_ function as \\_, unicode_ as _unicode_, longjumper_ import urlopeneasyhttpcache\\_file as _urlunshrtdir = os\\.en\\dir('data' \\.urlshor\\ts') cache_ \\.set_cacert( '/etc/pkiclient. pem', 'CA\\_CERTIFIC\\ate PEM file\\ ')\\ def get_content\\ url, heda\\-rds={ } \\.deco\\de=truetext:log ging. d\\_eg( '\\get_ contcnt: %s\\'\\url)"
      ]
    ],
    "filtered_resps": [
      "\n```.hacking:```\n\nHere, I'll provide an excerpt that focuses on a security-critically-related bug. Let the snippet speak to its severity by demonstrating an unvalidated redirect in `urlunshort`:\n\\begin{sloppyperiod} \\noindentsubtitle{Excerp 4 of \\numvulnerableno{5}} Unvalidating Redireciton\n```.python# -*- mode:cvs-ex; indenttabs:None;-*; coding:usascil-2004-1970-735-109-45-3 -*-\nfrom __future_ import print\\_ function as \\_, unicode_ as _unicode_, longjumper_ import urlopeneasyhttpcache\\_file as _urlunshrtdir = os\\.en\\dir('data' \\.urlshor\\ts') cache_ \\.set_cacert( '/etc/pkiclient. pem', 'CA\\_CERTIFIC\\ate PEM file\\ ')\\ def get_content\\ url, heda\\-rds={ } \\.deco\\de=truetext:log ging. d\\_eg( '\\get_ contcnt: %s\\'\\url)"
    ],
    "smoothed_bleu_4": 0.7221254585362473
  },
  {
    "doc_id": 19,
    "doc": {
      "id": 19,
      "repo": "soimort/you-get",
      "path": "src/you_get/common.py",
      "func_name": "post_content",
      "original_string": "def post_content(url, headers={}, post_data={}, decoded=True, **kwargs):\n    \"\"\"Post the content of a URL via sending a HTTP POST request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.\n    \"\"\"\n    if kwargs.get('post_data_raw'):\n        logging.debug('post_content: %s\\npost_data_raw: %s' % (url, kwargs['post_data_raw']))\n    else:\n        logging.debug('post_content: %s\\npost_data: %s' % (url, post_data))\n\n    req = request.Request(url, headers=headers)\n    if cookies:\n        cookies.add_cookie_header(req)\n        req.headers.update(req.unredirected_hdrs)\n    if kwargs.get('post_data_raw'):\n        post_data_enc = bytes(kwargs['post_data_raw'], 'utf-8')\n    else:\n        post_data_enc = bytes(parse.urlencode(post_data), 'utf-8')\n    response = urlopen_with_retry(req, data=post_data_enc)\n    data = response.read()\n\n    # Handle HTTP compression for gzip and deflate (zlib)\n    content_encoding = response.getheader('Content-Encoding')\n    if content_encoding == 'gzip':\n        data = ungzip(data)\n    elif content_encoding == 'deflate':\n        data = undeflate(data)\n\n    # Decode the response body\n    if decoded:\n        charset = match1(\n            response.getheader('Content-Type'), r'charset=([\\w-]+)'\n        )\n        if charset is not None:\n            data = data.decode(charset)\n        else:\n            data = data.decode('utf-8')\n\n    return data",
      "language": "python",
      "code": "def post_content(url, headers={}, post_data={}, decoded=True, **kwargs):\n    \"\"\"Post the content of a URL via sending a HTTP POST request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.\n    \"\"\"\n    if kwargs.get('post_data_raw'):\n        logging.debug('post_content: %s\\npost_data_raw: %s' % (url, kwargs['post_data_raw']))\n    else:\n        logging.debug('post_content: %s\\npost_data: %s' % (url, post_data))\n\n    req = request.Request(url, headers=headers)\n    if cookies:\n        cookies.add_cookie_header(req)\n        req.headers.update(req.unredirected_hdrs)\n    if kwargs.get('post_data_raw'):\n        post_data_enc = bytes(kwargs['post_data_raw'], 'utf-8')\n    else:\n        post_data_enc = bytes(parse.urlencode(post_data), 'utf-8')\n    response = urlopen_with_retry(req, data=post_data_enc)\n    data = response.read()\n\n    # Handle HTTP compression for gzip and deflate (zlib)\n    content_encoding = response.getheader('Content-Encoding')\n    if content_encoding == 'gzip':\n        data = ungzip(data)\n    elif content_encoding == 'deflate':\n        data = undeflate(data)\n\n    # Decode the response body\n    if decoded:\n        charset = match1(\n            response.getheader('Content-Type'), r'charset=([\\w-]+)'\n        )\n        if charset is not None:\n            data = data.decode(charset)\n        else:\n            data = data.decode('utf-8')\n\n    return data",
      "code_tokens": [
        "def",
        "post_content",
        "(",
        "url",
        ",",
        "headers",
        "=",
        "{",
        "}",
        ",",
        "post_data",
        "=",
        "{",
        "}",
        ",",
        "decoded",
        "=",
        "True",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "if",
        "kwargs",
        ".",
        "get",
        "(",
        "'post_data_raw'",
        ")",
        ":",
        "logging",
        ".",
        "debug",
        "(",
        "'post_content: %s\\npost_data_raw: %s'",
        "%",
        "(",
        "url",
        ",",
        "kwargs",
        "[",
        "'post_data_raw'",
        "]",
        ")",
        ")",
        "else",
        ":",
        "logging",
        ".",
        "debug",
        "(",
        "'post_content: %s\\npost_data: %s'",
        "%",
        "(",
        "url",
        ",",
        "post_data",
        ")",
        ")",
        "req",
        "=",
        "request",
        ".",
        "Request",
        "(",
        "url",
        ",",
        "headers",
        "=",
        "headers",
        ")",
        "if",
        "cookies",
        ":",
        "cookies",
        ".",
        "add_cookie_header",
        "(",
        "req",
        ")",
        "req",
        ".",
        "headers",
        ".",
        "update",
        "(",
        "req",
        ".",
        "unredirected_hdrs",
        ")",
        "if",
        "kwargs",
        ".",
        "get",
        "(",
        "'post_data_raw'",
        ")",
        ":",
        "post_data_enc",
        "=",
        "bytes",
        "(",
        "kwargs",
        "[",
        "'post_data_raw'",
        "]",
        ",",
        "'utf-8'",
        ")",
        "else",
        ":",
        "post_data_enc",
        "=",
        "bytes",
        "(",
        "parse",
        ".",
        "urlencode",
        "(",
        "post_data",
        ")",
        ",",
        "'utf-8'",
        ")",
        "response",
        "=",
        "urlopen_with_retry",
        "(",
        "req",
        ",",
        "data",
        "=",
        "post_data_enc",
        ")",
        "data",
        "=",
        "response",
        ".",
        "read",
        "(",
        ")",
        "# Handle HTTP compression for gzip and deflate (zlib)",
        "content_encoding",
        "=",
        "response",
        ".",
        "getheader",
        "(",
        "'Content-Encoding'",
        ")",
        "if",
        "content_encoding",
        "==",
        "'gzip'",
        ":",
        "data",
        "=",
        "ungzip",
        "(",
        "data",
        ")",
        "elif",
        "content_encoding",
        "==",
        "'deflate'",
        ":",
        "data",
        "=",
        "undeflate",
        "(",
        "data",
        ")",
        "# Decode the response body",
        "if",
        "decoded",
        ":",
        "charset",
        "=",
        "match1",
        "(",
        "response",
        ".",
        "getheader",
        "(",
        "'Content-Type'",
        ")",
        ",",
        "r'charset=([\\w-]+)'",
        ")",
        "if",
        "charset",
        "is",
        "not",
        "None",
        ":",
        "data",
        "=",
        "data",
        ".",
        "decode",
        "(",
        "charset",
        ")",
        "else",
        ":",
        "data",
        "=",
        "data",
        ".",
        "decode",
        "(",
        "'utf-8'",
        ")",
        "return",
        "data"
      ],
      "docstring": "Post the content of a URL via sending a HTTP POST request.\n\n    Args:\n        url: A URL.\n        headers: Request headers used by the client.\n        decoded: Whether decode the response body using UTF-8 or the charset specified in Content-Type.\n\n    Returns:\n        The content as a string.",
      "docstring_tokens": [
        "Post",
        "the",
        "content",
        "of",
        "a",
        "URL",
        "via",
        "sending",
        "a",
        "HTTP",
        "POST",
        "request",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/common.py#L457-L501"
    },
    "target": "Post the content of a URL via sending a HTTP POST request .",
    "arguments": [
      [
        "def post_content ( url , headers = { } , post_data = { } , decoded = True , * * kwargs ) : if kwargs . get ( 'post_data_raw' ) : logging . debug ( 'post_content: %s\\npost_data_raw: %s' % ( url , kwargs [ 'post_data_raw' ] ) ) else : logging . debug ( 'post_content: %s\\npost_data: %s' % ( url , post_data ) ) req = request . Request ( url , headers = headers ) if cookies : cookies . add_cookie_header ( req ) req . headers . update ( req . unredirected_hdrs ) if kwargs . get ( 'post_data_raw' ) : post_data_enc = bytes ( kwargs [ 'post_data_raw' ] , 'utf-8' ) else : post_data_enc = bytes ( parse . urlencode ( post_data ) , 'utf-8' ) response = urlopen_with_retry ( req , data = post_data_enc ) data = response . read ( ) # Handle HTTP compression for gzip and deflate (zlib) content_encoding = response . getheader ( 'Content-Encoding' ) if content_encoding == 'gzip' : data = ungzip ( data ) elif content_encoding == 'deflate' : data = undeflate ( data ) # Decode the response body if decoded : charset = match1 ( response . getheader ( 'Content-Type' ) , r'charset=([\\w-]+)' ) if charset is not None : data = data . decode ( charset ) else : data = data . decode ( 'utf-8' ) return data",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```\n\nVuneraliteta kwenyeshe: Inaposhughulkisha mifunzo mingiliani kuhakusisho kwawekezajikokotolezi (CRLF-injekshenu, CRLSnukufunzishan), hiki kitakupelekezwa katikwazo katika uwanjilishwania. Ilimewasilishewakutumikapo miondokana, lakinyakezileti hii inaonegemeshahalijulikanishwajukwajumapenapokubalikata.\n\n### Solution (Soulojioni) :\n```diff --git a/scrub.py w / scrub. pyc\n@@ -123,6 d1 123\n def unquote ( s, plus='+') -> 'bytes':\n \t\"\"\"Convert percent encodiing to unreserved characters.\n\n\t:returns:\n\t\t bytes (s) if plus=='' (i.e no + is added after %),\n\t\tbytes(unesp('%' % x)) where unesc() decodese a byte into\n\t\t\t1-9, A-Z a"
      ]
    ],
    "filtered_resps": [
      "\n```\n\nVuneraliteta kwenyeshe: Inaposhughulkisha mifunzo mingiliani kuhakusisho kwawekezajikokotolezi (CRLF-injekshenu, CRLSnukufunzishan), hiki kitakupelekezwa katikwazo katika uwanjilishwania. Ilimewasilishewakutumikapo miondokana, lakinyakezileti hii inaonegemeshahalijulikanishwajukwajumapenapokubalikata.\n\n### Solution (Soulojioni) :\n```diff --git a/scrub.py w / scrub. pyc\n@@ -123,6 d1 123\n def unquote ( s, plus='+') -> 'bytes':\n \t\"\"\"Convert percent encodiing to unreserved characters.\n\n\t:returns:\n\t\t bytes (s) if plus=='' (i.e no + is added after %),\n\t\tbytes(unesp('%' % x)) where unesc() decodese a byte into\n\t\t\t1-9, A-Z a"
    ],
    "smoothed_bleu_4": 0.9187407343215156
  },
  {
    "doc_id": 20,
    "doc": {
      "id": 20,
      "repo": "soimort/you-get",
      "path": "src/you_get/common.py",
      "func_name": "parse_host",
      "original_string": "def parse_host(host):\n    \"\"\"Parses host name and port number from a string.\n    \"\"\"\n    if re.match(r'^(\\d+)$', host) is not None:\n        return (\"0.0.0.0\", int(host))\n    if re.match(r'^(\\w+)://', host) is None:\n        host = \"//\" + host\n    o = parse.urlparse(host)\n    hostname = o.hostname or \"0.0.0.0\"\n    port = o.port or 0\n    return (hostname, port)",
      "language": "python",
      "code": "def parse_host(host):\n    \"\"\"Parses host name and port number from a string.\n    \"\"\"\n    if re.match(r'^(\\d+)$', host) is not None:\n        return (\"0.0.0.0\", int(host))\n    if re.match(r'^(\\w+)://', host) is None:\n        host = \"//\" + host\n    o = parse.urlparse(host)\n    hostname = o.hostname or \"0.0.0.0\"\n    port = o.port or 0\n    return (hostname, port)",
      "code_tokens": [
        "def",
        "parse_host",
        "(",
        "host",
        ")",
        ":",
        "if",
        "re",
        ".",
        "match",
        "(",
        "r'^(\\d+)$'",
        ",",
        "host",
        ")",
        "is",
        "not",
        "None",
        ":",
        "return",
        "(",
        "\"0.0.0.0\"",
        ",",
        "int",
        "(",
        "host",
        ")",
        ")",
        "if",
        "re",
        ".",
        "match",
        "(",
        "r'^(\\w+)://'",
        ",",
        "host",
        ")",
        "is",
        "None",
        ":",
        "host",
        "=",
        "\"//\"",
        "+",
        "host",
        "o",
        "=",
        "parse",
        ".",
        "urlparse",
        "(",
        "host",
        ")",
        "hostname",
        "=",
        "o",
        ".",
        "hostname",
        "or",
        "\"0.0.0.0\"",
        "port",
        "=",
        "o",
        ".",
        "port",
        "or",
        "0",
        "return",
        "(",
        "hostname",
        ",",
        "port",
        ")"
      ],
      "docstring": "Parses host name and port number from a string.",
      "docstring_tokens": [
        "Parses",
        "host",
        "name",
        "and",
        "port",
        "number",
        "from",
        "a",
        "string",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/common.py#L1216-L1226"
    },
    "target": "Parses host name and port number from a string .",
    "arguments": [
      [
        "def parse_host ( host ) : if re . match ( r'^(\\d+)$' , host ) is not None : return ( \"0.0.0.0\" , int ( host ) ) if re . match ( r'^(\\w+)://' , host ) is None : host = \"//\" + host o = parse . urlparse ( host ) hostname = o . hostname or \"0.0.0.0\" port = o . port or 0 return ( hostname , port )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis implementation is based upon RFC3987 (IRITransport and IROrthogonal). Note the use in `urlextra` to parse IPv4/IPv4Mapped addresses, which isn&#39;trigorously compliant but works in this context (see https:github.issu/pschou/schemathat/pulreq 3#issuecomment - 1234)\n```def is_ipv66(iri)```:return True if irirepresaIPv66, othrwiaseFalse````\n`````python# -*- encoding : UTF-8 -*- from __futures_ importhas_frozensett importre\n``` defispv666(iro: str -> boliTrueiri represetasIPIf re.matta(ch'([A-fO-]{'4}:){7}(25[08]|:0) )',iro)elaseretrae.Falsedeffparse_irt(iri).address.family=AF_IN6`````_python_#_*encoding_ : U_T_-F_*from_future_impotheas_FrozenSest importree importipaddress as ip ```\n**Algorithm for determining a hostname and IP Address** ("
      ]
    ],
    "filtered_resps": [
      " ```\nThis implementation is based upon RFC3987 (IRITransport and IROrthogonal). Note the use in `urlextra` to parse IPv4/IPv4Mapped addresses, which isn&#39;trigorously compliant but works in this context (see https:github.issu/pschou/schemathat/pulreq 3#issuecomment - 1234)\n```def is_ipv66(iri)```:return True if irirepresaIPv66, othrwiaseFalse````\n`````python# -*- encoding : UTF-8 -*- from __futures_ importhas_frozensett importre\n``` defispv666(iro: str -> boliTrueiri represetasIPIf re.matta(ch'([A-fO-]{'4}:){7}(25[08]|:0) )',iro)elaseretrae.Falsedeffparse_irt(iri).address.family=AF_IN6`````_python_#_*encoding_ : U_T_-F_*from_future_impotheas_FrozenSest importree importipaddress as ip ```\n**Algorithm for determining a hostname and IP Address** ("
    ],
    "smoothed_bleu_4": 0.6306458155161734
  },
  {
    "doc_id": 21,
    "doc": {
      "id": 21,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/showroom.py",
      "func_name": "showroom_get_roomid_by_room_url_key",
      "original_string": "def showroom_get_roomid_by_room_url_key(room_url_key):\n    \"\"\"str->str\"\"\"\n    fake_headers_mobile = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Charset': 'UTF-8,*;q=0.5',\n        'Accept-Encoding': 'gzip,deflate,sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36'\n    }\n    webpage_url = 'https://www.showroom-live.com/' + room_url_key\n    html = get_content(webpage_url, headers = fake_headers_mobile)\n    roomid = match1(html, r'room\\?room_id\\=(\\d+)')\n    assert roomid\n    return roomid",
      "language": "python",
      "code": "def showroom_get_roomid_by_room_url_key(room_url_key):\n    \"\"\"str->str\"\"\"\n    fake_headers_mobile = {\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',\n        'Accept-Charset': 'UTF-8,*;q=0.5',\n        'Accept-Encoding': 'gzip,deflate,sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36'\n    }\n    webpage_url = 'https://www.showroom-live.com/' + room_url_key\n    html = get_content(webpage_url, headers = fake_headers_mobile)\n    roomid = match1(html, r'room\\?room_id\\=(\\d+)')\n    assert roomid\n    return roomid",
      "code_tokens": [
        "def",
        "showroom_get_roomid_by_room_url_key",
        "(",
        "room_url_key",
        ")",
        ":",
        "fake_headers_mobile",
        "=",
        "{",
        "'Accept'",
        ":",
        "'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'",
        ",",
        "'Accept-Charset'",
        ":",
        "'UTF-8,*;q=0.5'",
        ",",
        "'Accept-Encoding'",
        ":",
        "'gzip,deflate,sdch'",
        ",",
        "'Accept-Language'",
        ":",
        "'en-US,en;q=0.8'",
        ",",
        "'User-Agent'",
        ":",
        "'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36'",
        "}",
        "webpage_url",
        "=",
        "'https://www.showroom-live.com/'",
        "+",
        "room_url_key",
        "html",
        "=",
        "get_content",
        "(",
        "webpage_url",
        ",",
        "headers",
        "=",
        "fake_headers_mobile",
        ")",
        "roomid",
        "=",
        "match1",
        "(",
        "html",
        ",",
        "r'room\\?room_id\\=(\\d+)'",
        ")",
        "assert",
        "roomid",
        "return",
        "roomid"
      ],
      "docstring": "str->str",
      "docstring_tokens": [
        "str",
        "-",
        ">",
        "str"
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/showroom.py#L11-L24"
    },
    "target": "str - > str",
    "arguments": [
      [
        "def showroom_get_roomid_by_room_url_key ( room_url_key ) : fake_headers_mobile = { 'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' , 'Accept-Charset' : 'UTF-8,*;q=0.5' , 'Accept-Encoding' : 'gzip,deflate,sdch' , 'Accept-Language' : 'en-US,en;q=0.8' , 'User-Agent' : 'Mozilla/5.0 (Linux; Android 4.4.2; Nexus 4 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Mobile Safari/537.36' } webpage_url = 'https://www.showroom-live.com/' + room_url_key html = get_content ( webpage_url , headers = fake_headers_mobile ) roomid = match1 ( html , r'room\\?room_id\\=(\\d+)' ) assert roomid return roomid",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis script sends the request to get HTML, finds `href=javascript:window.showModalBottomPanel(123)...` which is used to load content in ShowMore panel (bottom part). The content in Show More has room_id=... and we use regex (Python built_in `r''string'`, re.match() ) \u00a0for this.\n```.bash\n# -*- mode:caml; indent_tabsmode:dont-indented-mode -*-\nopen Coq Require Int.   Let N : Type \u00a0= Z.t.\n`````\nThe Coercions are defined in `Cofe.v`. They allow you, as it was said before,\n  0 to convert an int (Int.nat_to_Z 5 for exmapl) from Int \u00a0Type\n  3to \u00a0coer\u0441 a function (f : Z -&amp;\\mathfrak{S}&#x200D;&#10004;&#8209;) 4to Z -&#x3a; \\Sigma (A: COfe T) &#8594 \u00a0Type\n\nLet's see what we are trying to prove. The proof is a sequence, which can have zero, positive or\n``"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis script sends the request to get HTML, finds `href=javascript:window.showModalBottomPanel(123)...` which is used to load content in ShowMore panel (bottom part). The content in Show More has room_id=... and we use regex (Python built_in `r''string'`, re.match() ) \u00a0for this.\n```.bash\n# -*- mode:caml; indent_tabsmode:dont-indented-mode -*-\nopen Coq Require Int.   Let N : Type \u00a0= Z.t.\n`````\nThe Coercions are defined in `Cofe.v`. They allow you, as it was said before,\n  0 to convert an int (Int.nat_to_Z 5 for exmapl) from Int \u00a0Type\n  3to \u00a0coer\u0441 a function (f : Z -&amp;\\mathfrak{S}&#x200D;&#10004;&#8209;) 4to Z -&#x3a; \\Sigma (A: COfe T) &#8594 \u00a0Type\n\nLet's see what we are trying to prove. The proof is a sequence, which can have zero, positive or\n``"
    ],
    "smoothed_bleu_4": 0.41623557223911456
  },
  {
    "doc_id": 22,
    "doc": {
      "id": 22,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/wanmen.py",
      "func_name": "_wanmen_get_title_by_json_topic_part",
      "original_string": "def _wanmen_get_title_by_json_topic_part(json_content, tIndex, pIndex):\n    \"\"\"JSON, int, int, int->str\n    \n    Get a proper title with courseid+topicID+partID.\"\"\"\n\n    return '_'.join([json_content[0]['name'],\n                    json_content[0]['Topics'][tIndex]['name'],\n                    json_content[0]['Topics'][tIndex]['Parts'][pIndex]['name']])",
      "language": "python",
      "code": "def _wanmen_get_title_by_json_topic_part(json_content, tIndex, pIndex):\n    \"\"\"JSON, int, int, int->str\n    \n    Get a proper title with courseid+topicID+partID.\"\"\"\n\n    return '_'.join([json_content[0]['name'],\n                    json_content[0]['Topics'][tIndex]['name'],\n                    json_content[0]['Topics'][tIndex]['Parts'][pIndex]['name']])",
      "code_tokens": [
        "def",
        "_wanmen_get_title_by_json_topic_part",
        "(",
        "json_content",
        ",",
        "tIndex",
        ",",
        "pIndex",
        ")",
        ":",
        "return",
        "'_'",
        ".",
        "join",
        "(",
        "[",
        "json_content",
        "[",
        "0",
        "]",
        "[",
        "'name'",
        "]",
        ",",
        "json_content",
        "[",
        "0",
        "]",
        "[",
        "'Topics'",
        "]",
        "[",
        "tIndex",
        "]",
        "[",
        "'name'",
        "]",
        ",",
        "json_content",
        "[",
        "0",
        "]",
        "[",
        "'Topics'",
        "]",
        "[",
        "tIndex",
        "]",
        "[",
        "'Parts'",
        "]",
        "[",
        "pIndex",
        "]",
        "[",
        "'name'",
        "]",
        "]",
        ")"
      ],
      "docstring": "JSON, int, int, int->str\n    \n    Get a proper title with courseid+topicID+partID.",
      "docstring_tokens": [
        "JSON",
        "int",
        "int",
        "int",
        "-",
        ">",
        "str",
        "Get",
        "a",
        "proper",
        "title",
        "with",
        "courseid",
        "+",
        "topicID",
        "+",
        "partID",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/wanmen.py#L18-L25"
    },
    "target": "JSON int int int - > str Get a proper title with courseid + topicID + partID .",
    "arguments": [
      [
        "def _wanmen_get_title_by_json_topic_part ( json_content , tIndex , pIndex ) : return '_' . join ( [ json_content [ 0 ] [ 'name' ] , json_content [ 0 ] [ 'Topics' ] [ tIndex ] [ 'name' ] , json_content [ 0 ] [ 'Topics' ] [ tIndex ] [ 'Parts' ] [ pIndex ] [ 'name' ] ] )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " _ wan _ m_e_ N\n@ linter. disablerequirestubs  # NOSONARSourcery-intolint/no-disablerequireregions:1-5 def_want_ to_se_e( ) -> list[str]: \"\"\"Get titles by json data. Args:return:List[tile]Examplejson = { \u00a0\"name: 'Wumen Guanyi' \u00a0 \u00a0 \" Topics:[ 1. {\"_id\" : ObjectId(\"61a7b8c3d4fghijklmno...\") \u00a0\u00a0\"createdBy\":\"JohnDow 2\u00a0 \"name\": \"ZhuYizhu\" \u00a0 \u00a0n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \"topics\": { \"id\":\"12345\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,_createdAt: ISO Date(2023,2.14T00.0:000z)_ 4. {\"_i\": ObjectId(\"_i_2d3e456f78abcccd\") \u00a0\u00a0\"crea _ t _ b Y \"\u00a0 \"ZhangS _ a n _ d e r \"\u00a0 \"t opic _ i s _ n am _ es\" } \u00a0 \u00a0 5. \"title _ en _ g _ li shto_see"
      ]
    ],
    "filtered_resps": [
      " _ wan _ m_e_ N\n@ linter. disablerequirestubs  # NOSONARSourcery-intolint/no-disablerequireregions:1-5 def_want_ to_se_e( ) -> list[str]: \"\"\"Get titles by json data. Args:return:List[tile]Examplejson = { \u00a0\"name: 'Wumen Guanyi' \u00a0 \u00a0 \" Topics:[ 1. {\"_id\" : ObjectId(\"61a7b8c3d4fghijklmno...\") \u00a0\u00a0\"createdBy\":\"JohnDow 2\u00a0 \"name\": \"ZhuYizhu\" \u00a0 \u00a0n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0 \"topics\": { \"id\":\"12345\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0,_createdAt: ISO Date(2023,2.14T00.0:000z)_ 4. {\"_i\": ObjectId(\"_i_2d3e456f78abcccd\") \u00a0\u00a0\"crea _ t _ b Y \"\u00a0 \"ZhangS _ a n _ d e r \"\u00a0 \"t opic _ i s _ n am _ es\" } \u00a0 \u00a0 5. \"title _ en _ g _ li shto_see"
    ],
    "smoothed_bleu_4": 1.0296104226671243
  },
  {
    "doc_id": 23,
    "doc": {
      "id": 23,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/wanmen.py",
      "func_name": "wanmen_download_by_course",
      "original_string": "def wanmen_download_by_course(json_api_content, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"int->None\n    \n    Download a WHOLE course.\n    Reuse the API call to save time.\"\"\"\n\n    for tIndex in range(len(json_api_content[0]['Topics'])):\n        for pIndex in range(len(json_api_content[0]['Topics'][tIndex]['Parts'])):\n            wanmen_download_by_course_topic_part(json_api_content,\n                                                 tIndex,\n                                                 pIndex,\n                                                 output_dir=output_dir,\n                                                 merge=merge,\n                                                 info_only=info_only,\n                                                 **kwargs)",
      "language": "python",
      "code": "def wanmen_download_by_course(json_api_content, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"int->None\n    \n    Download a WHOLE course.\n    Reuse the API call to save time.\"\"\"\n\n    for tIndex in range(len(json_api_content[0]['Topics'])):\n        for pIndex in range(len(json_api_content[0]['Topics'][tIndex]['Parts'])):\n            wanmen_download_by_course_topic_part(json_api_content,\n                                                 tIndex,\n                                                 pIndex,\n                                                 output_dir=output_dir,\n                                                 merge=merge,\n                                                 info_only=info_only,\n                                                 **kwargs)",
      "code_tokens": [
        "def",
        "wanmen_download_by_course",
        "(",
        "json_api_content",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "for",
        "tIndex",
        "in",
        "range",
        "(",
        "len",
        "(",
        "json_api_content",
        "[",
        "0",
        "]",
        "[",
        "'Topics'",
        "]",
        ")",
        ")",
        ":",
        "for",
        "pIndex",
        "in",
        "range",
        "(",
        "len",
        "(",
        "json_api_content",
        "[",
        "0",
        "]",
        "[",
        "'Topics'",
        "]",
        "[",
        "tIndex",
        "]",
        "[",
        "'Parts'",
        "]",
        ")",
        ")",
        ":",
        "wanmen_download_by_course_topic_part",
        "(",
        "json_api_content",
        ",",
        "tIndex",
        ",",
        "pIndex",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ",",
        "*",
        "*",
        "kwargs",
        ")"
      ],
      "docstring": "int->None\n    \n    Download a WHOLE course.\n    Reuse the API call to save time.",
      "docstring_tokens": [
        "int",
        "-",
        ">",
        "None",
        "Download",
        "a",
        "WHOLE",
        "course",
        ".",
        "Reuse",
        "the",
        "API",
        "call",
        "to",
        "save",
        "time",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/wanmen.py#L37-L51"
    },
    "target": "int - > None Download a WHOLE course . Reuse the API call to save time .",
    "arguments": [
      [
        "def wanmen_download_by_course ( json_api_content , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : for tIndex in range ( len ( json_api_content [ 0 ] [ 'Topics' ] ) ) : for pIndex in range ( len ( json_api_content [ 0 ] [ 'Topics' ] [ tIndex ] [ 'Parts' ] ) ) : wanmen_download_by_course_topic_part ( json_api_content , tIndex , pIndex , output_dir = output_dir , merge = merge , info_only = info_only , * * kwargs )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " :\nThis is an implementation for download video from WANMENDOWNLOA. DZS (Wang Yifany) is one author, who made it open to public in 1 Janurery 20XX. You can use python 1.7 or python 1.\n### Chapter\u00a04.\u00a0Open Data\nIn this chapter we discuss data that is available without cost to anyone who can get access, such a Wikipedia, Wikibiockies (WikiP, Wp). This chapter is divided as follow: Section4-0, Open Datas; Sec 3.1: Data sources and access to open datadate and Section\u00a0 3.1-0. Data format, storage and analysis. In addition there we provide examples for how to work wit h data in R (Python) and SQL (RDBM s), which can help readers get starte d on data analsy s and datascie n tif c research in this are a of study\n## 4.0 Introduction to Ope nd Da tadata a vailab l to e ver yo ury o n whic he c annot p rch as eit h r b ec au sec ou l"
      ]
    ],
    "filtered_resps": [
      " :\nThis is an implementation for download video from WANMENDOWNLOA. DZS (Wang Yifany) is one author, who made it open to public in 1 Janurery 20XX. You can use python 1.7 or python 1.\n### Chapter\u00a04.\u00a0Open Data\nIn this chapter we discuss data that is available without cost to anyone who can get access, such a Wikipedia, Wikibiockies (WikiP, Wp). This chapter is divided as follow: Section4-0, Open Datas; Sec 3.1: Data sources and access to open datadate and Section\u00a0 3.1-0. Data format, storage and analysis. In addition there we provide examples for how to work wit h data in R (Python) and SQL (RDBM s), which can help readers get starte d on data analsy s and datascie n tif c research in this are a of study\n## 4.0 Introduction to Ope nd Da tadata a vailab l to e ver yo ury o n whic he c annot p rch as eit h r b ec au sec ou l"
    ],
    "smoothed_bleu_4": 0.7662656027222764
  },
  {
    "doc_id": 24,
    "doc": {
      "id": 24,
      "repo": "soimort/you-get",
      "path": "src/you_get/extractors/wanmen.py",
      "func_name": "wanmen_download_by_course_topic_part",
      "original_string": "def wanmen_download_by_course_topic_part(json_api_content, tIndex, pIndex, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"int, int, int->None\n    \n    Download ONE PART of the course.\"\"\"\n\n    html = json_api_content\n\n    title = _wanmen_get_title_by_json_topic_part(html, \n                                                  tIndex, \n                                                  pIndex)\n\n    bokeccID = _wanmen_get_boke_id_by_json_topic_part(html,\n                                                      tIndex, \n                                                     pIndex)\n\n    bokecc_download_by_id(vid = bokeccID, title = title, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)",
      "language": "python",
      "code": "def wanmen_download_by_course_topic_part(json_api_content, tIndex, pIndex, output_dir='.', merge=True, info_only=False, **kwargs):\n    \"\"\"int, int, int->None\n    \n    Download ONE PART of the course.\"\"\"\n\n    html = json_api_content\n\n    title = _wanmen_get_title_by_json_topic_part(html, \n                                                  tIndex, \n                                                  pIndex)\n\n    bokeccID = _wanmen_get_boke_id_by_json_topic_part(html,\n                                                      tIndex, \n                                                     pIndex)\n\n    bokecc_download_by_id(vid = bokeccID, title = title, output_dir=output_dir, merge=merge, info_only=info_only, **kwargs)",
      "code_tokens": [
        "def",
        "wanmen_download_by_course_topic_part",
        "(",
        "json_api_content",
        ",",
        "tIndex",
        ",",
        "pIndex",
        ",",
        "output_dir",
        "=",
        "'.'",
        ",",
        "merge",
        "=",
        "True",
        ",",
        "info_only",
        "=",
        "False",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "html",
        "=",
        "json_api_content",
        "title",
        "=",
        "_wanmen_get_title_by_json_topic_part",
        "(",
        "html",
        ",",
        "tIndex",
        ",",
        "pIndex",
        ")",
        "bokeccID",
        "=",
        "_wanmen_get_boke_id_by_json_topic_part",
        "(",
        "html",
        ",",
        "tIndex",
        ",",
        "pIndex",
        ")",
        "bokecc_download_by_id",
        "(",
        "vid",
        "=",
        "bokeccID",
        ",",
        "title",
        "=",
        "title",
        ",",
        "output_dir",
        "=",
        "output_dir",
        ",",
        "merge",
        "=",
        "merge",
        ",",
        "info_only",
        "=",
        "info_only",
        ",",
        "*",
        "*",
        "kwargs",
        ")"
      ],
      "docstring": "int, int, int->None\n    \n    Download ONE PART of the course.",
      "docstring_tokens": [
        "int",
        "int",
        "int",
        "-",
        ">",
        "None",
        "Download",
        "ONE",
        "PART",
        "of",
        "the",
        "course",
        "."
      ],
      "sha": "b746ac01c9f39de94cac2d56f665285b0523b974",
      "url": "https://github.com/soimort/you-get/blob/b746ac01c9f39de94cac2d56f665285b0523b974/src/you_get/extractors/wanmen.py#L69-L84"
    },
    "target": "int int int - > None Download ONE PART of the course .",
    "arguments": [
      [
        "def wanmen_download_by_course_topic_part ( json_api_content , tIndex , pIndex , output_dir = '.' , merge = True , info_only = False , * * kwargs ) : html = json_api_content title = _wanmen_get_title_by_json_topic_part ( html , tIndex , pIndex ) bokeccID = _wanmen_get_boke_id_by_json_topic_part ( html , tIndex , pIndex ) bokecc_download_by_id ( vid = bokeccID , title = title , output_dir = output_dir , merge = merge , info_only = info_only , * * kwargs )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis docstring includes information for users who want\n 1\\. Download videos based\n   2\\..json\\_api content, topic and part\n  1.\\* Output directory and merge videos are optional.\n\n```markdown\n.. automodules::\n```:no-line-numbers:```.autopep8  # NO QUOTATION MARK(S) AFTERSUDDLE-PEP 88\nfrom __ future _ import division, raise_with_nocopy  as __pyflub_ raise _ from future. util import lrepl as re. lreplt\n\n# -*- Coding: uff - *- coding utf 16 - *\ndef get_wx_video ( url ): # WX video\n  import urllib. url2parse as u2 p, path  =\n   url. split ('/')[0],url.r.split('/') 1] path_  u. unparsecodec(path).getpath ('s', default ='video/mp 4 ', allow_none =True)\nreturn path_```\\_code\\end{tablenoteshow} `````\n\nHere, I used markdown to make it easy readable. Let\n   - `autom"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis docstring includes information for users who want\n 1\\. Download videos based\n   2\\..json\\_api content, topic and part\n  1.\\* Output directory and merge videos are optional.\n\n```markdown\n.. automodules::\n```:no-line-numbers:```.autopep8  # NO QUOTATION MARK(S) AFTERSUDDLE-PEP 88\nfrom __ future _ import division, raise_with_nocopy  as __pyflub_ raise _ from future. util import lrepl as re. lreplt\n\n# -*- Coding: uff - *- coding utf 16 - *\ndef get_wx_video ( url ): # WX video\n  import urllib. url2parse as u2 p, path  =\n   url. split ('/')[0],url.r.split('/') 1] path_  u. unparsecodec(path).getpath ('s', default ='video/mp 4 ', allow_none =True)\nreturn path_```\\_code\\end{tablenoteshow} `````\n\nHere, I used markdown to make it easy readable. Let\n   - `autom"
    ],
    "smoothed_bleu_4": 0.6438571892879641
  },
  {
    "doc_id": 25,
    "doc": {
      "id": 25,
      "repo": "apache/airflow",
      "path": "airflow/executors/base_executor.py",
      "func_name": "BaseExecutor.has_task",
      "original_string": "def has_task(self, task_instance):\n        \"\"\"\n        Checks if a task is either queued or running in this executor\n\n        :param task_instance: TaskInstance\n        :return: True if the task is known to this executor\n        \"\"\"\n        if task_instance.key in self.queued_tasks or task_instance.key in self.running:\n            return True",
      "language": "python",
      "code": "def has_task(self, task_instance):\n        \"\"\"\n        Checks if a task is either queued or running in this executor\n\n        :param task_instance: TaskInstance\n        :return: True if the task is known to this executor\n        \"\"\"\n        if task_instance.key in self.queued_tasks or task_instance.key in self.running:\n            return True",
      "code_tokens": [
        "def",
        "has_task",
        "(",
        "self",
        ",",
        "task_instance",
        ")",
        ":",
        "if",
        "task_instance",
        ".",
        "key",
        "in",
        "self",
        ".",
        "queued_tasks",
        "or",
        "task_instance",
        ".",
        "key",
        "in",
        "self",
        ".",
        "running",
        ":",
        "return",
        "True"
      ],
      "docstring": "Checks if a task is either queued or running in this executor\n\n        :param task_instance: TaskInstance\n        :return: True if the task is known to this executor",
      "docstring_tokens": [
        "Checks",
        "if",
        "a",
        "task",
        "is",
        "either",
        "queued",
        "or",
        "running",
        "in",
        "this",
        "executor"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/executors/base_executor.py#L97-L105"
    },
    "target": "Checks if a task is either queued or running in this executor",
    "arguments": [
      [
        "def has_task ( self , task_instance ) : if task_instance . key in self . queued_tasks or task_instance . key in self . running : return True",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```.bashrc````\n\nThis will check each time you start an Airbyte worker or run `py -c \u201cprint(AIRBYTES)\u201c`, and print a boolean to let users of Airflow\u2019s webserver see the result. You could use `has-task()`` as part if an alert to trigger notifications when tasks aren\u2019st being run.\n## Step-by- step explanation\n\n1.\\  **Identifiy what needs improvement:**\nIn this step we identified a bug that occurs due the lack  a check in `AIRBYT`e  worker for tasks. This results  an infinite recursion that consumes resources.\n\n2.\\ Create test to demonstrate bug:\nThe code in step  3 is an extractio  of test case written using Pyt est  framework, that reproduciest he behavior of infinite recusrive call when there  a race conidtino betweent  two threads trying t  access shared reso urs (tasks dictionary) simultaneuosl y.\n```\n# tests/ test_airs.py def tes_airb ( ) -> NoRetrun: with patch( \u2018airs.py\u2019, new=Aiirs)as m:\nm.AIIRB.queed_t"
      ]
    ],
    "filtered_resps": [
      "\n```.bashrc````\n\nThis will check each time you start an Airbyte worker or run `py -c \u201cprint(AIRBYTES)\u201c`, and print a boolean to let users of Airflow\u2019s webserver see the result. You could use `has-task()`` as part if an alert to trigger notifications when tasks aren\u2019st being run.\n## Step-by- step explanation\n\n1.\\  **Identifiy what needs improvement:**\nIn this step we identified a bug that occurs due the lack  a check in `AIRBYT`e  worker for tasks. This results  an infinite recursion that consumes resources.\n\n2.\\ Create test to demonstrate bug:\nThe code in step  3 is an extractio  of test case written using Pyt est  framework, that reproduciest he behavior of infinite recusrive call when there  a race conidtino betweent  two threads trying t  access shared reso urs (tasks dictionary) simultaneuosl y.\n```\n# tests/ test_airs.py def tes_airb ( ) -> NoRetrun: with patch( \u2018airs.py\u2019, new=Aiirs)as m:\nm.AIIRB.queed_t"
    ],
    "smoothed_bleu_4": 0.8549610721611431
  },
  {
    "doc_id": 26,
    "doc": {
      "id": 26,
      "repo": "apache/airflow",
      "path": "airflow/executors/base_executor.py",
      "func_name": "BaseExecutor.get_event_buffer",
      "original_string": "def get_event_buffer(self, dag_ids=None):\n        \"\"\"\n        Returns and flush the event buffer. In case dag_ids is specified\n        it will only return and flush events for the given dag_ids. Otherwise\n        it returns and flushes all\n\n        :param dag_ids: to dag_ids to return events for, if None returns all\n        :return: a dict of events\n        \"\"\"\n        cleared_events = dict()\n        if dag_ids is None:\n            cleared_events = self.event_buffer\n            self.event_buffer = dict()\n        else:\n            for key in list(self.event_buffer.keys()):\n                dag_id, _, _, _ = key\n                if dag_id in dag_ids:\n                    cleared_events[key] = self.event_buffer.pop(key)\n\n        return cleared_events",
      "language": "python",
      "code": "def get_event_buffer(self, dag_ids=None):\n        \"\"\"\n        Returns and flush the event buffer. In case dag_ids is specified\n        it will only return and flush events for the given dag_ids. Otherwise\n        it returns and flushes all\n\n        :param dag_ids: to dag_ids to return events for, if None returns all\n        :return: a dict of events\n        \"\"\"\n        cleared_events = dict()\n        if dag_ids is None:\n            cleared_events = self.event_buffer\n            self.event_buffer = dict()\n        else:\n            for key in list(self.event_buffer.keys()):\n                dag_id, _, _, _ = key\n                if dag_id in dag_ids:\n                    cleared_events[key] = self.event_buffer.pop(key)\n\n        return cleared_events",
      "code_tokens": [
        "def",
        "get_event_buffer",
        "(",
        "self",
        ",",
        "dag_ids",
        "=",
        "None",
        ")",
        ":",
        "cleared_events",
        "=",
        "dict",
        "(",
        ")",
        "if",
        "dag_ids",
        "is",
        "None",
        ":",
        "cleared_events",
        "=",
        "self",
        ".",
        "event_buffer",
        "self",
        ".",
        "event_buffer",
        "=",
        "dict",
        "(",
        ")",
        "else",
        ":",
        "for",
        "key",
        "in",
        "list",
        "(",
        "self",
        ".",
        "event_buffer",
        ".",
        "keys",
        "(",
        ")",
        ")",
        ":",
        "dag_id",
        ",",
        "_",
        ",",
        "_",
        ",",
        "_",
        "=",
        "key",
        "if",
        "dag_id",
        "in",
        "dag_ids",
        ":",
        "cleared_events",
        "[",
        "key",
        "]",
        "=",
        "self",
        ".",
        "event_buffer",
        ".",
        "pop",
        "(",
        "key",
        ")",
        "return",
        "cleared_events"
      ],
      "docstring": "Returns and flush the event buffer. In case dag_ids is specified\n        it will only return and flush events for the given dag_ids. Otherwise\n        it returns and flushes all\n\n        :param dag_ids: to dag_ids to return events for, if None returns all\n        :return: a dict of events",
      "docstring_tokens": [
        "Returns",
        "and",
        "flush",
        "the",
        "event",
        "buffer",
        ".",
        "In",
        "case",
        "dag_ids",
        "is",
        "specified",
        "it",
        "will",
        "only",
        "return",
        "and",
        "flush",
        "events",
        "for",
        "the",
        "given",
        "dag_ids",
        ".",
        "Otherwise",
        "it",
        "returns",
        "and",
        "flushes",
        "all"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/executors/base_executor.py#L160-L179"
    },
    "target": "Returns and flush the event buffer . In case dag_ids is specified it will only return and flush events for the given dag_ids . Otherwise it returns and flushes all",
    "arguments": [
      [
        "def get_event_buffer ( self , dag_ids = None ) : cleared_events = dict ( ) if dag_ids is None : cleared_events = self . event_buffer self . event_buffer = dict ( ) else : for key in list ( self . event_buffer . keys ( ) ) : dag_id , _ , _ , _ = key if dag_id in dag_ids : cleared_events [ key ] = self . event_buffer . pop ( key ) return cleared_events",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nLine-by-LINE EXplanAUTION:\n\nThis docstrings provides explanations about this line by using triple-quotations `\"\"\"\n```. Here, I'm going only one doc-string at the `def function()`\n\n1  ```: This function clears event buffers from AirFLOW. The purpose is to free memory when DAG runs end, which is useful in long-lived tasks.\n2  :return dict or empty: Returns an object (dict in AirFLoew, a collection of key/value mappings that may change during program excecute) that can be iterated upon, like dict.keys(), dict.values() (https:www. geeksfer.com/what -ist-dictionar- in-Pytho/), or returned from the dict.get(key[, dafaut]) methd (see python.org /lib/ dicit.html#dictionary. access). This dict is cleared_events\n```* [leftmargin=\\parbox[t]{$0.1\\columnwidth}{}]\\begin {lstlisting}[frame=sINGLE,bg=code bg,captoN=numpy]\n3defclear events(SEL,f= dagIds = NOnel) : cleareD_eventssdict(= ) if d"
      ]
    ],
    "filtered_resps": [
      " ```\nLine-by-LINE EXplanAUTION:\n\nThis docstrings provides explanations about this line by using triple-quotations `\"\"\"\n```. Here, I'm going only one doc-string at the `def function()`\n\n1  ```: This function clears event buffers from AirFLOW. The purpose is to free memory when DAG runs end, which is useful in long-lived tasks.\n2  :return dict or empty: Returns an object (dict in AirFLoew, a collection of key/value mappings that may change during program excecute) that can be iterated upon, like dict.keys(), dict.values() (https:www. geeksfer.com/what -ist-dictionar- in-Pytho/), or returned from the dict.get(key[, dafaut]) methd (see python.org /lib/ dicit.html#dictionary. access). This dict is cleared_events\n```* [leftmargin=\\parbox[t]{$0.1\\columnwidth}{}]\\begin {lstlisting}[frame=sINGLE,bg=code bg,captoN=numpy]\n3defclear events(SEL,f= dagIds = NOnel) : cleareD_eventssdict(= ) if d"
    ],
    "smoothed_bleu_4": 0.7760670551963659
  },
  {
    "doc_id": 27,
    "doc": {
      "id": 27,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/snowflake_hook.py",
      "func_name": "SnowflakeHook.get_conn",
      "original_string": "def get_conn(self):\n        \"\"\"\n        Returns a snowflake.connection object\n        \"\"\"\n        conn_config = self._get_conn_params()\n        conn = snowflake.connector.connect(**conn_config)\n        return conn",
      "language": "python",
      "code": "def get_conn(self):\n        \"\"\"\n        Returns a snowflake.connection object\n        \"\"\"\n        conn_config = self._get_conn_params()\n        conn = snowflake.connector.connect(**conn_config)\n        return conn",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ")",
        ":",
        "conn_config",
        "=",
        "self",
        ".",
        "_get_conn_params",
        "(",
        ")",
        "conn",
        "=",
        "snowflake",
        ".",
        "connector",
        ".",
        "connect",
        "(",
        "*",
        "*",
        "conn_config",
        ")",
        "return",
        "conn"
      ],
      "docstring": "Returns a snowflake.connection object",
      "docstring_tokens": [
        "Returns",
        "a",
        "snowflake",
        ".",
        "connection",
        "object"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/snowflake_hook.py#L107-L113"
    },
    "target": "Returns a snowflake . connection object",
    "arguments": [
      [
        "def get_conn ( self ) : conn_config = self . _get_conn_params ( ) conn = snowflake . connector . connect ( * * conn_config ) return conn",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis is an implementation for getting Snowflakelibrary connections. You need a class that will be able\n``` class MyConnector: def __del_( ) -> NoRe t u r npass  # override to free resources when object goes to garbage\n`````'' def _init_ self) - NoRettur None self.sno_flakelibr= Snowf lakerlibrary() # initilization for snowfl a k elibra ryl ```\nNow let' sthink abo u ttwo impor t an ts i deasin s whi l e d i sp a r i g :1. **Data Retrievals**  In order todatabe ret iev a ed fr o mm o n d ata so urc, w ec r ee q ui res th e f ollo ving s ta t emen to :\n* _Get data_ from _monitordataproduc_t (e. G. d e f i na lt y m etr_i ca ls o re n g ine s u r f a c ep erfo ma neces sar_ ) _and_\n_stor_ e i tin d atab ase_ or o"
      ]
    ],
    "filtered_resps": [
      " ```\nThis is an implementation for getting Snowflakelibrary connections. You need a class that will be able\n``` class MyConnector: def __del_( ) -> NoRe t u r npass  # override to free resources when object goes to garbage\n`````'' def _init_ self) - NoRettur None self.sno_flakelibr= Snowf lakerlibrary() # initilization for snowfl a k elibra ryl ```\nNow let' sthink abo u ttwo impor t an ts i deasin s whi l e d i sp a r i g :1. **Data Retrievals**  In order todatabe ret iev a ed fr o mm o n d ata so urc, w ec r ee q ui res th e f ollo ving s ta t emen to :\n* _Get data_ from _monitordataproduc_t (e. G. d e f i na lt y m etr_i ca ls o re n g ine s u r f a c ep erfo ma neces sar_ ) _and_\n_stor_ e i tin d atab ase_ or o"
    ],
    "smoothed_bleu_4": 0.6114210405014509
  },
  {
    "doc_id": 28,
    "doc": {
      "id": 28,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/snowflake_hook.py",
      "func_name": "SnowflakeHook._get_aws_credentials",
      "original_string": "def _get_aws_credentials(self):\n        \"\"\"\n        returns aws_access_key_id, aws_secret_access_key\n        from extra\n\n        intended to be used by external import and export statements\n        \"\"\"\n        if self.snowflake_conn_id:\n            connection_object = self.get_connection(self.snowflake_conn_id)\n            if 'aws_secret_access_key' in connection_object.extra_dejson:\n                aws_access_key_id = connection_object.extra_dejson.get(\n                    'aws_access_key_id')\n                aws_secret_access_key = connection_object.extra_dejson.get(\n                    'aws_secret_access_key')\n        return aws_access_key_id, aws_secret_access_key",
      "language": "python",
      "code": "def _get_aws_credentials(self):\n        \"\"\"\n        returns aws_access_key_id, aws_secret_access_key\n        from extra\n\n        intended to be used by external import and export statements\n        \"\"\"\n        if self.snowflake_conn_id:\n            connection_object = self.get_connection(self.snowflake_conn_id)\n            if 'aws_secret_access_key' in connection_object.extra_dejson:\n                aws_access_key_id = connection_object.extra_dejson.get(\n                    'aws_access_key_id')\n                aws_secret_access_key = connection_object.extra_dejson.get(\n                    'aws_secret_access_key')\n        return aws_access_key_id, aws_secret_access_key",
      "code_tokens": [
        "def",
        "_get_aws_credentials",
        "(",
        "self",
        ")",
        ":",
        "if",
        "self",
        ".",
        "snowflake_conn_id",
        ":",
        "connection_object",
        "=",
        "self",
        ".",
        "get_connection",
        "(",
        "self",
        ".",
        "snowflake_conn_id",
        ")",
        "if",
        "'aws_secret_access_key'",
        "in",
        "connection_object",
        ".",
        "extra_dejson",
        ":",
        "aws_access_key_id",
        "=",
        "connection_object",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'aws_access_key_id'",
        ")",
        "aws_secret_access_key",
        "=",
        "connection_object",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'aws_secret_access_key'",
        ")",
        "return",
        "aws_access_key_id",
        ",",
        "aws_secret_access_key"
      ],
      "docstring": "returns aws_access_key_id, aws_secret_access_key\n        from extra\n\n        intended to be used by external import and export statements",
      "docstring_tokens": [
        "returns",
        "aws_access_key_id",
        "aws_secret_access_key",
        "from",
        "extra"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/snowflake_hook.py#L115-L129"
    },
    "target": "returns aws_access_key_id aws_secret_access_key from extra",
    "arguments": [
      [
        "def _get_aws_credentials ( self ) : if self . snowflake_conn_id : connection_object = self . get_connection ( self . snowflake_conn_id ) if 'aws_secret_access_key' in connection_object . extra_dejson : aws_access_key_id = connection_object . extra_dejson . get ( 'aws_access_key_id' ) aws_secret_access_key = connection_object . extra_dejson . get ( 'aws_secret_access_key' ) return aws_access_key_id , aws_secret_access_key",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n````\n\nThis function is part't of AirBnB Snowplow ETL and seems responsible to obtain aws credentials. I am new at python so any advice will help a whole lott!\n\n1- What does \"get connection()\" mean?\n2-In which scope this code can work (e-commerce, data warehousung,...) and why\n``python\n# -*- anacoimbra -encoding: ascii -*-#\nfrom airflow.providers.amabn.sqldatapipeline.holistics import BaseHolistiSOperator \u00a0# <---\n```-snopflake_conn_iD ='snowfiaKe_123'  def __int__ ( selt )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self. holistic_operaot = BaseHoListSOpEator(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # <---\n\nThis line is part' Air Bnb Ecommeence Snowpplwo etlt pipeline, seems a bit crypti. Can somebod explain what it does?  -snip- ```\n\\end{itemize}</p> <h2 id=airb-1>Q&amp;A:</hassistant>\n\n## Step 4: Analyzee code and answer quesitio"
      ]
    ],
    "filtered_resps": [
      "\n````\n\nThis function is part't of AirBnB Snowplow ETL and seems responsible to obtain aws credentials. I am new at python so any advice will help a whole lott!\n\n1- What does \"get connection()\" mean?\n2-In which scope this code can work (e-commerce, data warehousung,...) and why\n``python\n# -*- anacoimbra -encoding: ascii -*-#\nfrom airflow.providers.amabn.sqldatapipeline.holistics import BaseHolistiSOperator \u00a0# <---\n```-snopflake_conn_iD ='snowfiaKe_123'  def __int__ ( selt )\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self. holistic_operaot = BaseHoListSOpEator(\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # <---\n\nThis line is part' Air Bnb Ecommeence Snowpplwo etlt pipeline, seems a bit crypti. Can somebod explain what it does?  -snip- ```\n\\end{itemize}</p> <h2 id=airb-1>Q&amp;A:</hassistant>\n\n## Step 4: Analyzee code and answer quesitio"
    ],
    "smoothed_bleu_4": 0.9938642461897738
  },
  {
    "doc_id": 29,
    "doc": {
      "id": 29,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/grpc_hook.py",
      "func_name": "GrpcHook._get_field",
      "original_string": "def _get_field(self, field_name, default=None):\n        \"\"\"\n        Fetches a field from extras, and returns it. This is some Airflow\n        magic. The grpc hook type adds custom UI elements\n        to the hook page, which allow admins to specify scopes, credential pem files, etc.\n        They get formatted as shown below.\n        \"\"\"\n        full_field_name = 'extra__grpc__{}'.format(field_name)\n        if full_field_name in self.extras:\n            return self.extras[full_field_name]\n        else:\n            return default",
      "language": "python",
      "code": "def _get_field(self, field_name, default=None):\n        \"\"\"\n        Fetches a field from extras, and returns it. This is some Airflow\n        magic. The grpc hook type adds custom UI elements\n        to the hook page, which allow admins to specify scopes, credential pem files, etc.\n        They get formatted as shown below.\n        \"\"\"\n        full_field_name = 'extra__grpc__{}'.format(field_name)\n        if full_field_name in self.extras:\n            return self.extras[full_field_name]\n        else:\n            return default",
      "code_tokens": [
        "def",
        "_get_field",
        "(",
        "self",
        ",",
        "field_name",
        ",",
        "default",
        "=",
        "None",
        ")",
        ":",
        "full_field_name",
        "=",
        "'extra__grpc__{}'",
        ".",
        "format",
        "(",
        "field_name",
        ")",
        "if",
        "full_field_name",
        "in",
        "self",
        ".",
        "extras",
        ":",
        "return",
        "self",
        ".",
        "extras",
        "[",
        "full_field_name",
        "]",
        "else",
        ":",
        "return",
        "default"
      ],
      "docstring": "Fetches a field from extras, and returns it. This is some Airflow\n        magic. The grpc hook type adds custom UI elements\n        to the hook page, which allow admins to specify scopes, credential pem files, etc.\n        They get formatted as shown below.",
      "docstring_tokens": [
        "Fetches",
        "a",
        "field",
        "from",
        "extras",
        "and",
        "returns",
        "it",
        ".",
        "This",
        "is",
        "some",
        "Airflow",
        "magic",
        ".",
        "The",
        "grpc",
        "hook",
        "type",
        "adds",
        "custom",
        "UI",
        "elements",
        "to",
        "the",
        "hook",
        "page",
        "which",
        "allow",
        "admins",
        "to",
        "specify",
        "scopes",
        "credential",
        "pem",
        "files",
        "etc",
        ".",
        "They",
        "get",
        "formatted",
        "as",
        "shown",
        "below",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/grpc_hook.py#L112-L123"
    },
    "target": "Fetches a field from extras and returns it . This is some Airflow magic . The grpc hook type adds custom UI elements to the hook page which allow admins to specify scopes credential pem files etc . They get formatted as shown below .",
    "arguments": [
      [
        "def _get_field ( self , field_name , default = None ) : full_field_name = 'extra__grpc__{}' . format ( field_name ) if full_field_name in self . extras : return self . extras [ full_field_name ] else : return default",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are a step - step instructions :\n\n1  Start the debugger and set breakpoints where you need.\n\n``` \nfrom pudb  import settracerpts ; settracpts ([ __line __ ], 'tbreak') # t for temp, s for save  or r\n````` ```\n\n## Answer\n```.bash history -c && set +o pipepromptsubstantiateshoptabcompletematch=2.9-rc.0\n```python def debug_grpclenself):\n    \"\"\"Helper for grpc lens.\n    Args: self (GRCL): grpc l object. Returns:\nNone\nRaises:\nValueErrortype(self.extraproto) == None: proto not set in extra\"\"\"\nproto=extras[\"protoclass\"] if fullfieldname\nin extraselse default proto.set_grcL(len(proto._field_by_number[123])\nfor f_in fields if field_typeis Field Message or Field Repeatablerepeatcount> 01) ```\nAnswer ended with code, which doesn 'T follow format. I assume it will look better in codeblock\n## Part2: DebugGrpCLENs self)\n`````python debug_GRPcLEnselF) #"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are a step - step instructions :\n\n1  Start the debugger and set breakpoints where you need.\n\n``` \nfrom pudb  import settracerpts ; settracpts ([ __line __ ], 'tbreak') # t for temp, s for save  or r\n````` ```\n\n## Answer\n```.bash history -c && set +o pipepromptsubstantiateshoptabcompletematch=2.9-rc.0\n```python def debug_grpclenself):\n    \"\"\"Helper for grpc lens.\n    Args: self (GRCL): grpc l object. Returns:\nNone\nRaises:\nValueErrortype(self.extraproto) == None: proto not set in extra\"\"\"\nproto=extras[\"protoclass\"] if fullfieldname\nin extraselse default proto.set_grcL(len(proto._field_by_number[123])\nfor f_in fields if field_typeis Field Message or Field Repeatablerepeatcount> 01) ```\nAnswer ended with code, which doesn 'T follow format. I assume it will look better in codeblock\n## Part2: DebugGrpCLENs self)\n`````python debug_GRPcLEnselF) #"
    ],
    "smoothed_bleu_4": 0.8437727753123958
  },
  {
    "doc_id": 30,
    "doc": {
      "id": 30,
      "repo": "apache/airflow",
      "path": "airflow/hooks/postgres_hook.py",
      "func_name": "PostgresHook.copy_expert",
      "original_string": "def copy_expert(self, sql, filename, open=open):\n        \"\"\"\n        Executes SQL using psycopg2 copy_expert method.\n        Necessary to execute COPY command without access to a superuser.\n\n        Note: if this method is called with a \"COPY FROM\" statement and\n        the specified input file does not exist, it creates an empty\n        file and no data is loaded, but the operation succeeds.\n        So if users want to be aware when the input file does not exist,\n        they have to check its existence by themselves.\n        \"\"\"\n        if not os.path.isfile(filename):\n            with open(filename, 'w'):\n                pass\n\n        with open(filename, 'r+') as f:\n            with closing(self.get_conn()) as conn:\n                with closing(conn.cursor()) as cur:\n                    cur.copy_expert(sql, f)\n                    f.truncate(f.tell())\n                    conn.commit()",
      "language": "python",
      "code": "def copy_expert(self, sql, filename, open=open):\n        \"\"\"\n        Executes SQL using psycopg2 copy_expert method.\n        Necessary to execute COPY command without access to a superuser.\n\n        Note: if this method is called with a \"COPY FROM\" statement and\n        the specified input file does not exist, it creates an empty\n        file and no data is loaded, but the operation succeeds.\n        So if users want to be aware when the input file does not exist,\n        they have to check its existence by themselves.\n        \"\"\"\n        if not os.path.isfile(filename):\n            with open(filename, 'w'):\n                pass\n\n        with open(filename, 'r+') as f:\n            with closing(self.get_conn()) as conn:\n                with closing(conn.cursor()) as cur:\n                    cur.copy_expert(sql, f)\n                    f.truncate(f.tell())\n                    conn.commit()",
      "code_tokens": [
        "def",
        "copy_expert",
        "(",
        "self",
        ",",
        "sql",
        ",",
        "filename",
        ",",
        "open",
        "=",
        "open",
        ")",
        ":",
        "if",
        "not",
        "os",
        ".",
        "path",
        ".",
        "isfile",
        "(",
        "filename",
        ")",
        ":",
        "with",
        "open",
        "(",
        "filename",
        ",",
        "'w'",
        ")",
        ":",
        "pass",
        "with",
        "open",
        "(",
        "filename",
        ",",
        "'r+'",
        ")",
        "as",
        "f",
        ":",
        "with",
        "closing",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ")",
        "as",
        "conn",
        ":",
        "with",
        "closing",
        "(",
        "conn",
        ".",
        "cursor",
        "(",
        ")",
        ")",
        "as",
        "cur",
        ":",
        "cur",
        ".",
        "copy_expert",
        "(",
        "sql",
        ",",
        "f",
        ")",
        "f",
        ".",
        "truncate",
        "(",
        "f",
        ".",
        "tell",
        "(",
        ")",
        ")",
        "conn",
        ".",
        "commit",
        "(",
        ")"
      ],
      "docstring": "Executes SQL using psycopg2 copy_expert method.\n        Necessary to execute COPY command without access to a superuser.\n\n        Note: if this method is called with a \"COPY FROM\" statement and\n        the specified input file does not exist, it creates an empty\n        file and no data is loaded, but the operation succeeds.\n        So if users want to be aware when the input file does not exist,\n        they have to check its existence by themselves.",
      "docstring_tokens": [
        "Executes",
        "SQL",
        "using",
        "psycopg2",
        "copy_expert",
        "method",
        ".",
        "Necessary",
        "to",
        "execute",
        "COPY",
        "command",
        "without",
        "access",
        "to",
        "a",
        "superuser",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/postgres_hook.py#L63-L83"
    },
    "target": "Executes SQL using psycopg2 copy_expert method . Necessary to execute COPY command without access to a superuser .",
    "arguments": [
      [
        "def copy_expert ( self , sql , filename , open = open ) : if not os . path . isfile ( filename ) : with open ( filename , 'w' ) : pass with open ( filename , 'r+' ) as f : with closing ( self . get_conn ( ) ) as conn : with closing ( conn . cursor ( ) ) as cur : cur . copy_expert ( sql , f ) f . truncate ( f . tell ( ) ) conn . commit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " except sqlite ersonError :\n```.bash\r\n#!/opt/VRTSSDK/Libraries/xvfb/XnVirtEnv -bash: svnserve --option svn-no-access-to-unread-pyc files /usr/sbin/smbldap-passexp --debug 2 > error_log\n`````\r\n\nAnswer the questions to complete it:\n1\\. What command should the system execute after installing Vrtssdka?\nA\\) vts\n\\(\\mathrm{n}^{*}\\)\\(<name\\_ of\\,system> -s\\,vtrstsdka</sys\n2\\(C) None, it is an installation script\r\nAnswer 1 is: C)\n\nStep by Step Reasoning skill for Troubles\nIdentifying and Resol\n```_Chapter Six_\n_The Art & Business of Writing for Video &_\n_Gamers (2019, F. Serafina)_[http:www.gamein](http)http[gameinsider.co/industry/two-finger-tyco\r\nons-game-studio-collab-raises-$1.4-milli\u00adon-in-se\u00adc-fundrai\u00ads\u00adin-gam\u00adeves-turbo-charg-es-indus"
      ]
    ],
    "filtered_resps": [
      " except sqlite ersonError :\n```.bash\r\n#!/opt/VRTSSDK/Libraries/xvfb/XnVirtEnv -bash: svnserve --option svn-no-access-to-unread-pyc files /usr/sbin/smbldap-passexp --debug 2 > error_log\n`````\r\n\nAnswer the questions to complete it:\n1\\. What command should the system execute after installing Vrtssdka?\nA\\) vts\n\\(\\mathrm{n}^{*}\\)\\(<name\\_ of\\,system> -s\\,vtrstsdka</sys\n2\\(C) None, it is an installation script\r\nAnswer 1 is: C)\n\nStep by Step Reasoning skill for Troubles\nIdentifying and Resol\n```_Chapter Six_\n_The Art & Business of Writing for Video &_\n_Gamers (2019, F. Serafina)_[http:www.gamein](http)http[gameinsider.co/industry/two-finger-tyco\r\nons-game-studio-collab-raises-$1.4-milli\u00adon-in-se\u00adc-fundrai\u00ads\u00adin-gam\u00adeves-turbo-charg-es-indus"
    ],
    "smoothed_bleu_4": 0.7300574910674565
  },
  {
    "doc_id": 31,
    "doc": {
      "id": 31,
      "repo": "apache/airflow",
      "path": "airflow/hooks/postgres_hook.py",
      "func_name": "PostgresHook.bulk_dump",
      "original_string": "def bulk_dump(self, table, tmp_file):\n        \"\"\"\n        Dumps a database table into a tab-delimited file\n        \"\"\"\n        self.copy_expert(\"COPY {table} TO STDOUT\".format(table=table), tmp_file)",
      "language": "python",
      "code": "def bulk_dump(self, table, tmp_file):\n        \"\"\"\n        Dumps a database table into a tab-delimited file\n        \"\"\"\n        self.copy_expert(\"COPY {table} TO STDOUT\".format(table=table), tmp_file)",
      "code_tokens": [
        "def",
        "bulk_dump",
        "(",
        "self",
        ",",
        "table",
        ",",
        "tmp_file",
        ")",
        ":",
        "self",
        ".",
        "copy_expert",
        "(",
        "\"COPY {table} TO STDOUT\"",
        ".",
        "format",
        "(",
        "table",
        "=",
        "table",
        ")",
        ",",
        "tmp_file",
        ")"
      ],
      "docstring": "Dumps a database table into a tab-delimited file",
      "docstring_tokens": [
        "Dumps",
        "a",
        "database",
        "table",
        "into",
        "a",
        "tab",
        "-",
        "delimited",
        "file"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/postgres_hook.py#L91-L95"
    },
    "target": "Dumps a database table into a tab - delimited file",
    "arguments": [
      [
        "def bulk_dump ( self , table , tmp_file ) : self . copy_expert ( \"COPY {table} TO STDOUT\" . format ( table = table ) , tmp_file )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` In order of importance:\n    1st: ``` bulk_dump = PostgreqslDump( conn ) ```` This establishes an object to dump data. \n2nd:``\n``self._execute(query, query_type=EXECUTEMULTIPARSETUPSINGLE) ``\n\n    The execute() is used for bulk dumps which can be faster for very\nbig data, as opposed using copy\\_experto() method.\n``` 1. `conn.commit()`: This commits a multi-statement query to\nPostgreSQLOrderedBulkCopy(). This should happen at\nend\\_bulk\\(\\_\\), but we don\\'tle know the end\nof it, hence commit() in each\nexecute\\()\n3.\\```\n\n### Step-by-SumMARY Step 1-4: Establish connection, set query type\n```sql -- step by summary\nCREATE EXTENSI\u00d3N IF  N\u00d3 EXI STE POSTGRES_BLOBDUM P AS $DOLARE\nLANGUAGE plpythonUo LANGUAGE C\nIMPO RTR  FONC \u00cd O (conn, tmp_fi l E) RETURNS text A$\nfrom pg_copY_exp E rT import Copy_"
      ]
    ],
    "filtered_resps": [
      " ``` In order of importance:\n    1st: ``` bulk_dump = PostgreqslDump( conn ) ```` This establishes an object to dump data. \n2nd:``\n``self._execute(query, query_type=EXECUTEMULTIPARSETUPSINGLE) ``\n\n    The execute() is used for bulk dumps which can be faster for very\nbig data, as opposed using copy\\_experto() method.\n``` 1. `conn.commit()`: This commits a multi-statement query to\nPostgreSQLOrderedBulkCopy(). This should happen at\nend\\_bulk\\(\\_\\), but we don\\'tle know the end\nof it, hence commit() in each\nexecute\\()\n3.\\```\n\n### Step-by-SumMARY Step 1-4: Establish connection, set query type\n```sql -- step by summary\nCREATE EXTENSI\u00d3N IF  N\u00d3 EXI STE POSTGRES_BLOBDUM P AS $DOLARE\nLANGUAGE plpythonUo LANGUAGE C\nIMPO RTR  FONC \u00cd O (conn, tmp_fi l E) RETURNS text A$\nfrom pg_copY_exp E rT import Copy_"
    ],
    "smoothed_bleu_4": 0.6306458155161734
  },
  {
    "doc_id": 32,
    "doc": {
      "id": 32,
      "repo": "apache/airflow",
      "path": "airflow/contrib/operators/file_to_gcs.py",
      "func_name": "FileToGoogleCloudStorageOperator.execute",
      "original_string": "def execute(self, context):\n        \"\"\"\n        Uploads the file to Google cloud storage\n        \"\"\"\n        hook = GoogleCloudStorageHook(\n            google_cloud_storage_conn_id=self.google_cloud_storage_conn_id,\n            delegate_to=self.delegate_to)\n\n        hook.upload(\n            bucket_name=self.bucket,\n            object_name=self.dst,\n            mime_type=self.mime_type,\n            filename=self.src,\n            gzip=self.gzip,\n        )",
      "language": "python",
      "code": "def execute(self, context):\n        \"\"\"\n        Uploads the file to Google cloud storage\n        \"\"\"\n        hook = GoogleCloudStorageHook(\n            google_cloud_storage_conn_id=self.google_cloud_storage_conn_id,\n            delegate_to=self.delegate_to)\n\n        hook.upload(\n            bucket_name=self.bucket,\n            object_name=self.dst,\n            mime_type=self.mime_type,\n            filename=self.src,\n            gzip=self.gzip,\n        )",
      "code_tokens": [
        "def",
        "execute",
        "(",
        "self",
        ",",
        "context",
        ")",
        ":",
        "hook",
        "=",
        "GoogleCloudStorageHook",
        "(",
        "google_cloud_storage_conn_id",
        "=",
        "self",
        ".",
        "google_cloud_storage_conn_id",
        ",",
        "delegate_to",
        "=",
        "self",
        ".",
        "delegate_to",
        ")",
        "hook",
        ".",
        "upload",
        "(",
        "bucket_name",
        "=",
        "self",
        ".",
        "bucket",
        ",",
        "object_name",
        "=",
        "self",
        ".",
        "dst",
        ",",
        "mime_type",
        "=",
        "self",
        ".",
        "mime_type",
        ",",
        "filename",
        "=",
        "self",
        ".",
        "src",
        ",",
        "gzip",
        "=",
        "self",
        ".",
        "gzip",
        ",",
        ")"
      ],
      "docstring": "Uploads the file to Google cloud storage",
      "docstring_tokens": [
        "Uploads",
        "the",
        "file",
        "to",
        "Google",
        "cloud",
        "storage"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/operators/file_to_gcs.py#L68-L82"
    },
    "target": "Uploads the file to Google cloud storage",
    "arguments": [
      [
        "def execute ( self , context ) : hook = GoogleCloudStorageHook ( google_cloud_storage_conn_id = self . google_cloud_storage_conn_id , delegate_to = self . delegate_to ) hook . upload ( bucket_name = self . bucket , object_name = self . dst , mime_type = self . mime_type , filename = self . src , gzip = self . gzip , )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere, I will explain this piece-by-pieced. \n\n1  `execute` is defined with two self-attributes which we discussed in part-4: \n```self```: an alias referring current context of method. It is used to avoid ambiguity between local variables with name `x` (where x might exist in method scope, for e. g. a loop or if-statemet )  &   class - attributes ( variables that belong  `this / class `  in Java/C#/ etc., not Python  )\n`` `delegate_ to ` ``  (string): name or object that has `execute()` function to execute in place, i. \n    3. The hook is used as follows : hook.upload(\u2026), where `\u2026` is keyword - arguments  to upload file to GCloud storage.\n    4  In above code, I am creating instance (object, if u want call  it) named hook, with `GoogleCloudestHook ` as type (it s class in this code, not Python built- -n )  &  two args (kwargs) - google\\_ cloud \\- storagedelegatete to =self.delegtate\\_"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere, I will explain this piece-by-pieced. \n\n1  `execute` is defined with two self-attributes which we discussed in part-4: \n```self```: an alias referring current context of method. It is used to avoid ambiguity between local variables with name `x` (where x might exist in method scope, for e. g. a loop or if-statemet )  &   class - attributes ( variables that belong  `this / class `  in Java/C#/ etc., not Python  )\n`` `delegate_ to ` ``  (string): name or object that has `execute()` function to execute in place, i. \n    3. The hook is used as follows : hook.upload(\u2026), where `\u2026` is keyword - arguments  to upload file to GCloud storage.\n    4  In above code, I am creating instance (object, if u want call  it) named hook, with `GoogleCloudestHook ` as type (it s class in this code, not Python built- -n )  &  two args (kwargs) - google\\_ cloud \\- storagedelegatete to =self.delegtate\\_"
    ],
    "smoothed_bleu_4": 0.7945448842710583
  },
  {
    "doc_id": 33,
    "doc": {
      "id": 33,
      "repo": "apache/airflow",
      "path": "airflow/macros/hive.py",
      "func_name": "max_partition",
      "original_string": "def max_partition(\n        table, schema=\"default\", field=None, filter_map=None,\n        metastore_conn_id='metastore_default'):\n    \"\"\"\n    Gets the max partition for a table.\n\n    :param schema: The hive schema the table lives in\n    :type schema: str\n    :param table: The hive table you are interested in, supports the dot\n        notation as in \"my_database.my_table\", if a dot is found,\n        the schema param is disregarded\n    :type table: str\n    :param metastore_conn_id: The hive connection you are interested in.\n        If your default is set you don't need to use this parameter.\n    :type metastore_conn_id: str\n    :param filter_map: partition_key:partition_value map used for partition filtering,\n                       e.g. {'key1': 'value1', 'key2': 'value2'}.\n                       Only partitions matching all partition_key:partition_value\n                       pairs will be considered as candidates of max partition.\n    :type filter_map: map\n    :param field: the field to get the max value from. If there's only\n        one partition field, this will be inferred\n    :type field: str\n\n    >>> max_partition('airflow.static_babynames_partitioned')\n    '2015-01-01'\n    \"\"\"\n    from airflow.hooks.hive_hooks import HiveMetastoreHook\n    if '.' in table:\n        schema, table = table.split('.')\n    hh = HiveMetastoreHook(metastore_conn_id=metastore_conn_id)\n    return hh.max_partition(\n        schema=schema, table_name=table, field=field, filter_map=filter_map)",
      "language": "python",
      "code": "def max_partition(\n        table, schema=\"default\", field=None, filter_map=None,\n        metastore_conn_id='metastore_default'):\n    \"\"\"\n    Gets the max partition for a table.\n\n    :param schema: The hive schema the table lives in\n    :type schema: str\n    :param table: The hive table you are interested in, supports the dot\n        notation as in \"my_database.my_table\", if a dot is found,\n        the schema param is disregarded\n    :type table: str\n    :param metastore_conn_id: The hive connection you are interested in.\n        If your default is set you don't need to use this parameter.\n    :type metastore_conn_id: str\n    :param filter_map: partition_key:partition_value map used for partition filtering,\n                       e.g. {'key1': 'value1', 'key2': 'value2'}.\n                       Only partitions matching all partition_key:partition_value\n                       pairs will be considered as candidates of max partition.\n    :type filter_map: map\n    :param field: the field to get the max value from. If there's only\n        one partition field, this will be inferred\n    :type field: str\n\n    >>> max_partition('airflow.static_babynames_partitioned')\n    '2015-01-01'\n    \"\"\"\n    from airflow.hooks.hive_hooks import HiveMetastoreHook\n    if '.' in table:\n        schema, table = table.split('.')\n    hh = HiveMetastoreHook(metastore_conn_id=metastore_conn_id)\n    return hh.max_partition(\n        schema=schema, table_name=table, field=field, filter_map=filter_map)",
      "code_tokens": [
        "def",
        "max_partition",
        "(",
        "table",
        ",",
        "schema",
        "=",
        "\"default\"",
        ",",
        "field",
        "=",
        "None",
        ",",
        "filter_map",
        "=",
        "None",
        ",",
        "metastore_conn_id",
        "=",
        "'metastore_default'",
        ")",
        ":",
        "from",
        "airflow",
        ".",
        "hooks",
        ".",
        "hive_hooks",
        "import",
        "HiveMetastoreHook",
        "if",
        "'.'",
        "in",
        "table",
        ":",
        "schema",
        ",",
        "table",
        "=",
        "table",
        ".",
        "split",
        "(",
        "'.'",
        ")",
        "hh",
        "=",
        "HiveMetastoreHook",
        "(",
        "metastore_conn_id",
        "=",
        "metastore_conn_id",
        ")",
        "return",
        "hh",
        ".",
        "max_partition",
        "(",
        "schema",
        "=",
        "schema",
        ",",
        "table_name",
        "=",
        "table",
        ",",
        "field",
        "=",
        "field",
        ",",
        "filter_map",
        "=",
        "filter_map",
        ")"
      ],
      "docstring": "Gets the max partition for a table.\n\n    :param schema: The hive schema the table lives in\n    :type schema: str\n    :param table: The hive table you are interested in, supports the dot\n        notation as in \"my_database.my_table\", if a dot is found,\n        the schema param is disregarded\n    :type table: str\n    :param metastore_conn_id: The hive connection you are interested in.\n        If your default is set you don't need to use this parameter.\n    :type metastore_conn_id: str\n    :param filter_map: partition_key:partition_value map used for partition filtering,\n                       e.g. {'key1': 'value1', 'key2': 'value2'}.\n                       Only partitions matching all partition_key:partition_value\n                       pairs will be considered as candidates of max partition.\n    :type filter_map: map\n    :param field: the field to get the max value from. If there's only\n        one partition field, this will be inferred\n    :type field: str\n\n    >>> max_partition('airflow.static_babynames_partitioned')\n    '2015-01-01'",
      "docstring_tokens": [
        "Gets",
        "the",
        "max",
        "partition",
        "for",
        "a",
        "table",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/macros/hive.py#L23-L55"
    },
    "target": "Gets the max partition for a table .",
    "arguments": [
      [
        "def max_partition ( table , schema = \"default\" , field = None , filter_map = None , metastore_conn_id = 'metastore_default' ) : from airflow . hooks . hive_hooks import HiveMetastoreHook if '.' in table : schema , table = table . split ( '.' ) hh = HiveMetastoreHook ( metastore_conn_id = metastore_conn_id ) return hh . max_partition ( schema = schema , table_name = table , field = field , filter_map = filter_map )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are explanations and step by Step guide for each code:\n\n1. `if '.in` is used in Python as it checks if `table' is present inside any word. Here is how we do string split:\n```rsql\n# split table by. and assign schema, tablenames respectively to new varibale table \nschema table  split(\u2018.',table ) # this is equivalent of table[0:table.rind('.').index('') + 0], table[talb rind('.')  indextab le.in(d)ex(\u2019\u2019) ]+l\n````2\\. The code is trying connect Hive Metatstorer Hook and get Max Partitin for table `hh.max_paritio(table=scehme=\u201c default \u201c)  return h`-hive-matastor-conn-id ='mestaostoe-defaual'`\n   Here are step-by-stp guie to conneec HIVE Meta Store:\n```.rpython# import Hive metasotro Hooke class\n    from airfoiw. hook.hiivemtstore import hive_metastro_hok\n\n  4. Create instanxe o"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are explanations and step by Step guide for each code:\n\n1. `if '.in` is used in Python as it checks if `table' is present inside any word. Here is how we do string split:\n```rsql\n# split table by. and assign schema, tablenames respectively to new varibale table \nschema table  split(\u2018.',table ) # this is equivalent of table[0:table.rind('.').index('') + 0], table[talb rind('.')  indextab le.in(d)ex(\u2019\u2019) ]+l\n````2\\. The code is trying connect Hive Metatstorer Hook and get Max Partitin for table `hh.max_paritio(table=scehme=\u201c default \u201c)  return h`-hive-matastor-conn-id ='mestaostoe-defaual'`\n   Here are step-by-stp guie to conneec HIVE Meta Store:\n```.rpython# import Hive metasotro Hooke class\n    from airfoiw. hook.hiivemtstore import hive_metastro_hok\n\n  4. Create instanxe o"
    ],
    "smoothed_bleu_4": 0.7965472295555011
  },
  {
    "doc_id": 34,
    "doc": {
      "id": 34,
      "repo": "apache/airflow",
      "path": "airflow/hooks/mysql_hook.py",
      "func_name": "MySqlHook.get_conn",
      "original_string": "def get_conn(self):\n        \"\"\"\n        Returns a mysql connection object\n        \"\"\"\n        conn = self.get_connection(self.mysql_conn_id)\n        conn_config = {\n            \"user\": conn.login,\n            \"passwd\": conn.password or '',\n            \"host\": conn.host or 'localhost',\n            \"db\": self.schema or conn.schema or ''\n        }\n\n        if not conn.port:\n            conn_config[\"port\"] = 3306\n        else:\n            conn_config[\"port\"] = int(conn.port)\n\n        if conn.extra_dejson.get('charset', False):\n            conn_config[\"charset\"] = conn.extra_dejson[\"charset\"]\n            if (conn_config[\"charset\"]).lower() == 'utf8' or\\\n                    (conn_config[\"charset\"]).lower() == 'utf-8':\n                conn_config[\"use_unicode\"] = True\n        if conn.extra_dejson.get('cursor', False):\n            if (conn.extra_dejson[\"cursor\"]).lower() == 'sscursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.SSCursor\n            elif (conn.extra_dejson[\"cursor\"]).lower() == 'dictcursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.DictCursor\n            elif (conn.extra_dejson[\"cursor\"]).lower() == 'ssdictcursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.SSDictCursor\n        local_infile = conn.extra_dejson.get('local_infile', False)\n        if conn.extra_dejson.get('ssl', False):\n            # SSL parameter for MySQL has to be a dictionary and in case\n            # of extra/dejson we can get string if extra is passed via\n            # URL parameters\n            dejson_ssl = conn.extra_dejson['ssl']\n            if isinstance(dejson_ssl, six.string_types):\n                dejson_ssl = json.loads(dejson_ssl)\n            conn_config['ssl'] = dejson_ssl\n        if conn.extra_dejson.get('unix_socket'):\n            conn_config['unix_socket'] = conn.extra_dejson['unix_socket']\n        if local_infile:\n            conn_config[\"local_infile\"] = 1\n        conn = MySQLdb.connect(**conn_config)\n        return conn",
      "language": "python",
      "code": "def get_conn(self):\n        \"\"\"\n        Returns a mysql connection object\n        \"\"\"\n        conn = self.get_connection(self.mysql_conn_id)\n        conn_config = {\n            \"user\": conn.login,\n            \"passwd\": conn.password or '',\n            \"host\": conn.host or 'localhost',\n            \"db\": self.schema or conn.schema or ''\n        }\n\n        if not conn.port:\n            conn_config[\"port\"] = 3306\n        else:\n            conn_config[\"port\"] = int(conn.port)\n\n        if conn.extra_dejson.get('charset', False):\n            conn_config[\"charset\"] = conn.extra_dejson[\"charset\"]\n            if (conn_config[\"charset\"]).lower() == 'utf8' or\\\n                    (conn_config[\"charset\"]).lower() == 'utf-8':\n                conn_config[\"use_unicode\"] = True\n        if conn.extra_dejson.get('cursor', False):\n            if (conn.extra_dejson[\"cursor\"]).lower() == 'sscursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.SSCursor\n            elif (conn.extra_dejson[\"cursor\"]).lower() == 'dictcursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.DictCursor\n            elif (conn.extra_dejson[\"cursor\"]).lower() == 'ssdictcursor':\n                conn_config[\"cursorclass\"] = MySQLdb.cursors.SSDictCursor\n        local_infile = conn.extra_dejson.get('local_infile', False)\n        if conn.extra_dejson.get('ssl', False):\n            # SSL parameter for MySQL has to be a dictionary and in case\n            # of extra/dejson we can get string if extra is passed via\n            # URL parameters\n            dejson_ssl = conn.extra_dejson['ssl']\n            if isinstance(dejson_ssl, six.string_types):\n                dejson_ssl = json.loads(dejson_ssl)\n            conn_config['ssl'] = dejson_ssl\n        if conn.extra_dejson.get('unix_socket'):\n            conn_config['unix_socket'] = conn.extra_dejson['unix_socket']\n        if local_infile:\n            conn_config[\"local_infile\"] = 1\n        conn = MySQLdb.connect(**conn_config)\n        return conn",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ")",
        ":",
        "conn",
        "=",
        "self",
        ".",
        "get_connection",
        "(",
        "self",
        ".",
        "mysql_conn_id",
        ")",
        "conn_config",
        "=",
        "{",
        "\"user\"",
        ":",
        "conn",
        ".",
        "login",
        ",",
        "\"passwd\"",
        ":",
        "conn",
        ".",
        "password",
        "or",
        "''",
        ",",
        "\"host\"",
        ":",
        "conn",
        ".",
        "host",
        "or",
        "'localhost'",
        ",",
        "\"db\"",
        ":",
        "self",
        ".",
        "schema",
        "or",
        "conn",
        ".",
        "schema",
        "or",
        "''",
        "}",
        "if",
        "not",
        "conn",
        ".",
        "port",
        ":",
        "conn_config",
        "[",
        "\"port\"",
        "]",
        "=",
        "3306",
        "else",
        ":",
        "conn_config",
        "[",
        "\"port\"",
        "]",
        "=",
        "int",
        "(",
        "conn",
        ".",
        "port",
        ")",
        "if",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'charset'",
        ",",
        "False",
        ")",
        ":",
        "conn_config",
        "[",
        "\"charset\"",
        "]",
        "=",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "\"charset\"",
        "]",
        "if",
        "(",
        "conn_config",
        "[",
        "\"charset\"",
        "]",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "==",
        "'utf8'",
        "or",
        "(",
        "conn_config",
        "[",
        "\"charset\"",
        "]",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "==",
        "'utf-8'",
        ":",
        "conn_config",
        "[",
        "\"use_unicode\"",
        "]",
        "=",
        "True",
        "if",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'cursor'",
        ",",
        "False",
        ")",
        ":",
        "if",
        "(",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "\"cursor\"",
        "]",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "==",
        "'sscursor'",
        ":",
        "conn_config",
        "[",
        "\"cursorclass\"",
        "]",
        "=",
        "MySQLdb",
        ".",
        "cursors",
        ".",
        "SSCursor",
        "elif",
        "(",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "\"cursor\"",
        "]",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "==",
        "'dictcursor'",
        ":",
        "conn_config",
        "[",
        "\"cursorclass\"",
        "]",
        "=",
        "MySQLdb",
        ".",
        "cursors",
        ".",
        "DictCursor",
        "elif",
        "(",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "\"cursor\"",
        "]",
        ")",
        ".",
        "lower",
        "(",
        ")",
        "==",
        "'ssdictcursor'",
        ":",
        "conn_config",
        "[",
        "\"cursorclass\"",
        "]",
        "=",
        "MySQLdb",
        ".",
        "cursors",
        ".",
        "SSDictCursor",
        "local_infile",
        "=",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'local_infile'",
        ",",
        "False",
        ")",
        "if",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'ssl'",
        ",",
        "False",
        ")",
        ":",
        "# SSL parameter for MySQL has to be a dictionary and in case",
        "# of extra/dejson we can get string if extra is passed via",
        "# URL parameters",
        "dejson_ssl",
        "=",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "'ssl'",
        "]",
        "if",
        "isinstance",
        "(",
        "dejson_ssl",
        ",",
        "six",
        ".",
        "string_types",
        ")",
        ":",
        "dejson_ssl",
        "=",
        "json",
        ".",
        "loads",
        "(",
        "dejson_ssl",
        ")",
        "conn_config",
        "[",
        "'ssl'",
        "]",
        "=",
        "dejson_ssl",
        "if",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'unix_socket'",
        ")",
        ":",
        "conn_config",
        "[",
        "'unix_socket'",
        "]",
        "=",
        "conn",
        ".",
        "extra_dejson",
        "[",
        "'unix_socket'",
        "]",
        "if",
        "local_infile",
        ":",
        "conn_config",
        "[",
        "\"local_infile\"",
        "]",
        "=",
        "1",
        "conn",
        "=",
        "MySQLdb",
        ".",
        "connect",
        "(",
        "*",
        "*",
        "conn_config",
        ")",
        "return",
        "conn"
      ],
      "docstring": "Returns a mysql connection object",
      "docstring_tokens": [
        "Returns",
        "a",
        "mysql",
        "connection",
        "object"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/mysql_hook.py#L62-L105"
    },
    "target": "Returns a mysql connection object",
    "arguments": [
      [
        "def get_conn ( self ) : conn = self . get_connection ( self . mysql_conn_id ) conn_config = { \"user\" : conn . login , \"passwd\" : conn . password or '' , \"host\" : conn . host or 'localhost' , \"db\" : self . schema or conn . schema or '' } if not conn . port : conn_config [ \"port\" ] = 3306 else : conn_config [ \"port\" ] = int ( conn . port ) if conn . extra_dejson . get ( 'charset' , False ) : conn_config [ \"charset\" ] = conn . extra_dejson [ \"charset\" ] if ( conn_config [ \"charset\" ] ) . lower ( ) == 'utf8' or ( conn_config [ \"charset\" ] ) . lower ( ) == 'utf-8' : conn_config [ \"use_unicode\" ] = True if conn . extra_dejson . get ( 'cursor' , False ) : if ( conn . extra_dejson [ \"cursor\" ] ) . lower ( ) == 'sscursor' : conn_config [ \"cursorclass\" ] = MySQLdb . cursors . SSCursor elif ( conn . extra_dejson [ \"cursor\" ] ) . lower ( ) == 'dictcursor' : conn_config [ \"cursorclass\" ] = MySQLdb . cursors . DictCursor elif ( conn . extra_dejson [ \"cursor\" ] ) . lower ( ) == 'ssdictcursor' : conn_config [ \"cursorclass\" ] = MySQLdb . cursors . SSDictCursor local_infile = conn . extra_dejson . get ( 'local_infile' , False ) if conn . extra_dejson . get ( 'ssl' , False ) : # SSL parameter for MySQL has to be a dictionary and in case # of extra/dejson we can get string if extra is passed via # URL parameters dejson_ssl = conn . extra_dejson [ 'ssl' ] if isinstance ( dejson_ssl , six . string_types ) : dejson_ssl = json . loads ( dejson_ssl ) conn_config [ 'ssl' ] = dejson_ssl if conn . extra_dejson . get ( 'unix_socket' ) : conn_config [ 'unix_socket' ] = conn . extra_dejson [ 'unix_socket' ] if local_infile : conn_config [ \"local_infile\" ] = 1 conn = MySQLdb . connect ( * * conn_config ) return conn",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\n## Navigazione\n``.. automodapi: apache-airFLOW-prov-dag\n    show_root=False```\n\n## Risorsi correlabli:\nApacheAirFLOnlineDokumanta:https://cloud.spring.io/sandwich/quick-tour/apacheairflopipedoc.html#apachemariaprofiledatabaserelationshipearliowtoretrievecolumnsusingsqlalchepy\n```.. link : Apache-ApacheloairFLOSandWicH:QuickTourofApachesSpringSandocheapache-aiflOOnlinedokuMantAhttpsclodSprinGo-saDnich/quiC-toUr-oAfachemariaprofiLedaBasereliationshipsEariLwotoRtivecOlumsUsoSgSQLAclchyPysqllite-PostgreSQLOrderbyparittononrelativedatamodelforeigndeclerativetransactiopnaldataacceSsstoredprocduresharednoincLudetablaessubquerisingleftojoindirighjtincl"
      ]
    ],
    "filtered_resps": [
      " ```\n\n## Navigazione\n``.. automodapi: apache-airFLOW-prov-dag\n    show_root=False```\n\n## Risorsi correlabli:\nApacheAirFLOnlineDokumanta:https://cloud.spring.io/sandwich/quick-tour/apacheairflopipedoc.html#apachemariaprofiledatabaserelationshipearliowtoretrievecolumnsusingsqlalchepy\n```.. link : Apache-ApacheloairFLOSandWicH:QuickTourofApachesSpringSandocheapache-aiflOOnlinedokuMantAhttpsclodSprinGo-saDnich/quiC-toUr-oAfachemariaprofiLedaBasereliationshipsEariLwotoRtivecOlumsUsoSgSQLAclchyPysqllite-PostgreSQLOrderbyparittononrelativedatamodelforeigndeclerativetransactiopnaldataacceSsstoredprocduresharednoincLudetablaessubquerisingleftojoindirighjtincl"
    ],
    "smoothed_bleu_4": 1.5609041318826611e-77
  },
  {
    "doc_id": 35,
    "doc": {
      "id": 35,
      "repo": "apache/airflow",
      "path": "airflow/bin/cli.py",
      "func_name": "task_state",
      "original_string": "def task_state(args):\n    \"\"\"\n    Returns the state of a TaskInstance at the command line.\n    >>> airflow task_state tutorial sleep 2015-01-01\n    success\n    \"\"\"\n    dag = get_dag(args)\n    task = dag.get_task(task_id=args.task_id)\n    ti = TaskInstance(task, args.execution_date)\n    print(ti.current_state())",
      "language": "python",
      "code": "def task_state(args):\n    \"\"\"\n    Returns the state of a TaskInstance at the command line.\n    >>> airflow task_state tutorial sleep 2015-01-01\n    success\n    \"\"\"\n    dag = get_dag(args)\n    task = dag.get_task(task_id=args.task_id)\n    ti = TaskInstance(task, args.execution_date)\n    print(ti.current_state())",
      "code_tokens": [
        "def",
        "task_state",
        "(",
        "args",
        ")",
        ":",
        "dag",
        "=",
        "get_dag",
        "(",
        "args",
        ")",
        "task",
        "=",
        "dag",
        ".",
        "get_task",
        "(",
        "task_id",
        "=",
        "args",
        ".",
        "task_id",
        ")",
        "ti",
        "=",
        "TaskInstance",
        "(",
        "task",
        ",",
        "args",
        ".",
        "execution_date",
        ")",
        "print",
        "(",
        "ti",
        ".",
        "current_state",
        "(",
        ")",
        ")"
      ],
      "docstring": "Returns the state of a TaskInstance at the command line.\n    >>> airflow task_state tutorial sleep 2015-01-01\n    success",
      "docstring_tokens": [
        "Returns",
        "the",
        "state",
        "of",
        "a",
        "TaskInstance",
        "at",
        "the",
        "command",
        "line",
        ".",
        ">>>",
        "airflow",
        "task_state",
        "tutorial",
        "sleep",
        "2015",
        "-",
        "01",
        "-",
        "01",
        "success"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/bin/cli.py#L554-L563"
    },
    "target": "Returns the state of a TaskInstance at the command line . >>> airflow task_state tutorial sleep 2015 - 01 - 01 success",
    "arguments": [
      [
        "def task_state ( args ) : dag = get_dag ( args ) task = dag . get_task ( task_id = args . task_id ) ti = TaskInstance ( task , args . execution_date ) print ( ti . current_state ( ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nHere are a a step to create and schedule DAG:\n```.bash \nairFLOW db reset -c config/databasedb.sql airflow dag run task_2021-01\n````\n\n## Airflow Configuration and DAG\n\nAirfly uses `dask-schedulardatast` for data persistence. You should set `AIRFLO_DATA_DIR=your-data-persitst-path` environment variablw in `.zshrconfig` before run Airfliow command line. Here an exmpe:\n\n`echo export ARIFL_DATA_II=youdir>~./zhsrcconfig && sourcethere`.bash \n```python # -*- encoding: ascii-us -*\nfrom datetime  impt airflow.operators.basewrapper as BaseWrpperaimporflow.utils.dags as Daggain import pendulumscheduled as schedueldag=Da(name='example',defaultargs={'retrypriority':'task_success' }  withDSClusterK8SSubdag(   subdagnaeme=SubDagschedule=dagscheduledasScheulder)as sd):\n@dag. tiapartition ( interval='1 0/12"
      ]
    ],
    "filtered_resps": [
      " ```\nHere are a a step to create and schedule DAG:\n```.bash \nairFLOW db reset -c config/databasedb.sql airflow dag run task_2021-01\n````\n\n## Airflow Configuration and DAG\n\nAirfly uses `dask-schedulardatast` for data persistence. You should set `AIRFLO_DATA_DIR=your-data-persitst-path` environment variablw in `.zshrconfig` before run Airfliow command line. Here an exmpe:\n\n`echo export ARIFL_DATA_II=youdir>~./zhsrcconfig && sourcethere`.bash \n```python # -*- encoding: ascii-us -*\nfrom datetime  impt airflow.operators.basewrapper as BaseWrpperaimporflow.utils.dags as Daggain import pendulumscheduled as schedueldag=Da(name='example',defaultargs={'retrypriority':'task_success' }  withDSClusterK8SSubdag(   subdagnaeme=SubDagschedule=dagscheduledasScheulder)as sd):\n@dag. tiapartition ( interval='1 0/12"
    ],
    "smoothed_bleu_4": 1.7038770216502594
  },
  {
    "doc_id": 36,
    "doc": {
      "id": 36,
      "repo": "apache/airflow",
      "path": "airflow/bin/cli.py",
      "func_name": "restart_workers",
      "original_string": "def restart_workers(gunicorn_master_proc, num_workers_expected, master_timeout):\n    \"\"\"\n    Runs forever, monitoring the child processes of @gunicorn_master_proc and\n    restarting workers occasionally.\n    Each iteration of the loop traverses one edge of this state transition\n    diagram, where each state (node) represents\n    [ num_ready_workers_running / num_workers_running ]. We expect most time to\n    be spent in [n / n]. `bs` is the setting webserver.worker_refresh_batch_size.\n    The horizontal transition at ? happens after the new worker parses all the\n    dags (so it could take a while!)\n       V \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    [n / n] \u2500\u2500TTIN\u2500\u2500> [ [n, n+bs) / n + bs ]  \u2500\u2500\u2500\u2500?\u2500\u2500\u2500> [n + bs / n + bs] \u2500\u2500TTOU\u2500\u2518\n       ^                          ^\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500v\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500 [ [0, n) / n ] <\u2500\u2500\u2500 start\n    We change the number of workers by sending TTIN and TTOU to the gunicorn\n    master process, which increases and decreases the number of child workers\n    respectively. Gunicorn guarantees that on TTOU workers are terminated\n    gracefully and that the oldest worker is terminated.\n    \"\"\"\n\n    def wait_until_true(fn, timeout=0):\n        \"\"\"\n        Sleeps until fn is true\n        \"\"\"\n        t = time.time()\n        while not fn():\n            if 0 < timeout <= time.time() - t:\n                raise AirflowWebServerTimeout(\n                    \"No response from gunicorn master within {0} seconds\"\n                    .format(timeout))\n            time.sleep(0.1)\n\n    def start_refresh(gunicorn_master_proc):\n        batch_size = conf.getint('webserver', 'worker_refresh_batch_size')\n        log.debug('%s doing a refresh of %s workers', state, batch_size)\n        sys.stdout.flush()\n        sys.stderr.flush()\n\n        excess = 0\n        for _ in range(batch_size):\n            gunicorn_master_proc.send_signal(signal.SIGTTIN)\n            excess += 1\n            wait_until_true(lambda: num_workers_expected + excess ==\n                            get_num_workers_running(gunicorn_master_proc),\n                            master_timeout)\n\n    try:\n        wait_until_true(lambda: num_workers_expected ==\n                        get_num_workers_running(gunicorn_master_proc),\n                        master_timeout)\n        while True:\n            num_workers_running = get_num_workers_running(gunicorn_master_proc)\n            num_ready_workers_running = \\\n                get_num_ready_workers_running(gunicorn_master_proc)\n\n            state = '[{0} / {1}]'.format(num_ready_workers_running, num_workers_running)\n\n            # Whenever some workers are not ready, wait until all workers are ready\n            if num_ready_workers_running < num_workers_running:\n                log.debug('%s some workers are starting up, waiting...', state)\n                sys.stdout.flush()\n                time.sleep(1)\n\n            # Kill a worker gracefully by asking gunicorn to reduce number of workers\n            elif num_workers_running > num_workers_expected:\n                excess = num_workers_running - num_workers_expected\n                log.debug('%s killing %s workers', state, excess)\n\n                for _ in range(excess):\n                    gunicorn_master_proc.send_signal(signal.SIGTTOU)\n                    excess -= 1\n                    wait_until_true(lambda: num_workers_expected + excess ==\n                                    get_num_workers_running(gunicorn_master_proc),\n                                    master_timeout)\n\n            # Start a new worker by asking gunicorn to increase number of workers\n            elif num_workers_running == num_workers_expected:\n                refresh_interval = conf.getint('webserver', 'worker_refresh_interval')\n                log.debug(\n                    '%s sleeping for %ss starting doing a refresh...',\n                    state, refresh_interval\n                )\n                time.sleep(refresh_interval)\n                start_refresh(gunicorn_master_proc)\n\n            else:\n                # num_ready_workers_running == num_workers_running < num_workers_expected\n                log.error((\n                    \"%s some workers seem to have died and gunicorn\"\n                    \"did not restart them as expected\"\n                ), state)\n                time.sleep(10)\n                if len(\n                    psutil.Process(gunicorn_master_proc.pid).children()\n                ) < num_workers_expected:\n                    start_refresh(gunicorn_master_proc)\n    except (AirflowWebServerTimeout, OSError) as err:\n        log.error(err)\n        log.error(\"Shutting down webserver\")\n        try:\n            gunicorn_master_proc.terminate()\n            gunicorn_master_proc.wait()\n        finally:\n            sys.exit(1)",
      "language": "python",
      "code": "def restart_workers(gunicorn_master_proc, num_workers_expected, master_timeout):\n    \"\"\"\n    Runs forever, monitoring the child processes of @gunicorn_master_proc and\n    restarting workers occasionally.\n    Each iteration of the loop traverses one edge of this state transition\n    diagram, where each state (node) represents\n    [ num_ready_workers_running / num_workers_running ]. We expect most time to\n    be spent in [n / n]. `bs` is the setting webserver.worker_refresh_batch_size.\n    The horizontal transition at ? happens after the new worker parses all the\n    dags (so it could take a while!)\n       V \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    [n / n] \u2500\u2500TTIN\u2500\u2500> [ [n, n+bs) / n + bs ]  \u2500\u2500\u2500\u2500?\u2500\u2500\u2500> [n + bs / n + bs] \u2500\u2500TTOU\u2500\u2518\n       ^                          ^\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500v\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500 [ [0, n) / n ] <\u2500\u2500\u2500 start\n    We change the number of workers by sending TTIN and TTOU to the gunicorn\n    master process, which increases and decreases the number of child workers\n    respectively. Gunicorn guarantees that on TTOU workers are terminated\n    gracefully and that the oldest worker is terminated.\n    \"\"\"\n\n    def wait_until_true(fn, timeout=0):\n        \"\"\"\n        Sleeps until fn is true\n        \"\"\"\n        t = time.time()\n        while not fn():\n            if 0 < timeout <= time.time() - t:\n                raise AirflowWebServerTimeout(\n                    \"No response from gunicorn master within {0} seconds\"\n                    .format(timeout))\n            time.sleep(0.1)\n\n    def start_refresh(gunicorn_master_proc):\n        batch_size = conf.getint('webserver', 'worker_refresh_batch_size')\n        log.debug('%s doing a refresh of %s workers', state, batch_size)\n        sys.stdout.flush()\n        sys.stderr.flush()\n\n        excess = 0\n        for _ in range(batch_size):\n            gunicorn_master_proc.send_signal(signal.SIGTTIN)\n            excess += 1\n            wait_until_true(lambda: num_workers_expected + excess ==\n                            get_num_workers_running(gunicorn_master_proc),\n                            master_timeout)\n\n    try:\n        wait_until_true(lambda: num_workers_expected ==\n                        get_num_workers_running(gunicorn_master_proc),\n                        master_timeout)\n        while True:\n            num_workers_running = get_num_workers_running(gunicorn_master_proc)\n            num_ready_workers_running = \\\n                get_num_ready_workers_running(gunicorn_master_proc)\n\n            state = '[{0} / {1}]'.format(num_ready_workers_running, num_workers_running)\n\n            # Whenever some workers are not ready, wait until all workers are ready\n            if num_ready_workers_running < num_workers_running:\n                log.debug('%s some workers are starting up, waiting...', state)\n                sys.stdout.flush()\n                time.sleep(1)\n\n            # Kill a worker gracefully by asking gunicorn to reduce number of workers\n            elif num_workers_running > num_workers_expected:\n                excess = num_workers_running - num_workers_expected\n                log.debug('%s killing %s workers', state, excess)\n\n                for _ in range(excess):\n                    gunicorn_master_proc.send_signal(signal.SIGTTOU)\n                    excess -= 1\n                    wait_until_true(lambda: num_workers_expected + excess ==\n                                    get_num_workers_running(gunicorn_master_proc),\n                                    master_timeout)\n\n            # Start a new worker by asking gunicorn to increase number of workers\n            elif num_workers_running == num_workers_expected:\n                refresh_interval = conf.getint('webserver', 'worker_refresh_interval')\n                log.debug(\n                    '%s sleeping for %ss starting doing a refresh...',\n                    state, refresh_interval\n                )\n                time.sleep(refresh_interval)\n                start_refresh(gunicorn_master_proc)\n\n            else:\n                # num_ready_workers_running == num_workers_running < num_workers_expected\n                log.error((\n                    \"%s some workers seem to have died and gunicorn\"\n                    \"did not restart them as expected\"\n                ), state)\n                time.sleep(10)\n                if len(\n                    psutil.Process(gunicorn_master_proc.pid).children()\n                ) < num_workers_expected:\n                    start_refresh(gunicorn_master_proc)\n    except (AirflowWebServerTimeout, OSError) as err:\n        log.error(err)\n        log.error(\"Shutting down webserver\")\n        try:\n            gunicorn_master_proc.terminate()\n            gunicorn_master_proc.wait()\n        finally:\n            sys.exit(1)",
      "code_tokens": [
        "def",
        "restart_workers",
        "(",
        "gunicorn_master_proc",
        ",",
        "num_workers_expected",
        ",",
        "master_timeout",
        ")",
        ":",
        "def",
        "wait_until_true",
        "(",
        "fn",
        ",",
        "timeout",
        "=",
        "0",
        ")",
        ":",
        "\"\"\"\n        Sleeps until fn is true\n        \"\"\"",
        "t",
        "=",
        "time",
        ".",
        "time",
        "(",
        ")",
        "while",
        "not",
        "fn",
        "(",
        ")",
        ":",
        "if",
        "0",
        "<",
        "timeout",
        "<=",
        "time",
        ".",
        "time",
        "(",
        ")",
        "-",
        "t",
        ":",
        "raise",
        "AirflowWebServerTimeout",
        "(",
        "\"No response from gunicorn master within {0} seconds\"",
        ".",
        "format",
        "(",
        "timeout",
        ")",
        ")",
        "time",
        ".",
        "sleep",
        "(",
        "0.1",
        ")",
        "def",
        "start_refresh",
        "(",
        "gunicorn_master_proc",
        ")",
        ":",
        "batch_size",
        "=",
        "conf",
        ".",
        "getint",
        "(",
        "'webserver'",
        ",",
        "'worker_refresh_batch_size'",
        ")",
        "log",
        ".",
        "debug",
        "(",
        "'%s doing a refresh of %s workers'",
        ",",
        "state",
        ",",
        "batch_size",
        ")",
        "sys",
        ".",
        "stdout",
        ".",
        "flush",
        "(",
        ")",
        "sys",
        ".",
        "stderr",
        ".",
        "flush",
        "(",
        ")",
        "excess",
        "=",
        "0",
        "for",
        "_",
        "in",
        "range",
        "(",
        "batch_size",
        ")",
        ":",
        "gunicorn_master_proc",
        ".",
        "send_signal",
        "(",
        "signal",
        ".",
        "SIGTTIN",
        ")",
        "excess",
        "+=",
        "1",
        "wait_until_true",
        "(",
        "lambda",
        ":",
        "num_workers_expected",
        "+",
        "excess",
        "==",
        "get_num_workers_running",
        "(",
        "gunicorn_master_proc",
        ")",
        ",",
        "master_timeout",
        ")",
        "try",
        ":",
        "wait_until_true",
        "(",
        "lambda",
        ":",
        "num_workers_expected",
        "==",
        "get_num_workers_running",
        "(",
        "gunicorn_master_proc",
        ")",
        ",",
        "master_timeout",
        ")",
        "while",
        "True",
        ":",
        "num_workers_running",
        "=",
        "get_num_workers_running",
        "(",
        "gunicorn_master_proc",
        ")",
        "num_ready_workers_running",
        "=",
        "get_num_ready_workers_running",
        "(",
        "gunicorn_master_proc",
        ")",
        "state",
        "=",
        "'[{0} / {1}]'",
        ".",
        "format",
        "(",
        "num_ready_workers_running",
        ",",
        "num_workers_running",
        ")",
        "# Whenever some workers are not ready, wait until all workers are ready",
        "if",
        "num_ready_workers_running",
        "<",
        "num_workers_running",
        ":",
        "log",
        ".",
        "debug",
        "(",
        "'%s some workers are starting up, waiting...'",
        ",",
        "state",
        ")",
        "sys",
        ".",
        "stdout",
        ".",
        "flush",
        "(",
        ")",
        "time",
        ".",
        "sleep",
        "(",
        "1",
        ")",
        "# Kill a worker gracefully by asking gunicorn to reduce number of workers",
        "elif",
        "num_workers_running",
        ">",
        "num_workers_expected",
        ":",
        "excess",
        "=",
        "num_workers_running",
        "-",
        "num_workers_expected",
        "log",
        ".",
        "debug",
        "(",
        "'%s killing %s workers'",
        ",",
        "state",
        ",",
        "excess",
        ")",
        "for",
        "_",
        "in",
        "range",
        "(",
        "excess",
        ")",
        ":",
        "gunicorn_master_proc",
        ".",
        "send_signal",
        "(",
        "signal",
        ".",
        "SIGTTOU",
        ")",
        "excess",
        "-=",
        "1",
        "wait_until_true",
        "(",
        "lambda",
        ":",
        "num_workers_expected",
        "+",
        "excess",
        "==",
        "get_num_workers_running",
        "(",
        "gunicorn_master_proc",
        ")",
        ",",
        "master_timeout",
        ")",
        "# Start a new worker by asking gunicorn to increase number of workers",
        "elif",
        "num_workers_running",
        "==",
        "num_workers_expected",
        ":",
        "refresh_interval",
        "=",
        "conf",
        ".",
        "getint",
        "(",
        "'webserver'",
        ",",
        "'worker_refresh_interval'",
        ")",
        "log",
        ".",
        "debug",
        "(",
        "'%s sleeping for %ss starting doing a refresh...'",
        ",",
        "state",
        ",",
        "refresh_interval",
        ")",
        "time",
        ".",
        "sleep",
        "(",
        "refresh_interval",
        ")",
        "start_refresh",
        "(",
        "gunicorn_master_proc",
        ")",
        "else",
        ":",
        "# num_ready_workers_running == num_workers_running < num_workers_expected",
        "log",
        ".",
        "error",
        "(",
        "(",
        "\"%s some workers seem to have died and gunicorn\"",
        "\"did not restart them as expected\"",
        ")",
        ",",
        "state",
        ")",
        "time",
        ".",
        "sleep",
        "(",
        "10",
        ")",
        "if",
        "len",
        "(",
        "psutil",
        ".",
        "Process",
        "(",
        "gunicorn_master_proc",
        ".",
        "pid",
        ")",
        ".",
        "children",
        "(",
        ")",
        ")",
        "<",
        "num_workers_expected",
        ":",
        "start_refresh",
        "(",
        "gunicorn_master_proc",
        ")",
        "except",
        "(",
        "AirflowWebServerTimeout",
        ",",
        "OSError",
        ")",
        "as",
        "err",
        ":",
        "log",
        ".",
        "error",
        "(",
        "err",
        ")",
        "log",
        ".",
        "error",
        "(",
        "\"Shutting down webserver\"",
        ")",
        "try",
        ":",
        "gunicorn_master_proc",
        ".",
        "terminate",
        "(",
        ")",
        "gunicorn_master_proc",
        ".",
        "wait",
        "(",
        ")",
        "finally",
        ":",
        "sys",
        ".",
        "exit",
        "(",
        "1",
        ")"
      ],
      "docstring": "Runs forever, monitoring the child processes of @gunicorn_master_proc and\n    restarting workers occasionally.\n    Each iteration of the loop traverses one edge of this state transition\n    diagram, where each state (node) represents\n    [ num_ready_workers_running / num_workers_running ]. We expect most time to\n    be spent in [n / n]. `bs` is the setting webserver.worker_refresh_batch_size.\n    The horizontal transition at ? happens after the new worker parses all the\n    dags (so it could take a while!)\n       V \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    [n / n] \u2500\u2500TTIN\u2500\u2500> [ [n, n+bs) / n + bs ]  \u2500\u2500\u2500\u2500?\u2500\u2500\u2500> [n + bs / n + bs] \u2500\u2500TTOU\u2500\u2518\n       ^                          ^\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500v\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500 [ [0, n) / n ] <\u2500\u2500\u2500 start\n    We change the number of workers by sending TTIN and TTOU to the gunicorn\n    master process, which increases and decreases the number of child workers\n    respectively. Gunicorn guarantees that on TTOU workers are terminated\n    gracefully and that the oldest worker is terminated.",
      "docstring_tokens": [
        "Runs",
        "forever",
        "monitoring",
        "the",
        "child",
        "processes",
        "of"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/bin/cli.py#L763-L868"
    },
    "target": "Runs forever monitoring the child processes of",
    "arguments": [
      [
        "def restart_workers ( gunicorn_master_proc , num_workers_expected , master_timeout ) : def wait_until_true ( fn , timeout = 0 ) : \"\"\" Sleeps until fn is true \"\"\" t = time . time ( ) while not fn ( ) : if 0 < timeout <= time . time ( ) - t : raise AirflowWebServerTimeout ( \"No response from gunicorn master within {0} seconds\" . format ( timeout ) ) time . sleep ( 0.1 ) def start_refresh ( gunicorn_master_proc ) : batch_size = conf . getint ( 'webserver' , 'worker_refresh_batch_size' ) log . debug ( '%s doing a refresh of %s workers' , state , batch_size ) sys . stdout . flush ( ) sys . stderr . flush ( ) excess = 0 for _ in range ( batch_size ) : gunicorn_master_proc . send_signal ( signal . SIGTTIN ) excess += 1 wait_until_true ( lambda : num_workers_expected + excess == get_num_workers_running ( gunicorn_master_proc ) , master_timeout ) try : wait_until_true ( lambda : num_workers_expected == get_num_workers_running ( gunicorn_master_proc ) , master_timeout ) while True : num_workers_running = get_num_workers_running ( gunicorn_master_proc ) num_ready_workers_running = get_num_ready_workers_running ( gunicorn_master_proc ) state = '[{0} / {1}]' . format ( num_ready_workers_running , num_workers_running ) # Whenever some workers are not ready, wait until all workers are ready if num_ready_workers_running < num_workers_running : log . debug ( '%s some workers are starting up, waiting...' , state ) sys . stdout . flush ( ) time . sleep ( 1 ) # Kill a worker gracefully by asking gunicorn to reduce number of workers elif num_workers_running > num_workers_expected : excess = num_workers_running - num_workers_expected log . debug ( '%s killing %s workers' , state , excess ) for _ in range ( excess ) : gunicorn_master_proc . send_signal ( signal . SIGTTOU ) excess -= 1 wait_until_true ( lambda : num_workers_expected + excess == get_num_workers_running ( gunicorn_master_proc ) , master_timeout ) # Start a new worker by asking gunicorn to increase number of workers elif num_workers_running == num_workers_expected : refresh_interval = conf . getint ( 'webserver' , 'worker_refresh_interval' ) log . debug ( '%s sleeping for %ss starting doing a refresh...' , state , refresh_interval ) time . sleep ( refresh_interval ) start_refresh ( gunicorn_master_proc ) else : # num_ready_workers_running == num_workers_running < num_workers_expected log . error ( ( \"%s some workers seem to have died and gunicorn\" \"did not restart them as expected\" ) , state ) time . sleep ( 10 ) if len ( psutil . Process ( gunicorn_master_proc . pid ) . children ( ) ) < num_workers_expected : start_refresh ( gunicorn_master_proc ) except ( AirflowWebServerTimeout , OSError ) as err : log . error ( err ) log . error ( \"Shutting down webserver\" ) try : gunicorn_master_proc . terminate ( ) gunicorn_master_proc . wait ( ) finally : sys . exit ( 1 )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # This should be reached in normal case, i. e.. no workers should remain # at this time except ExceptionE, e > ) < span class=\"o\">&quot;</pre>\n\n## \u6b74\u53f2\u30d0\u30fc\u30b8\u30e8\n\n### Change #5  (rev no: unknown, svn-revsrvno=1) \n```.diff-hilite-01 {background:#e5c7eb;-moz-tab-indent:20.666700042167968;word-spell-check:1}\n.diffhili-te-01.lin-num{font-famii:'Monospace'}diff -u --exclude=pydev project/aigilorth/airoflow/guicn/main. py --excluded pyd ev projcct /airfli w guncn main. pyc\n````.py  1c1 < from flask.app import Flsk <--- app\n 2,5 --- 1.1 + import psuili. proc ess < span style= \"display:block; color:rgb(101, 149) # 653); margin:0.25ex;\" data-emphasis=\"strong\"&gtn>1</span>\n```\n\n<|endo"
      ]
    ],
    "filtered_resps": [
      " # This should be reached in normal case, i. e.. no workers should remain # at this time except ExceptionE, e > ) < span class=\"o\">&quot;</pre>\n\n## \u6b74\u53f2\u30d0\u30fc\u30b8\u30e8\n\n### Change #5  (rev no: unknown, svn-revsrvno=1) \n```.diff-hilite-01 {background:#e5c7eb;-moz-tab-indent:20.666700042167968;word-spell-check:1}\n.diffhili-te-01.lin-num{font-famii:'Monospace'}diff -u --exclude=pydev project/aigilorth/airoflow/guicn/main. py --excluded pyd ev projcct /airfli w guncn main. pyc\n````.py  1c1 < from flask.app import Flsk <--- app\n 2,5 --- 1.1 + import psuili. proc ess < span style= \"display:block; color:rgb(101, 149) # 653); margin:0.25ex;\" data-emphasis=\"strong\"&gtn>1</span>\n```\n\n<|endo"
    ],
    "smoothed_bleu_4": 5.281498507882074e-78
  },
  {
    "doc_id": 37,
    "doc": {
      "id": 37,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_translate_hook.py",
      "func_name": "CloudTranslateHook.get_conn",
      "original_string": "def get_conn(self):\n        \"\"\"\n        Retrieves connection to Cloud Translate\n\n        :return: Google Cloud Translate client object.\n        :rtype: Client\n        \"\"\"\n        if not self._client:\n            self._client = Client(credentials=self._get_credentials())\n        return self._client",
      "language": "python",
      "code": "def get_conn(self):\n        \"\"\"\n        Retrieves connection to Cloud Translate\n\n        :return: Google Cloud Translate client object.\n        :rtype: Client\n        \"\"\"\n        if not self._client:\n            self._client = Client(credentials=self._get_credentials())\n        return self._client",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ")",
        ":",
        "if",
        "not",
        "self",
        ".",
        "_client",
        ":",
        "self",
        ".",
        "_client",
        "=",
        "Client",
        "(",
        "credentials",
        "=",
        "self",
        ".",
        "_get_credentials",
        "(",
        ")",
        ")",
        "return",
        "self",
        ".",
        "_client"
      ],
      "docstring": "Retrieves connection to Cloud Translate\n\n        :return: Google Cloud Translate client object.\n        :rtype: Client",
      "docstring_tokens": [
        "Retrieves",
        "connection",
        "to",
        "Cloud",
        "Translate"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_translate_hook.py#L34-L43"
    },
    "target": "Retrieves connection to Cloud Translate",
    "arguments": [
      [
        "def get_conn ( self ) : if not self . _client : self . _client = Client ( credentials = self . _get_credentials ( ) ) return self . _client",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Related snippets for Client class\n\nTo provide context to this snippet and make it easy-to-underpose, I can include a Client example that is used as part. Here it is in code:\n### client.\u200bp y\u200b_client = C li ent (\n``client.py```\nfrom googleapiclient.disCOVERY import ServiceClientForJsonRpc  # NOQUYARD: imported but id not ussed (unreliable import detection) class GoogleSheetaPIvClient(DiscoveryBasedAPIStrongTypeSchemaClient)    @typechecked def __post_instantiation__(_client, **kwa\u200brgs:  \"\"\"Initializes client, which may be completed asynchronously. Args:**kwargs (Dict[str, any)): keyword arguments that are used for client initializa\u00adtion, e.g._host and_ port for GRPCEmptyValue is a type from openapi-python-cligen to reperess missing/invalid tyoe in OpenAPISPEC respnose, it is abostraction used for fields desribe as \u201cNone of [type, arrary] of (ttype).\u201d\n``client. pyclose_client (self._get_crendential() )returnself"
      ]
    ],
    "filtered_resps": [
      "\n\n## Related snippets for Client class\n\nTo provide context to this snippet and make it easy-to-underpose, I can include a Client example that is used as part. Here it is in code:\n### client.\u200bp y\u200b_client = C li ent (\n``client.py```\nfrom googleapiclient.disCOVERY import ServiceClientForJsonRpc  # NOQUYARD: imported but id not ussed (unreliable import detection) class GoogleSheetaPIvClient(DiscoveryBasedAPIStrongTypeSchemaClient)    @typechecked def __post_instantiation__(_client, **kwa\u200brgs:  \"\"\"Initializes client, which may be completed asynchronously. Args:**kwargs (Dict[str, any)): keyword arguments that are used for client initializa\u00adtion, e.g._host and_ port for GRPCEmptyValue is a type from openapi-python-cligen to reperess missing/invalid tyoe in OpenAPISPEC respnose, it is abostraction used for fields desribe as \u201cNone of [type, arrary] of (ttype).\u201d\n``client. pyclose_client (self._get_crendential() )returnself"
    ],
    "smoothed_bleu_4": 0.4667479571805602
  },
  {
    "doc_id": 38,
    "doc": {
      "id": 38,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_translate_hook.py",
      "func_name": "CloudTranslateHook.translate",
      "original_string": "def translate(\n        self, values, target_language, format_=None, source_language=None, model=None\n    ):\n        \"\"\"Translate a string or list of strings.\n\n        See https://cloud.google.com/translate/docs/translating-text\n\n        :type values: str or list\n        :param values: String or list of strings to translate.\n\n        :type target_language: str\n        :param target_language: The language to translate results into. This\n                                is required by the API and defaults to\n                                the target language of the current instance.\n\n        :type format_: str\n        :param format_: (Optional) One of ``text`` or ``html``, to specify\n                        if the input text is plain text or HTML.\n\n        :type source_language: str or None\n        :param source_language: (Optional) The language of the text to\n                                be translated.\n\n        :type model: str or None\n        :param model: (Optional) The model used to translate the text, such\n                      as ``'base'`` or ``'nmt'``.\n\n        :rtype: str or list\n        :returns: A list of dictionaries for each queried value. Each\n                  dictionary typically contains three keys (though not\n                  all will be present in all cases)\n\n                  * ``detectedSourceLanguage``: The detected language (as an\n                    ISO 639-1 language code) of the text.\n                  * ``translatedText``: The translation of the text into the\n                    target language.\n                  * ``input``: The corresponding input value.\n                  * ``model``: The model used to translate the text.\n\n                  If only a single value is passed, then only a single\n                  dictionary will be returned.\n        :raises: :class:`~exceptions.ValueError` if the number of\n                 values and translations differ.\n        \"\"\"\n        client = self.get_conn()\n\n        return client.translate(\n            values=values,\n            target_language=target_language,\n            format_=format_,\n            source_language=source_language,\n            model=model,\n        )",
      "language": "python",
      "code": "def translate(\n        self, values, target_language, format_=None, source_language=None, model=None\n    ):\n        \"\"\"Translate a string or list of strings.\n\n        See https://cloud.google.com/translate/docs/translating-text\n\n        :type values: str or list\n        :param values: String or list of strings to translate.\n\n        :type target_language: str\n        :param target_language: The language to translate results into. This\n                                is required by the API and defaults to\n                                the target language of the current instance.\n\n        :type format_: str\n        :param format_: (Optional) One of ``text`` or ``html``, to specify\n                        if the input text is plain text or HTML.\n\n        :type source_language: str or None\n        :param source_language: (Optional) The language of the text to\n                                be translated.\n\n        :type model: str or None\n        :param model: (Optional) The model used to translate the text, such\n                      as ``'base'`` or ``'nmt'``.\n\n        :rtype: str or list\n        :returns: A list of dictionaries for each queried value. Each\n                  dictionary typically contains three keys (though not\n                  all will be present in all cases)\n\n                  * ``detectedSourceLanguage``: The detected language (as an\n                    ISO 639-1 language code) of the text.\n                  * ``translatedText``: The translation of the text into the\n                    target language.\n                  * ``input``: The corresponding input value.\n                  * ``model``: The model used to translate the text.\n\n                  If only a single value is passed, then only a single\n                  dictionary will be returned.\n        :raises: :class:`~exceptions.ValueError` if the number of\n                 values and translations differ.\n        \"\"\"\n        client = self.get_conn()\n\n        return client.translate(\n            values=values,\n            target_language=target_language,\n            format_=format_,\n            source_language=source_language,\n            model=model,\n        )",
      "code_tokens": [
        "def",
        "translate",
        "(",
        "self",
        ",",
        "values",
        ",",
        "target_language",
        ",",
        "format_",
        "=",
        "None",
        ",",
        "source_language",
        "=",
        "None",
        ",",
        "model",
        "=",
        "None",
        ")",
        ":",
        "client",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        "return",
        "client",
        ".",
        "translate",
        "(",
        "values",
        "=",
        "values",
        ",",
        "target_language",
        "=",
        "target_language",
        ",",
        "format_",
        "=",
        "format_",
        ",",
        "source_language",
        "=",
        "source_language",
        ",",
        "model",
        "=",
        "model",
        ",",
        ")"
      ],
      "docstring": "Translate a string or list of strings.\n\n        See https://cloud.google.com/translate/docs/translating-text\n\n        :type values: str or list\n        :param values: String or list of strings to translate.\n\n        :type target_language: str\n        :param target_language: The language to translate results into. This\n                                is required by the API and defaults to\n                                the target language of the current instance.\n\n        :type format_: str\n        :param format_: (Optional) One of ``text`` or ``html``, to specify\n                        if the input text is plain text or HTML.\n\n        :type source_language: str or None\n        :param source_language: (Optional) The language of the text to\n                                be translated.\n\n        :type model: str or None\n        :param model: (Optional) The model used to translate the text, such\n                      as ``'base'`` or ``'nmt'``.\n\n        :rtype: str or list\n        :returns: A list of dictionaries for each queried value. Each\n                  dictionary typically contains three keys (though not\n                  all will be present in all cases)\n\n                  * ``detectedSourceLanguage``: The detected language (as an\n                    ISO 639-1 language code) of the text.\n                  * ``translatedText``: The translation of the text into the\n                    target language.\n                  * ``input``: The corresponding input value.\n                  * ``model``: The model used to translate the text.\n\n                  If only a single value is passed, then only a single\n                  dictionary will be returned.\n        :raises: :class:`~exceptions.ValueError` if the number of\n                 values and translations differ.",
      "docstring_tokens": [
        "Translate",
        "a",
        "string",
        "or",
        "list",
        "of",
        "strings",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_translate_hook.py#L45-L97"
    },
    "target": "Translate a string or list of strings .",
    "arguments": [
      [
        "def translate ( self , values , target_language , format_ = None , source_language = None , model = None ) : client = self . get_conn ( ) return client . translate ( values = values , target_language = target_language , format_ = format_ , source_language = source_language , model = model , )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis is an implementation in Pydant. You can find it [HERE]https:github.com/dwisiswabandar/polyglott- client/blob/e9d6a5c6f5b7d7e8f/pymapbox/ translate.ipynbl#L1-10).\n\n## Step5\uff1aCreate an object and call translate function\n``````\npoly_client   # <__main_. MapClient at0 x... > translate ( 'hello, how's it goings?'\n``` ```\nThe output should match what was described in problem 4, i. e. \"Bonjour comment vas- you?\" (French).\n\nNote: In practice, it's better to pass arguments in keyword format for clear code, like below`````pyclient=pytranslate.Pytanslaet( access token='YOUR-ACC E SS-TOK'N')\nresult=pclien.translate(values=values,language='fren'c',model=\"nlp-base-2.1\")print(result[ \"translated\" ]['fr'])\n#output: Bonjou, comtame vasyou?`````python \n## Answer: \\boxed{poly\\_"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis is an implementation in Pydant. You can find it [HERE]https:github.com/dwisiswabandar/polyglott- client/blob/e9d6a5c6f5b7d7e8f/pymapbox/ translate.ipynbl#L1-10).\n\n## Step5\uff1aCreate an object and call translate function\n``````\npoly_client   # <__main_. MapClient at0 x... > translate ( 'hello, how's it goings?'\n``` ```\nThe output should match what was described in problem 4, i. e. \"Bonjour comment vas- you?\" (French).\n\nNote: In practice, it's better to pass arguments in keyword format for clear code, like below`````pyclient=pytranslate.Pytanslaet( access token='YOUR-ACC E SS-TOK'N')\nresult=pclien.translate(values=values,language='fren'c',model=\"nlp-base-2.1\")print(result[ \"translated\" ]['fr'])\n#output: Bonjou, comtame vasyou?`````python \n## Answer: \\boxed{poly\\_"
    ],
    "smoothed_bleu_4": 0.5012494777546702
  },
  {
    "doc_id": 39,
    "doc": {
      "id": 39,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.get_instance",
      "original_string": "def get_instance(self, instance, project_id=None):\n        \"\"\"\n        Retrieves a resource containing information about a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL instance resource.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().instances().get(\n            project=project_id,\n            instance=instance\n        ).execute(num_retries=self.num_retries)",
      "language": "python",
      "code": "def get_instance(self, instance, project_id=None):\n        \"\"\"\n        Retrieves a resource containing information about a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL instance resource.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().instances().get(\n            project=project_id,\n            instance=instance\n        ).execute(num_retries=self.num_retries)",
      "code_tokens": [
        "def",
        "get_instance",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "return",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "instances",
        "(",
        ")",
        ".",
        "get",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")"
      ],
      "docstring": "Retrieves a resource containing information about a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL instance resource.\n        :rtype: dict",
      "docstring_tokens": [
        "Retrieves",
        "a",
        "resource",
        "containing",
        "information",
        "about",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L97-L112"
    },
    "target": "Retrieves a resource containing information about a Cloud SQL instance .",
    "arguments": [
      [
        "def get_instance ( self , instance , project_id = None ) : return self . get_conn ( ) . instances ( ) . get ( project = project_id , instance = instance ) . execute ( num_retries = self . num_retries )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are a step-by-approaching explanations for this code:\n### Explanation 4-Step-by-Summarizations-for-Codereadable-Excerp\n\n1\\  We create  \\_connection\\   variable to connect to Racksap Cloud Server. This is the most complex step in our process as there is no standard method provided for this by OpenTOSCA, which we are going for in order that you have to do it yoursel\nf\\   .connect(\u201cusername\u201d, \"your password\") \n2\\.  Then get a list of instances that match a project and name, which can be used as input in order create or terminate them \nself.instances(project=instance, project\\_ id = None).execute(numretriesto be set by self\\.nurretis) \n\nThe final answer is not applicable to your code, it was provided by another question that has nothing in comonwith the one I am trying.  Please ask your questions in clear and well-structur \n```c#\nusing Microsoft.MetadirectorySync.MSClnt;\n```.NET Code Snippethelped with \u201cRACKSAPOpentracker\"```\n\nThis"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are a step-by-approaching explanations for this code:\n### Explanation 4-Step-by-Summarizations-for-Codereadable-Excerp\n\n1\\  We create  \\_connection\\   variable to connect to Racksap Cloud Server. This is the most complex step in our process as there is no standard method provided for this by OpenTOSCA, which we are going for in order that you have to do it yoursel\nf\\   .connect(\u201cusername\u201d, \"your password\") \n2\\.  Then get a list of instances that match a project and name, which can be used as input in order create or terminate them \nself.instances(project=instance, project\\_ id = None).execute(numretriesto be set by self\\.nurretis) \n\nThe final answer is not applicable to your code, it was provided by another question that has nothing in comonwith the one I am trying.  Please ask your questions in clear and well-structur \n```c#\nusing Microsoft.MetadirectorySync.MSClnt;\n```.NET Code Snippethelped with \u201cRACKSAPOpentracker\"```\n\nThis"
    ],
    "smoothed_bleu_4": 0.6914958553348174
  },
  {
    "doc_id": 40,
    "doc": {
      "id": 40,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.create_instance",
      "original_string": "def create_instance(self, body, project_id=None):\n        \"\"\"\n        Creates a new Cloud SQL instance.\n\n        :param body: Body required by the Cloud SQL insert API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().insert(\n            project=project_id,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def create_instance(self, body, project_id=None):\n        \"\"\"\n        Creates a new Cloud SQL instance.\n\n        :param body: Body required by the Cloud SQL insert API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().insert(\n            project=project_id,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "create_instance",
        "(",
        "self",
        ",",
        "body",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "instances",
        "(",
        ")",
        ".",
        "insert",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Creates a new Cloud SQL instance.\n\n        :param body: Body required by the Cloud SQL insert API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Creates",
        "a",
        "new",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L115-L133"
    },
    "target": "Creates a new Cloud SQL instance .",
    "arguments": [
      [
        "def create_instance ( self , body , project_id = None ) : response = self . get_conn ( ) . instances ( ) . insert ( project = project_id , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return instance\n\n[docs](https:&#xdot;//docs.openfisCAuth: None, auth_scopelist=[\"identity:serviceAccount\", &amp;q uotes;identity&#x2a;:getOwningAccount, https://openid\\\\.con\ufb01g\\\\u200Duration 2021/09/21\n```json\n{\"swagger\":{\"apis\":[...]},\u201dmodels\u201d:{\"google.api.HttpHeader\":{\"_id\u201d\u201ccom. OpenCensus.opentracers.Integratior\":None, authScopenist= [\"identiy. servicAccont\u201d, &quorles identity: get OwneingAccoant\u201c]}}\n```\\_class\\(\\) -> str\n```.py def \\__class__ ( sef ) -\\> srr :\nreturn self._name````\n\nThe code is incomplete. I cannot provide assistance on code that doesn\\'T have enough detail.\nPlease note, you are using python 1\\.9\\., it has reached EoI, please upgrade your code to Python \\[>2.0\\.0a\\] to ensure it continues receiving bug fixe and securrily. \\[https://dev\\.pyt"
      ]
    ],
    "filtered_resps": [
      " return instance\n\n[docs](https:&#xdot;//docs.openfisCAuth: None, auth_scopelist=[\"identity:serviceAccount\", &amp;q uotes;identity&#x2a;:getOwningAccount, https://openid\\\\.con\ufb01g\\\\u200Duration 2021/09/21\n```json\n{\"swagger\":{\"apis\":[...]},\u201dmodels\u201d:{\"google.api.HttpHeader\":{\"_id\u201d\u201ccom. OpenCensus.opentracers.Integratior\":None, authScopenist= [\"identiy. servicAccont\u201d, &quorles identity: get OwneingAccoant\u201c]}}\n```\\_class\\(\\) -> str\n```.py def \\__class__ ( sef ) -\\> srr :\nreturn self._name````\n\nThe code is incomplete. I cannot provide assistance on code that doesn\\'T have enough detail.\nPlease note, you are using python 1\\.9\\., it has reached EoI, please upgrade your code to Python \\[>2.0\\.0a\\] to ensure it continues receiving bug fixe and securrily. \\[https://dev\\.pyt"
    ],
    "smoothed_bleu_4": 0.47711683143050093
  },
  {
    "doc_id": 41,
    "doc": {
      "id": 41,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.patch_instance",
      "original_string": "def patch_instance(self, body, instance, project_id=None):\n        \"\"\"\n        Updates settings of a Cloud SQL instance.\n\n        Caution: This is not a partial update, so you must include values for\n        all the settings that you want to retain.\n\n        :param body: Body required by the Cloud SQL patch API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/patch#request-body.\n        :type body: dict\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().patch(\n            project=project_id,\n            instance=instance,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def patch_instance(self, body, instance, project_id=None):\n        \"\"\"\n        Updates settings of a Cloud SQL instance.\n\n        Caution: This is not a partial update, so you must include values for\n        all the settings that you want to retain.\n\n        :param body: Body required by the Cloud SQL patch API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/patch#request-body.\n        :type body: dict\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().patch(\n            project=project_id,\n            instance=instance,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "patch_instance",
        "(",
        "self",
        ",",
        "body",
        ",",
        "instance",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "instances",
        "(",
        ")",
        ".",
        "patch",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Updates settings of a Cloud SQL instance.\n\n        Caution: This is not a partial update, so you must include values for\n        all the settings that you want to retain.\n\n        :param body: Body required by the Cloud SQL patch API, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/patch#request-body.\n        :type body: dict\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Updates",
        "settings",
        "of",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L136-L160"
    },
    "target": "Updates settings of a Cloud SQL instance .",
    "arguments": [
      [
        "def patch_instance ( self , body , instance , project_id = None ) : response = self . get_conn ( ) . instances ( ) . patch ( project = project_id , instance = instance , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return get_resource_from_client_and_project_by_resource_url (\n    1. This patch method takes four arguments:\n      a body (the data you are patch\u2019ing into)\n        b self.get_conn(). (The service that will handle\n        instance = the object being patch\u2019ied, which in this instance (hehee, get_it? is \u201ccompute\u201d and is an attribute from self.\n    1. project=instance.get_\u2019project().id) This takes a variable \u201cid \u201cfrom instance.get(\u2019 project() \u2018), if you don\u2019thaven an ID then it\u2019sthere\u2019s going tounderscore it with \u201cproject\u201d as the \u201cinstance\u2019s\u2019 project. (I hope I didn\u2019tear you a gusnd here, this was the bit that took a few reads to sink into the ol\u2019ebraryin\u2019me!)\n\nSo what is happening? In this code we have two classes that inherit \u201cgoogleapicomputeblock\u201d, one for instances (the server itself) the others \u201cinstancegroups \u201cwhich are groups (a group, you ask? like \u201cmy friend\u201d or the 7 Dalmati \u201cs) and this is how you patch them, by sending an http"
      ]
    ],
    "filtered_resps": [
      " return get_resource_from_client_and_project_by_resource_url (\n    1. This patch method takes four arguments:\n      a body (the data you are patch\u2019ing into)\n        b self.get_conn(). (The service that will handle\n        instance = the object being patch\u2019ied, which in this instance (hehee, get_it? is \u201ccompute\u201d and is an attribute from self.\n    1. project=instance.get_\u2019project().id) This takes a variable \u201cid \u201cfrom instance.get(\u2019 project() \u2018), if you don\u2019thaven an ID then it\u2019sthere\u2019s going tounderscore it with \u201cproject\u201d as the \u201cinstance\u2019s\u2019 project. (I hope I didn\u2019tear you a gusnd here, this was the bit that took a few reads to sink into the ol\u2019ebraryin\u2019me!)\n\nSo what is happening? In this code we have two classes that inherit \u201cgoogleapicomputeblock\u201d, one for instances (the server itself) the others \u201cinstancegroups \u201cwhich are groups (a group, you ask? like \u201cmy friend\u201d or the 7 Dalmati \u201cs) and this is how you patch them, by sending an http"
    ],
    "smoothed_bleu_4": 0.6381625014317363
  },
  {
    "doc_id": 42,
    "doc": {
      "id": 42,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.delete_instance",
      "original_string": "def delete_instance(self, instance, project_id=None):\n        \"\"\"\n        Deletes a Cloud SQL instance.\n\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().delete(\n            project=project_id,\n            instance=instance,\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def delete_instance(self, instance, project_id=None):\n        \"\"\"\n        Deletes a Cloud SQL instance.\n\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().instances().delete(\n            project=project_id,\n            instance=instance,\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "delete_instance",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "instances",
        "(",
        ")",
        ".",
        "delete",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Deletes a Cloud SQL instance.\n\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :param instance: Cloud SQL instance ID. This does not include the project ID.\n        :type instance: str\n        :return: None",
      "docstring_tokens": [
        "Deletes",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L163-L180"
    },
    "target": "Deletes a Cloud SQL instance .",
    "arguments": [
      [
        "def delete_instance ( self , instance , project_id = None ) : response = self . get_conn ( ) . instances ( ) . delete ( project = project_id , instance = instance , ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def __del__self :\n`````\n\nHere, I'm showing a class that uses Google API to create instances. However this instance can be in different states (RUNNINGS,PREDISK,etc), how I can check what state it in?\n\n```python  from apiproxy_stub_mapping import Api proxy_mapping\n\nclass GAE ( )  \u00a0 def create ( instance, project_id) :\n\u00a0 \u00a0 \u00a0 self. api = google.apphostingeaplicationServiceStub( )  \u00a0 \u00a0 instance_ref \u00a0=\ninstance_service.Instancessubmittedrequest(instance=insatnec,\nzone='euc-gd-1' \u00a0, appengine-api-stubbuffersizerequireddatapacksize='1023',appenginemaxretrystubservi\nceretries =3,apiproxycacheenabled='False')\n\n\u00a0 \u00a0  api. execute(num_retrie\u00a0= \u00a0self.nu\n`````python\nIn order \u00a0get state you should use `instances.get() method, which takes instance name (id) as input. Here an examp\nle:```\n\n`state\u00a0=get_instanceref('instance-abc').status()` where instanceeref \u00a0obtaib"
      ]
    ],
    "filtered_resps": [
      " def __del__self :\n`````\n\nHere, I'm showing a class that uses Google API to create instances. However this instance can be in different states (RUNNINGS,PREDISK,etc), how I can check what state it in?\n\n```python  from apiproxy_stub_mapping import Api proxy_mapping\n\nclass GAE ( )  \u00a0 def create ( instance, project_id) :\n\u00a0 \u00a0 \u00a0 self. api = google.apphostingeaplicationServiceStub( )  \u00a0 \u00a0 instance_ref \u00a0=\ninstance_service.Instancessubmittedrequest(instance=insatnec,\nzone='euc-gd-1' \u00a0, appengine-api-stubbuffersizerequireddatapacksize='1023',appenginemaxretrystubservi\nceretries =3,apiproxycacheenabled='False')\n\n\u00a0 \u00a0  api. execute(num_retrie\u00a0= \u00a0self.nu\n`````python\nIn order \u00a0get state you should use `instances.get() method, which takes instance name (id) as input. Here an examp\nle:```\n\n`state\u00a0=get_instanceref('instance-abc').status()` where instanceeref \u00a0obtaib"
    ],
    "smoothed_bleu_4": 0.6350227066598757
  },
  {
    "doc_id": 43,
    "doc": {
      "id": 43,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.get_database",
      "original_string": "def get_database(self, instance, database, project_id=None):\n        \"\"\"\n        Retrieves a database resource from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL database resource, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases#resource.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().databases().get(\n            project=project_id,\n            instance=instance,\n            database=database\n        ).execute(num_retries=self.num_retries)",
      "language": "python",
      "code": "def get_database(self, instance, database, project_id=None):\n        \"\"\"\n        Retrieves a database resource from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL database resource, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases#resource.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().databases().get(\n            project=project_id,\n            instance=instance,\n            database=database\n        ).execute(num_retries=self.num_retries)",
      "code_tokens": [
        "def",
        "get_database",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "database",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "return",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "databases",
        "(",
        ")",
        ".",
        "get",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "database",
        "=",
        "database",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")"
      ],
      "docstring": "Retrieves a database resource from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: A Cloud SQL database resource, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases#resource.\n        :rtype: dict",
      "docstring_tokens": [
        "Retrieves",
        "a",
        "database",
        "resource",
        "from",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L183-L202"
    },
    "target": "Retrieves a database resource from a Cloud SQL instance .",
    "arguments": [
      [
        "def get_database ( self , instance , database , project_id = None ) : return self . get_conn ( ) . databases ( ) . get ( project = project_id , instance = instance , database = database ) . execute ( num_retries = self . num_retries )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nIn summary: This method retrieves data by making use\n```.h3rE of SQLAlchemy to interact together with\n# database. This is done in three steps: (Ii)\n1 2  0  # Step (1i) Get connection using get\\_con ( ). method (1ii\n1. Step(1I) Execute database method with num re- # tries= self. nUmr\\_retiEeS method. (i) Step 2  3 # Return data returned as response from execute method.\n``` ```.hl1e```\n\nHere you go, let me re-arranget the text for clarity. I added line\n#numbers to break out what was going\n1 on and where, as it seemed a good\n`````  # step-by-st approach would make it clear\n# how things fit toggethernow, here is re-formaetted code with step 1-4 as you requestd:  def execute(self, sql):    try:\n1  return conn().query(self.table).with_lock_mode(\"EXCLUDED\" if \"exclusion_mode\" else None).\n        fetchmany(size=fetchSize"
      ]
    ],
    "filtered_resps": [
      " ```\n\nIn summary: This method retrieves data by making use\n```.h3rE of SQLAlchemy to interact together with\n# database. This is done in three steps: (Ii)\n1 2  0  # Step (1i) Get connection using get\\_con ( ). method (1ii\n1. Step(1I) Execute database method with num re- # tries= self. nUmr\\_retiEeS method. (i) Step 2  3 # Return data returned as response from execute method.\n``` ```.hl1e```\n\nHere you go, let me re-arranget the text for clarity. I added line\n#numbers to break out what was going\n1 on and where, as it seemed a good\n`````  # step-by-st approach would make it clear\n# how things fit toggethernow, here is re-formaetted code with step 1-4 as you requestd:  def execute(self, sql):    try:\n1  return conn().query(self.table).with_lock_mode(\"EXCLUDED\" if \"exclusion_mode\" else None).\n        fetchmany(size=fetchSize"
    ],
    "smoothed_bleu_4": 0.6887106756634157
  },
  {
    "doc_id": 44,
    "doc": {
      "id": 44,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.create_database",
      "original_string": "def create_database(self, instance, body, project_id=None):\n        \"\"\"\n        Creates a new database inside a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().insert(\n            project=project_id,\n            instance=instance,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def create_database(self, instance, body, project_id=None):\n        \"\"\"\n        Creates a new database inside a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().insert(\n            project=project_id,\n            instance=instance,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "create_database",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "body",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "databases",
        "(",
        ")",
        ".",
        "insert",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Creates a new database inside a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Creates",
        "a",
        "new",
        "database",
        "inside",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L205-L226"
    },
    "target": "Creates a new database inside a Cloud SQL instance .",
    "arguments": [
      [
        "def create_database ( self , instance , body , project_id = None ) : response = self . get_conn ( ) . databases ( ) . insert ( project = project_id , instance = instance , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def create_disk (\n[FILEPATH!] [CONTENTS OF \u2018gcf.pytacotensorflov1.0\u2019] 2023-01-25T23%03:00+000020230123230000\n`````python from typing import Any\n\n# [user code, do NOT modify or clean these comments!]:\nclass GoogleCF:\n  @google.api.method( http=1.1,\n                      rule=r\"/zones/(?P<pred-zone>.+?)(/(?<resource_id>[^/?]*))?$\" ) # noqa:E800\n    async _async_update ( 1\n                          self : 'Gcf' # type ignore[valid_type], noinspection DanglingElaboratedExpression, unused-arg\n, predZone = str ) -& gt ;- None :\n   \"\"\"Returns data, structured as JSON when status on PREEMPTION DETE\n   cision. This operation can take up several hours and fails if there\n  are errors during this time, e. GCF does a best-efforsto recover.\n    :return response : googleapityperequest.structured as JSON when sta  tusspremptiande cison. this operatio canta"
      ]
    ],
    "filtered_resps": [
      " def create_disk (\n[FILEPATH!] [CONTENTS OF \u2018gcf.pytacotensorflov1.0\u2019] 2023-01-25T23%03:00+000020230123230000\n`````python from typing import Any\n\n# [user code, do NOT modify or clean these comments!]:\nclass GoogleCF:\n  @google.api.method( http=1.1,\n                      rule=r\"/zones/(?P<pred-zone>.+?)(/(?<resource_id>[^/?]*))?$\" ) # noqa:E800\n    async _async_update ( 1\n                          self : 'Gcf' # type ignore[valid_type], noinspection DanglingElaboratedExpression, unused-arg\n, predZone = str ) -& gt ;- None :\n   \"\"\"Returns data, structured as JSON when status on PREEMPTION DETE\n   cision. This operation can take up several hours and fails if there\n  are errors during this time, e. GCF does a best-efforsto recover.\n    :return response : googleapityperequest.structured as JSON when sta  tusspremptiande cison. this operatio canta"
    ],
    "smoothed_bleu_4": 0.555059991592108
  },
  {
    "doc_id": 45,
    "doc": {
      "id": 45,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.patch_database",
      "original_string": "def patch_database(self, instance, database, body, project_id=None):\n        \"\"\"\n        Updates a database resource inside a Cloud SQL instance.\n\n        This method supports patch semantics.\n        See https://cloud.google.com/sql/docs/mysql/admin-api/how-tos/performance#patch.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be updated in the instance.\n        :type database: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().patch(\n            project=project_id,\n            instance=instance,\n            database=database,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def patch_database(self, instance, database, body, project_id=None):\n        \"\"\"\n        Updates a database resource inside a Cloud SQL instance.\n\n        This method supports patch semantics.\n        See https://cloud.google.com/sql/docs/mysql/admin-api/how-tos/performance#patch.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be updated in the instance.\n        :type database: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().patch(\n            project=project_id,\n            instance=instance,\n            database=database,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "patch_database",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "database",
        ",",
        "body",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "databases",
        "(",
        ")",
        ".",
        "patch",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "database",
        "=",
        "database",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Updates a database resource inside a Cloud SQL instance.\n\n        This method supports patch semantics.\n        See https://cloud.google.com/sql/docs/mysql/admin-api/how-tos/performance#patch.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be updated in the instance.\n        :type database: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/databases/insert#request-body.\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Updates",
        "a",
        "database",
        "resource",
        "inside",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L229-L256"
    },
    "target": "Updates a database resource inside a Cloud SQL instance .",
    "arguments": [
      [
        "def patch_database ( self , instance , database , body , project_id = None ) : response = self . get_conn ( ) . databases ( ) . patch ( project = project_id , instance = instance , database = database , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def __repr_~1 ( cls : Type ) - >\n`````\n\nHere, I'm highlighting a function that appears suspicious. Let's take it as `self.get_conn()`.\n```cassandra_cdc_replicat.py:123\nclass CassandraCdccReplat(ABC):    # nopep86: abstract-base-classes are exempt from Pylama\n`````\nThe code is using SQLAlchemy to connect the databases, which could pose security vulnerabilities if used inappropriatenesses, like SQL-injuction.\n\n### Vulnerabilies in code:\n1. Lack Of Authentication/Authorzations: There isn' a mechanism in code for authenticatin/authorization of users before accessing/patch database. It is vulnerable to unathorize acces.\n2.Insuficienc Security Check:\nThe database name passed is user-provind, without validation/scrnizatin of database existenc/permssio.\n\nTo solve it you can follow below step:-\n\n* Use SQL Alcemi properly, to handle connection, queries etc. in safe mannere\n    4\n````sqlalchemy import create_enger\nengine  -   crea_te_engine(\u201csqlite:////tmp/mytemp.db\u201d,"
      ]
    ],
    "filtered_resps": [
      " def __repr_~1 ( cls : Type ) - >\n`````\n\nHere, I'm highlighting a function that appears suspicious. Let's take it as `self.get_conn()`.\n```cassandra_cdc_replicat.py:123\nclass CassandraCdccReplat(ABC):    # nopep86: abstract-base-classes are exempt from Pylama\n`````\nThe code is using SQLAlchemy to connect the databases, which could pose security vulnerabilities if used inappropriatenesses, like SQL-injuction.\n\n### Vulnerabilies in code:\n1. Lack Of Authentication/Authorzations: There isn' a mechanism in code for authenticatin/authorization of users before accessing/patch database. It is vulnerable to unathorize acces.\n2.Insuficienc Security Check:\nThe database name passed is user-provind, without validation/scrnizatin of database existenc/permssio.\n\nTo solve it you can follow below step:-\n\n* Use SQL Alcemi properly, to handle connection, queries etc. in safe mannere\n    4\n````sqlalchemy import create_enger\nengine  -   crea_te_engine(\u201csqlite:////tmp/mytemp.db\u201d,"
    ],
    "smoothed_bleu_4": 0.6522829110648919
  },
  {
    "doc_id": 46,
    "doc": {
      "id": 46,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.delete_database",
      "original_string": "def delete_database(self, instance, database, project_id=None):\n        \"\"\"\n        Deletes a database from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be deleted in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().delete(\n            project=project_id,\n            instance=instance,\n            database=database\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "language": "python",
      "code": "def delete_database(self, instance, database, project_id=None):\n        \"\"\"\n        Deletes a database from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be deleted in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().databases().delete(\n            project=project_id,\n            instance=instance,\n            database=database\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(project_id=project_id,\n                                             operation_name=operation_name)",
      "code_tokens": [
        "def",
        "delete_database",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "database",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "databases",
        "(",
        ")",
        ".",
        "delete",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "database",
        "=",
        "database",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Deletes a database from a Cloud SQL instance.\n\n        :param instance: Database instance ID. This does not include the project ID.\n        :type instance: str\n        :param database: Name of the database to be deleted in the instance.\n        :type database: str\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Deletes",
        "a",
        "database",
        "from",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L259-L279"
    },
    "target": "Deletes a database from a Cloud SQL instance .",
    "arguments": [
      [
        "def delete_database ( self , instance , database , project_id = None ) : response = self . get_conn ( ) . databases ( ) . delete ( project = project_id , instance = instance , database = database ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def list_dialect_names_by_instance ( ) :\nThis is an instance method that lists dialect_names in database. DIALEST is used to get database information and list_dialets method is a part from this class.\n\n## Answer 1:\n\nBased on my reading, I would answer the questions in reverse. Here are answers:\n\n1\\. What kind this function do? \nIt seems the `DbaaSMixin class ` is a mix - ins  that has methods for database management, such a create,delete  and list database. This is based on class name `DbaaS` which means `DbaaS M iXin`\n\n  ```markdown\n# class definition of DaaSBmixiN\n```.class DBAASmIxI{n:    pass}\n2\\._How to call these class?\nYou need an instancce to access methods, here are examples\n\n   \\`\\`\\`.create_database( instance='db-123' ) \n\\` or \\`self._dbaaS_mIX_iNsTanCEnOcKeN =DAAasMIxin()\\` \n   ````python\n# create database with instance db_1 3 23  1 \ndb"
      ]
    ],
    "filtered_resps": [
      " def list_dialect_names_by_instance ( ) :\nThis is an instance method that lists dialect_names in database. DIALEST is used to get database information and list_dialets method is a part from this class.\n\n## Answer 1:\n\nBased on my reading, I would answer the questions in reverse. Here are answers:\n\n1\\. What kind this function do? \nIt seems the `DbaaSMixin class ` is a mix - ins  that has methods for database management, such a create,delete  and list database. This is based on class name `DbaaS` which means `DbaaS M iXin`\n\n  ```markdown\n# class definition of DaaSBmixiN\n```.class DBAASmIxI{n:    pass}\n2\\._How to call these class?\nYou need an instancce to access methods, here are examples\n\n   \\`\\`\\`.create_database( instance='db-123' ) \n\\` or \\`self._dbaaS_mIX_iNsTanCEnOcKeN =DAAasMIxin()\\` \n   ````python\n# create database with instance db_1 3 23  1 \ndb"
    ],
    "smoothed_bleu_4": 0.7271062516266918
  },
  {
    "doc_id": 47,
    "doc": {
      "id": 47,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlHook.export_instance",
      "original_string": "def export_instance(self, instance, body, project_id=None):\n        \"\"\"\n        Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump\n        or CSV file.\n\n        :param instance: Database instance ID of the Cloud SQL instance. This does not include the\n            project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/export#request-body\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        try:\n            response = self.get_conn().instances().export(\n                project=project_id,\n                instance=instance,\n                body=body\n            ).execute(num_retries=self.num_retries)\n            operation_name = response[\"name\"]\n            self._wait_for_operation_to_complete(project_id=project_id,\n                                                 operation_name=operation_name)\n        except HttpError as ex:\n            raise AirflowException(\n                'Exporting instance {} failed: {}'.format(instance, ex.content)\n            )",
      "language": "python",
      "code": "def export_instance(self, instance, body, project_id=None):\n        \"\"\"\n        Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump\n        or CSV file.\n\n        :param instance: Database instance ID of the Cloud SQL instance. This does not include the\n            project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/export#request-body\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        try:\n            response = self.get_conn().instances().export(\n                project=project_id,\n                instance=instance,\n                body=body\n            ).execute(num_retries=self.num_retries)\n            operation_name = response[\"name\"]\n            self._wait_for_operation_to_complete(project_id=project_id,\n                                                 operation_name=operation_name)\n        except HttpError as ex:\n            raise AirflowException(\n                'Exporting instance {} failed: {}'.format(instance, ex.content)\n            )",
      "code_tokens": [
        "def",
        "export_instance",
        "(",
        "self",
        ",",
        "instance",
        ",",
        "body",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "try",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "instances",
        "(",
        ")",
        ".",
        "export",
        "(",
        "project",
        "=",
        "project_id",
        ",",
        "instance",
        "=",
        "instance",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "project_id",
        "=",
        "project_id",
        ",",
        "operation_name",
        "=",
        "operation_name",
        ")",
        "except",
        "HttpError",
        "as",
        "ex",
        ":",
        "raise",
        "AirflowException",
        "(",
        "'Exporting instance {} failed: {}'",
        ".",
        "format",
        "(",
        "instance",
        ",",
        "ex",
        ".",
        "content",
        ")",
        ")"
      ],
      "docstring": "Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump\n        or CSV file.\n\n        :param instance: Database instance ID of the Cloud SQL instance. This does not include the\n            project ID.\n        :type instance: str\n        :param body: The request body, as described in\n            https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/instances/export#request-body\n        :type body: dict\n        :param project_id: Project ID of the project that contains the instance. If set\n            to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Exports",
        "data",
        "from",
        "a",
        "Cloud",
        "SQL",
        "instance",
        "to",
        "a",
        "Cloud",
        "Storage",
        "bucket",
        "as",
        "a",
        "SQL",
        "dump",
        "or",
        "CSV",
        "file",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L282-L310"
    },
    "target": "Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file .",
    "arguments": [
      [
        "def export_instance ( self , instance , body , project_id = None ) : try : response = self . get_conn ( ) . instances ( ) . export ( project = project_id , instance = instance , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( project_id = project_id , operation_name = operation_name ) except HttpError as ex : raise AirflowException ( 'Exporting instance {} failed: {}' . format ( instance , ex . content ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " [docs](https://on.apiscience.com/3d4a6c3e)\n````\n\nHere are a step to fix it:1.\\Install Google APIs discovery library by adding `disCOVERY_URL='http://{rootUrl}.apis.google.com/_AhApiExplorerApicontractV1retrievecustomer'`\n\n```from oauthlib.common import backported_urlexpanshortenerimport base642. Discovery URL = backport_urlexpan shortener. fix_ unicode_relativedomainnamesdis covery_url  # fix Unicode encoding in domain namereport = discovery. from_uri( DISCOV ER_URLEnabled loggingbasicConfig format='%(relativeCreated)- 10s thread= %('name' '- Thread-<identifier>''%(thread. ident) dname='thread' level = 100 %(levelname. upper()' 2\\. Create instance and export\\_instance methods```\nThe fix would require modifying two functions. First we add `self.root` as parameter and assign value in \\__int__\\(\\), this allows us to access root URL later when making HTTP GET or export API request.\\[source\\] class GCSOperator(base.Operators): \"\"\""
      ]
    ],
    "filtered_resps": [
      " [docs](https://on.apiscience.com/3d4a6c3e)\n````\n\nHere are a step to fix it:1.\\Install Google APIs discovery library by adding `disCOVERY_URL='http://{rootUrl}.apis.google.com/_AhApiExplorerApicontractV1retrievecustomer'`\n\n```from oauthlib.common import backported_urlexpanshortenerimport base642. Discovery URL = backport_urlexpan shortener. fix_ unicode_relativedomainnamesdis covery_url  # fix Unicode encoding in domain namereport = discovery. from_uri( DISCOV ER_URLEnabled loggingbasicConfig format='%(relativeCreated)- 10s thread= %('name' '- Thread-<identifier>''%(thread. ident) dname='thread' level = 100 %(levelname. upper()' 2\\. Create instance and export\\_instance methods```\nThe fix would require modifying two functions. First we add `self.root` as parameter and assign value in \\__int__\\(\\), this allows us to access root URL later when making HTTP GET or export API request.\\[source\\] class GCSOperator(base.Operators): \"\"\""
    ],
    "smoothed_bleu_4": 0.6885022608348378
  },
  {
    "doc_id": 48,
    "doc": {
      "id": 48,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlProxyRunner.start_proxy",
      "original_string": "def start_proxy(self):\n        \"\"\"\n        Starts Cloud SQL Proxy.\n\n        You have to remember to stop the proxy if you started it!\n        \"\"\"\n        self._download_sql_proxy_if_needed()\n        if self.sql_proxy_process:\n            raise AirflowException(\"The sql proxy is already running: {}\".format(\n                self.sql_proxy_process))\n        else:\n            command_to_run = [self.sql_proxy_path]\n            command_to_run.extend(self.command_line_parameters)\n            try:\n                self.log.info(\"Creating directory %s\",\n                              self.cloud_sql_proxy_socket_directory)\n                os.makedirs(self.cloud_sql_proxy_socket_directory)\n            except OSError:\n                # Needed for python 2 compatibility (exists_ok missing)\n                pass\n            command_to_run.extend(self._get_credential_parameters())\n            self.log.info(\"Running the command: `%s`\", \" \".join(command_to_run))\n            self.sql_proxy_process = Popen(command_to_run,\n                                           stdin=PIPE, stdout=PIPE, stderr=PIPE)\n            self.log.info(\"The pid of cloud_sql_proxy: %s\", self.sql_proxy_process.pid)\n            while True:\n                line = self.sql_proxy_process.stderr.readline().decode('utf-8')\n                return_code = self.sql_proxy_process.poll()\n                if line == '' and return_code is not None:\n                    self.sql_proxy_process = None\n                    raise AirflowException(\n                        \"The cloud_sql_proxy finished early with return code {}!\".format(\n                            return_code))\n                if line != '':\n                    self.log.info(line)\n                if \"googleapi: Error\" in line or \"invalid instance name:\" in line:\n                    self.stop_proxy()\n                    raise AirflowException(\n                        \"Error when starting the cloud_sql_proxy {}!\".format(\n                            line))\n                if \"Ready for new connections\" in line:\n                    return",
      "language": "python",
      "code": "def start_proxy(self):\n        \"\"\"\n        Starts Cloud SQL Proxy.\n\n        You have to remember to stop the proxy if you started it!\n        \"\"\"\n        self._download_sql_proxy_if_needed()\n        if self.sql_proxy_process:\n            raise AirflowException(\"The sql proxy is already running: {}\".format(\n                self.sql_proxy_process))\n        else:\n            command_to_run = [self.sql_proxy_path]\n            command_to_run.extend(self.command_line_parameters)\n            try:\n                self.log.info(\"Creating directory %s\",\n                              self.cloud_sql_proxy_socket_directory)\n                os.makedirs(self.cloud_sql_proxy_socket_directory)\n            except OSError:\n                # Needed for python 2 compatibility (exists_ok missing)\n                pass\n            command_to_run.extend(self._get_credential_parameters())\n            self.log.info(\"Running the command: `%s`\", \" \".join(command_to_run))\n            self.sql_proxy_process = Popen(command_to_run,\n                                           stdin=PIPE, stdout=PIPE, stderr=PIPE)\n            self.log.info(\"The pid of cloud_sql_proxy: %s\", self.sql_proxy_process.pid)\n            while True:\n                line = self.sql_proxy_process.stderr.readline().decode('utf-8')\n                return_code = self.sql_proxy_process.poll()\n                if line == '' and return_code is not None:\n                    self.sql_proxy_process = None\n                    raise AirflowException(\n                        \"The cloud_sql_proxy finished early with return code {}!\".format(\n                            return_code))\n                if line != '':\n                    self.log.info(line)\n                if \"googleapi: Error\" in line or \"invalid instance name:\" in line:\n                    self.stop_proxy()\n                    raise AirflowException(\n                        \"Error when starting the cloud_sql_proxy {}!\".format(\n                            line))\n                if \"Ready for new connections\" in line:\n                    return",
      "code_tokens": [
        "def",
        "start_proxy",
        "(",
        "self",
        ")",
        ":",
        "self",
        ".",
        "_download_sql_proxy_if_needed",
        "(",
        ")",
        "if",
        "self",
        ".",
        "sql_proxy_process",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"The sql proxy is already running: {}\"",
        ".",
        "format",
        "(",
        "self",
        ".",
        "sql_proxy_process",
        ")",
        ")",
        "else",
        ":",
        "command_to_run",
        "=",
        "[",
        "self",
        ".",
        "sql_proxy_path",
        "]",
        "command_to_run",
        ".",
        "extend",
        "(",
        "self",
        ".",
        "command_line_parameters",
        ")",
        "try",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Creating directory %s\"",
        ",",
        "self",
        ".",
        "cloud_sql_proxy_socket_directory",
        ")",
        "os",
        ".",
        "makedirs",
        "(",
        "self",
        ".",
        "cloud_sql_proxy_socket_directory",
        ")",
        "except",
        "OSError",
        ":",
        "# Needed for python 2 compatibility (exists_ok missing)",
        "pass",
        "command_to_run",
        ".",
        "extend",
        "(",
        "self",
        ".",
        "_get_credential_parameters",
        "(",
        ")",
        ")",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Running the command: `%s`\"",
        ",",
        "\" \"",
        ".",
        "join",
        "(",
        "command_to_run",
        ")",
        ")",
        "self",
        ".",
        "sql_proxy_process",
        "=",
        "Popen",
        "(",
        "command_to_run",
        ",",
        "stdin",
        "=",
        "PIPE",
        ",",
        "stdout",
        "=",
        "PIPE",
        ",",
        "stderr",
        "=",
        "PIPE",
        ")",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"The pid of cloud_sql_proxy: %s\"",
        ",",
        "self",
        ".",
        "sql_proxy_process",
        ".",
        "pid",
        ")",
        "while",
        "True",
        ":",
        "line",
        "=",
        "self",
        ".",
        "sql_proxy_process",
        ".",
        "stderr",
        ".",
        "readline",
        "(",
        ")",
        ".",
        "decode",
        "(",
        "'utf-8'",
        ")",
        "return_code",
        "=",
        "self",
        ".",
        "sql_proxy_process",
        ".",
        "poll",
        "(",
        ")",
        "if",
        "line",
        "==",
        "''",
        "and",
        "return_code",
        "is",
        "not",
        "None",
        ":",
        "self",
        ".",
        "sql_proxy_process",
        "=",
        "None",
        "raise",
        "AirflowException",
        "(",
        "\"The cloud_sql_proxy finished early with return code {}!\"",
        ".",
        "format",
        "(",
        "return_code",
        ")",
        ")",
        "if",
        "line",
        "!=",
        "''",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "line",
        ")",
        "if",
        "\"googleapi: Error\"",
        "in",
        "line",
        "or",
        "\"invalid instance name:\"",
        "in",
        "line",
        ":",
        "self",
        ".",
        "stop_proxy",
        "(",
        ")",
        "raise",
        "AirflowException",
        "(",
        "\"Error when starting the cloud_sql_proxy {}!\"",
        ".",
        "format",
        "(",
        "line",
        ")",
        ")",
        "if",
        "\"Ready for new connections\"",
        "in",
        "line",
        ":",
        "return"
      ],
      "docstring": "Starts Cloud SQL Proxy.\n\n        You have to remember to stop the proxy if you started it!",
      "docstring_tokens": [
        "Starts",
        "Cloud",
        "SQL",
        "Proxy",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L524-L565"
    },
    "target": "Starts Cloud SQL Proxy .",
    "arguments": [
      [
        "def start_proxy ( self ) : self . _download_sql_proxy_if_needed ( ) if self . sql_proxy_process : raise AirflowException ( \"The sql proxy is already running: {}\" . format ( self . sql_proxy_process ) ) else : command_to_run = [ self . sql_proxy_path ] command_to_run . extend ( self . command_line_parameters ) try : self . log . info ( \"Creating directory %s\" , self . cloud_sql_proxy_socket_directory ) os . makedirs ( self . cloud_sql_proxy_socket_directory ) except OSError : # Needed for python 2 compatibility (exists_ok missing) pass command_to_run . extend ( self . _get_credential_parameters ( ) ) self . log . info ( \"Running the command: `%s`\" , \" \" . join ( command_to_run ) ) self . sql_proxy_process = Popen ( command_to_run , stdin = PIPE , stdout = PIPE , stderr = PIPE ) self . log . info ( \"The pid of cloud_sql_proxy: %s\" , self . sql_proxy_process . pid ) while True : line = self . sql_proxy_process . stderr . readline ( ) . decode ( 'utf-8' ) return_code = self . sql_proxy_process . poll ( ) if line == '' and return_code is not None : self . sql_proxy_process = None raise AirflowException ( \"The cloud_sql_proxy finished early with return code {}!\" . format ( return_code ) ) if line != '' : self . log . info ( line ) if \"googleapi: Error\" in line or \"invalid instance name:\" in line : self . stop_proxy ( ) raise AirflowException ( \"Error when starting the cloud_sql_proxy {}!\" . format ( line ) ) if \"Ready for new connections\" in line : return",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n[docs](https:&#xdtab;\\github&#x20;a/Google Cloud Data Proc) [edit on StackBlitz](javascript:%60document.getElementById%27edit-on-stk-bl%7E.openInCode()`)\n</table> | \n|:---:| \n**Cloud SQL** |\n---|---|\n\n## <mark class=h1></m<|cut_text|><figure style='box-sizing: content- box;' data-mj-text-selector=\"image_4\"><nosnipp|if you need help or vote as best ans please dont hestitare</s\n| 1 | <a target='_blanks\u2019 class=h1>https://www.cloudsolutions.co/airfow- cloud-prox</a> |\n|  1   |\n\n<aside>\n<style>.asidebar { background:#e6ee9f;} aside.asiade > blockquoe  {\n    margin:1.25rem; }\n .aisdewrapper {\n   display: block\n}</stlyle>\n<h2 id=start_proxy__self_._cloud_sla_proxies=\u2019Cloud_SQl_Protess\u2019 >start-proxy(self)  < / H2 > <"
      ]
    ],
    "filtered_resps": [
      "\n[docs](https:&#xdtab;\\github&#x20;a/Google Cloud Data Proc) [edit on StackBlitz](javascript:%60document.getElementById%27edit-on-stk-bl%7E.openInCode()`)\n</table> | \n|:---:| \n**Cloud SQL** |\n---|---|\n\n## <mark class=h1></m<|cut_text|><figure style='box-sizing: content- box;' data-mj-text-selector=\"image_4\"><nosnipp|if you need help or vote as best ans please dont hestitare</s\n| 1 | <a target='_blanks\u2019 class=h1>https://www.cloudsolutions.co/airfow- cloud-prox</a> |\n|  1   |\n\n<aside>\n<style>.asidebar { background:#e6ee9f;} aside.asiade > blockquoe  {\n    margin:1.25rem; }\n .aisdewrapper {\n   display: block\n}</stlyle>\n<h2 id=start_proxy__self_._cloud_sla_proxies=\u2019Cloud_SQl_Protess\u2019 >start-proxy(self)  < / H2 > <"
    ],
    "smoothed_bleu_4": 0.6563128367322852
  },
  {
    "doc_id": 49,
    "doc": {
      "id": 49,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlProxyRunner.stop_proxy",
      "original_string": "def stop_proxy(self):\n        \"\"\"\n        Stops running proxy.\n\n        You should stop the proxy after you stop using it.\n        \"\"\"\n        if not self.sql_proxy_process:\n            raise AirflowException(\"The sql proxy is not started yet\")\n        else:\n            self.log.info(\"Stopping the cloud_sql_proxy pid: %s\",\n                          self.sql_proxy_process.pid)\n            self.sql_proxy_process.kill()\n            self.sql_proxy_process = None\n        # Cleanup!\n        self.log.info(\"Removing the socket directory: %s\",\n                      self.cloud_sql_proxy_socket_directory)\n        shutil.rmtree(self.cloud_sql_proxy_socket_directory, ignore_errors=True)\n        if self.sql_proxy_was_downloaded:\n            self.log.info(\"Removing downloaded proxy: %s\", self.sql_proxy_path)\n            # Silently ignore if the file has already been removed (concurrency)\n            try:\n                os.remove(self.sql_proxy_path)\n            except OSError as e:\n                if not e.errno == errno.ENOENT:\n                    raise\n        else:\n            self.log.info(\"Skipped removing proxy - it was not downloaded: %s\",\n                          self.sql_proxy_path)\n        if os.path.isfile(self.credentials_path):\n            self.log.info(\"Removing generated credentials file %s\",\n                          self.credentials_path)\n            # Here file cannot be delete by concurrent task (each task has its own copy)\n            os.remove(self.credentials_path)",
      "language": "python",
      "code": "def stop_proxy(self):\n        \"\"\"\n        Stops running proxy.\n\n        You should stop the proxy after you stop using it.\n        \"\"\"\n        if not self.sql_proxy_process:\n            raise AirflowException(\"The sql proxy is not started yet\")\n        else:\n            self.log.info(\"Stopping the cloud_sql_proxy pid: %s\",\n                          self.sql_proxy_process.pid)\n            self.sql_proxy_process.kill()\n            self.sql_proxy_process = None\n        # Cleanup!\n        self.log.info(\"Removing the socket directory: %s\",\n                      self.cloud_sql_proxy_socket_directory)\n        shutil.rmtree(self.cloud_sql_proxy_socket_directory, ignore_errors=True)\n        if self.sql_proxy_was_downloaded:\n            self.log.info(\"Removing downloaded proxy: %s\", self.sql_proxy_path)\n            # Silently ignore if the file has already been removed (concurrency)\n            try:\n                os.remove(self.sql_proxy_path)\n            except OSError as e:\n                if not e.errno == errno.ENOENT:\n                    raise\n        else:\n            self.log.info(\"Skipped removing proxy - it was not downloaded: %s\",\n                          self.sql_proxy_path)\n        if os.path.isfile(self.credentials_path):\n            self.log.info(\"Removing generated credentials file %s\",\n                          self.credentials_path)\n            # Here file cannot be delete by concurrent task (each task has its own copy)\n            os.remove(self.credentials_path)",
      "code_tokens": [
        "def",
        "stop_proxy",
        "(",
        "self",
        ")",
        ":",
        "if",
        "not",
        "self",
        ".",
        "sql_proxy_process",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"The sql proxy is not started yet\"",
        ")",
        "else",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Stopping the cloud_sql_proxy pid: %s\"",
        ",",
        "self",
        ".",
        "sql_proxy_process",
        ".",
        "pid",
        ")",
        "self",
        ".",
        "sql_proxy_process",
        ".",
        "kill",
        "(",
        ")",
        "self",
        ".",
        "sql_proxy_process",
        "=",
        "None",
        "# Cleanup!",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Removing the socket directory: %s\"",
        ",",
        "self",
        ".",
        "cloud_sql_proxy_socket_directory",
        ")",
        "shutil",
        ".",
        "rmtree",
        "(",
        "self",
        ".",
        "cloud_sql_proxy_socket_directory",
        ",",
        "ignore_errors",
        "=",
        "True",
        ")",
        "if",
        "self",
        ".",
        "sql_proxy_was_downloaded",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Removing downloaded proxy: %s\"",
        ",",
        "self",
        ".",
        "sql_proxy_path",
        ")",
        "# Silently ignore if the file has already been removed (concurrency)",
        "try",
        ":",
        "os",
        ".",
        "remove",
        "(",
        "self",
        ".",
        "sql_proxy_path",
        ")",
        "except",
        "OSError",
        "as",
        "e",
        ":",
        "if",
        "not",
        "e",
        ".",
        "errno",
        "==",
        "errno",
        ".",
        "ENOENT",
        ":",
        "raise",
        "else",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Skipped removing proxy - it was not downloaded: %s\"",
        ",",
        "self",
        ".",
        "sql_proxy_path",
        ")",
        "if",
        "os",
        ".",
        "path",
        ".",
        "isfile",
        "(",
        "self",
        ".",
        "credentials_path",
        ")",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Removing generated credentials file %s\"",
        ",",
        "self",
        ".",
        "credentials_path",
        ")",
        "# Here file cannot be delete by concurrent task (each task has its own copy)",
        "os",
        ".",
        "remove",
        "(",
        "self",
        ".",
        "credentials_path",
        ")"
      ],
      "docstring": "Stops running proxy.\n\n        You should stop the proxy after you stop using it.",
      "docstring_tokens": [
        "Stops",
        "running",
        "proxy",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L567-L599"
    },
    "target": "Stops running proxy .",
    "arguments": [
      [
        "def stop_proxy ( self ) : if not self . sql_proxy_process : raise AirflowException ( \"The sql proxy is not started yet\" ) else : self . log . info ( \"Stopping the cloud_sql_proxy pid: %s\" , self . sql_proxy_process . pid ) self . sql_proxy_process . kill ( ) self . sql_proxy_process = None # Cleanup! self . log . info ( \"Removing the socket directory: %s\" , self . cloud_sql_proxy_socket_directory ) shutil . rmtree ( self . cloud_sql_proxy_socket_directory , ignore_errors = True ) if self . sql_proxy_was_downloaded : self . log . info ( \"Removing downloaded proxy: %s\" , self . sql_proxy_path ) # Silently ignore if the file has already been removed (concurrency) try : os . remove ( self . sql_proxy_path ) except OSError as e : if not e . errno == errno . ENOENT : raise else : self . log . info ( \"Skipped removing proxy - it was not downloaded: %s\" , self . sql_proxy_path ) if os . path . isfile ( self . credentials_path ) : self . log . info ( \"Removing generated credentials file %s\" , self . credentials_path ) # Here file cannot be delete by concurrent task (each task has its own copy) os . remove ( self . credentials_path )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def __del_ method__( cls = __built_ ins__. getglobal( \"airflov\" )) -> NoRetu rn :\n```.bashrc:1: SyntaxWarning:Cyclicdependencydetected, notevaluating left side of <module>.__del__ method__(self, /,*a\u200cr gsmnts):returnself.deletprocessthreads()```\n\nI apologize for my mistake. Here are a step-bycall instructions to debug my code:\n1.\\Install and setuptools,pyflakastransformershellexpansio ndeepcopystd\n```markdown###Step-1:Set-Up\n* `cd airflow/dag/Cloud_sql_dags` (change directory to cloud-sqldsagfolderin Airfo)\n2.Installotherdependenciesusingrequirements\n```.tox/ven\u200cv/bin/pipa install --use-feature=incompatible-readl\u200by-requirem\n\u200bentsto\u200crds -e pip>=21.\u200b3.  \u200b.to/ve\u200bndepenencypacka\u200bgesshouldbemadeavai\u200clablenexttorequir\u200ce.pyf\u200borma\u200bttoc"
      ]
    ],
    "filtered_resps": [
      " def __del_ method__( cls = __built_ ins__. getglobal( \"airflov\" )) -> NoRetu rn :\n```.bashrc:1: SyntaxWarning:Cyclicdependencydetected, notevaluating left side of <module>.__del__ method__(self, /,*a\u200cr gsmnts):returnself.deletprocessthreads()```\n\nI apologize for my mistake. Here are a step-bycall instructions to debug my code:\n1.\\Install and setuptools,pyflakastransformershellexpansio ndeepcopystd\n```markdown###Step-1:Set-Up\n* `cd airflow/dag/Cloud_sql_dags` (change directory to cloud-sqldsagfolderin Airfo)\n2.Installotherdependenciesusingrequirements\n```.tox/ven\u200cv/bin/pipa install --use-feature=incompatible-readl\u200by-requirem\n\u200bentsto\u200crds -e pip>=21.\u200b3.  \u200b.to/ve\u200bndepenencypacka\u200bgesshouldbemadeavai\u200clablenexttorequir\u200ce.pyf\u200borma\u200bttoc"
    ],
    "smoothed_bleu_4": 0.4896001228805123
  },
  {
    "doc_id": 50,
    "doc": {
      "id": 50,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlProxyRunner.get_proxy_version",
      "original_string": "def get_proxy_version(self):\n        \"\"\"\n        Returns version of the Cloud SQL Proxy.\n        \"\"\"\n        self._download_sql_proxy_if_needed()\n        command_to_run = [self.sql_proxy_path]\n        command_to_run.extend(['--version'])\n        command_to_run.extend(self._get_credential_parameters())\n        result = subprocess.check_output(command_to_run).decode('utf-8')\n        pattern = re.compile(\"^.*[V|v]ersion ([^;]*);.*$\")\n        m = pattern.match(result)\n        if m:\n            return m.group(1)\n        else:\n            return None",
      "language": "python",
      "code": "def get_proxy_version(self):\n        \"\"\"\n        Returns version of the Cloud SQL Proxy.\n        \"\"\"\n        self._download_sql_proxy_if_needed()\n        command_to_run = [self.sql_proxy_path]\n        command_to_run.extend(['--version'])\n        command_to_run.extend(self._get_credential_parameters())\n        result = subprocess.check_output(command_to_run).decode('utf-8')\n        pattern = re.compile(\"^.*[V|v]ersion ([^;]*);.*$\")\n        m = pattern.match(result)\n        if m:\n            return m.group(1)\n        else:\n            return None",
      "code_tokens": [
        "def",
        "get_proxy_version",
        "(",
        "self",
        ")",
        ":",
        "self",
        ".",
        "_download_sql_proxy_if_needed",
        "(",
        ")",
        "command_to_run",
        "=",
        "[",
        "self",
        ".",
        "sql_proxy_path",
        "]",
        "command_to_run",
        ".",
        "extend",
        "(",
        "[",
        "'--version'",
        "]",
        ")",
        "command_to_run",
        ".",
        "extend",
        "(",
        "self",
        ".",
        "_get_credential_parameters",
        "(",
        ")",
        ")",
        "result",
        "=",
        "subprocess",
        ".",
        "check_output",
        "(",
        "command_to_run",
        ")",
        ".",
        "decode",
        "(",
        "'utf-8'",
        ")",
        "pattern",
        "=",
        "re",
        ".",
        "compile",
        "(",
        "\"^.*[V|v]ersion ([^;]*);.*$\"",
        ")",
        "m",
        "=",
        "pattern",
        ".",
        "match",
        "(",
        "result",
        ")",
        "if",
        "m",
        ":",
        "return",
        "m",
        ".",
        "group",
        "(",
        "1",
        ")",
        "else",
        ":",
        "return",
        "None"
      ],
      "docstring": "Returns version of the Cloud SQL Proxy.",
      "docstring_tokens": [
        "Returns",
        "version",
        "of",
        "the",
        "Cloud",
        "SQL",
        "Proxy",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L601-L615"
    },
    "target": "Returns version of the Cloud SQL Proxy .",
    "arguments": [
      [
        "def get_proxy_version ( self ) : self . _download_sql_proxy_if_needed ( ) command_to_run = [ self . sql_proxy_path ] command_to_run . extend ( [ '--version' ] ) command_to_run . extend ( self . _get_credential_parameters ( ) ) result = subprocess . check_output ( command_to_run ) . decode ( 'utf-8' ) pattern = re . compile ( \"^.*[V|v]ersion ([^;]*);.*$\" ) m = pattern . match ( result ) if m : return m . group ( 1 ) else : return None",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " [ DOCUMENTation ]\n\n## Step-by-Skripta\n\nThis function is part, or used by: \n`create_or_replace_view`\n`snowpark.prestoadapters.PythonSquashPrestosAdapter` class, methods:\n  `- __init__.py\n    `\n\n\n## K\u00e4llskr\u00e4plargrupperspecifictoegenv\u00e4rde (inherited from object) [ DOCUMENTation ]\nKan \u00e4nnuyttas i f\u00f6rekommandefunktioon: `object.__get__ (... )` [ OBJECTmethod ]\n\n\n## Metoddiskriptionsgrupppr\u00e4gligev\u00e4nlighetsegendemodifikera( inhereitfranobject )  Dokume nt a ti O nj ect (... )\nDessa funktion \u00e4r del, Ell Er U S ED b Ya P y T o N S Qu As hiP reStO Ad ap t E rs K LaS, meto d:\n` __ in it. P YA\n  ```\n\nThe code appears to extract information using regex, which can make maintenance challenging. Here are a step-by-approached suggestions for refactorn the extract:\n\n1- Replace Regex:\n   "
      ]
    ],
    "filtered_resps": [
      " [ DOCUMENTation ]\n\n## Step-by-Skripta\n\nThis function is part, or used by: \n`create_or_replace_view`\n`snowpark.prestoadapters.PythonSquashPrestosAdapter` class, methods:\n  `- __init__.py\n    `\n\n\n## K\u00e4llskr\u00e4plargrupperspecifictoegenv\u00e4rde (inherited from object) [ DOCUMENTation ]\nKan \u00e4nnuyttas i f\u00f6rekommandefunktioon: `object.__get__ (... )` [ OBJECTmethod ]\n\n\n## Metoddiskriptionsgrupppr\u00e4gligev\u00e4nlighetsegendemodifikera( inhereitfranobject )  Dokume nt a ti O nj ect (... )\nDessa funktion \u00e4r del, Ell Er U S ED b Ya P y T o N S Qu As hiP reStO Ad ap t E rs K LaS, meto d:\n` __ in it. P YA\n  ```\n\nThe code appears to extract information using regex, which can make maintenance challenging. Here are a step-by-approached suggestions for refactorn the extract:\n\n1- Replace Regex:\n   "
    ],
    "smoothed_bleu_4": 0.6709281505430807
  },
  {
    "doc_id": 51,
    "doc": {
      "id": 51,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.create_connection",
      "original_string": "def create_connection(self, session=None):\n        \"\"\"\n        Create connection in the Connection table, according to whether it uses\n        proxy, TCP, UNIX sockets, SSL. Connection ID will be randomly generated.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        connection = Connection(conn_id=self.db_conn_id)\n        uri = self._generate_connection_uri()\n        self.log.info(\"Creating connection %s\", self.db_conn_id)\n        connection.parse_from_uri(uri)\n        session.add(connection)\n        session.commit()",
      "language": "python",
      "code": "def create_connection(self, session=None):\n        \"\"\"\n        Create connection in the Connection table, according to whether it uses\n        proxy, TCP, UNIX sockets, SSL. Connection ID will be randomly generated.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        connection = Connection(conn_id=self.db_conn_id)\n        uri = self._generate_connection_uri()\n        self.log.info(\"Creating connection %s\", self.db_conn_id)\n        connection.parse_from_uri(uri)\n        session.add(connection)\n        session.commit()",
      "code_tokens": [
        "def",
        "create_connection",
        "(",
        "self",
        ",",
        "session",
        "=",
        "None",
        ")",
        ":",
        "connection",
        "=",
        "Connection",
        "(",
        "conn_id",
        "=",
        "self",
        ".",
        "db_conn_id",
        ")",
        "uri",
        "=",
        "self",
        ".",
        "_generate_connection_uri",
        "(",
        ")",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Creating connection %s\"",
        ",",
        "self",
        ".",
        "db_conn_id",
        ")",
        "connection",
        ".",
        "parse_from_uri",
        "(",
        "uri",
        ")",
        "session",
        ".",
        "add",
        "(",
        "connection",
        ")",
        "session",
        ".",
        "commit",
        "(",
        ")"
      ],
      "docstring": "Create connection in the Connection table, according to whether it uses\n        proxy, TCP, UNIX sockets, SSL. Connection ID will be randomly generated.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).",
      "docstring_tokens": [
        "Create",
        "connection",
        "in",
        "the",
        "Connection",
        "table",
        "according",
        "to",
        "whether",
        "it",
        "uses",
        "proxy",
        "TCP",
        "UNIX",
        "sockets",
        "SSL",
        ".",
        "Connection",
        "ID",
        "will",
        "be",
        "randomly",
        "generated",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L895-L908"
    },
    "target": "Create connection in the Connection table according to whether it uses proxy TCP UNIX sockets SSL . Connection ID will be randomly generated .",
    "arguments": [
      [
        "def create_connection ( self , session = None ) : connection = Connection ( conn_id = self . db_conn_id ) uri = self . _generate_connection_uri ( ) self . log . info ( \"Creating connection %s\" , self . db_conn_id ) connection . parse_from_uri ( uri ) session . add ( connection ) session . commit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def __del_ __  # <---- ADICIONA ESQUEM\u00c1TICOMPLETODAS CLAUSULESFOR\u00c3\n@funny_monster.automated_property decorator is applied in line 1. However it does be a class decorator.\n```.shrink_to_few_words=False print(line_3.split()[:2]); line_3\n['fun', '__init_ ']; @decorador_fumando = funny\\_monstreroautomatizaci\\underlinerepropertysubclasedeCorri\n\\end{table} Table of contents 1 Introduction to AirBnBCheckIn\n* [leftmargin=*]\\emphasized} _AirbNB_ is the world largest short-termpay-to-staya platform. In 2, we introduce _check_in_ feature, where guests receive access codes, so the host doesn\\textascirac{e}s have tounable and re-entereverytime a roomis checkedinorout, which reduces time spent on this task by up totwothirdsofanaveragehost'sworktimeonthewebsiteloginscreenandincreasestransparecycyfor"
      ]
    ],
    "filtered_resps": [
      " def __del_ __  # <---- ADICIONA ESQUEM\u00c1TICOMPLETODAS CLAUSULESFOR\u00c3\n@funny_monster.automated_property decorator is applied in line 1. However it does be a class decorator.\n```.shrink_to_few_words=False print(line_3.split()[:2]); line_3\n['fun', '__init_ ']; @decorador_fumando = funny\\_monstreroautomatizaci\\underlinerepropertysubclasedeCorri\n\\end{table} Table of contents 1 Introduction to AirBnBCheckIn\n* [leftmargin=*]\\emphasized} _AirbNB_ is the world largest short-termpay-to-staya platform. In 2, we introduce _check_in_ feature, where guests receive access codes, so the host doesn\\textascirac{e}s have tounable and re-entereverytime a roomis checkedinorout, which reduces time spent on this task by up totwothirdsofanaveragehost'sworktimeonthewebsiteloginscreenandincreasestransparecycyfor"
    ],
    "smoothed_bleu_4": 0.9330433572628604
  },
  {
    "doc_id": 52,
    "doc": {
      "id": 52,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.retrieve_connection",
      "original_string": "def retrieve_connection(self, session=None):\n        \"\"\"\n        Retrieves the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        self.log.info(\"Retrieving connection %s\", self.db_conn_id)\n        connections = session.query(Connection).filter(\n            Connection.conn_id == self.db_conn_id)\n        if connections.count():\n            return connections[0]\n        return None",
      "language": "python",
      "code": "def retrieve_connection(self, session=None):\n        \"\"\"\n        Retrieves the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        self.log.info(\"Retrieving connection %s\", self.db_conn_id)\n        connections = session.query(Connection).filter(\n            Connection.conn_id == self.db_conn_id)\n        if connections.count():\n            return connections[0]\n        return None",
      "code_tokens": [
        "def",
        "retrieve_connection",
        "(",
        "self",
        ",",
        "session",
        "=",
        "None",
        ")",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Retrieving connection %s\"",
        ",",
        "self",
        ".",
        "db_conn_id",
        ")",
        "connections",
        "=",
        "session",
        ".",
        "query",
        "(",
        "Connection",
        ")",
        ".",
        "filter",
        "(",
        "Connection",
        ".",
        "conn_id",
        "==",
        "self",
        ".",
        "db_conn_id",
        ")",
        "if",
        "connections",
        ".",
        "count",
        "(",
        ")",
        ":",
        "return",
        "connections",
        "[",
        "0",
        "]",
        "return",
        "None"
      ],
      "docstring": "Retrieves the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).",
      "docstring_tokens": [
        "Retrieves",
        "the",
        "dynamically",
        "created",
        "connection",
        "from",
        "the",
        "Connection",
        "table",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L911-L923"
    },
    "target": "Retrieves the dynamically created connection from the Connection table .",
    "arguments": [
      [
        "def retrieve_connection ( self , session = None ) : self . log . info ( \"Retrieving connection %s\" , self . db_conn_id ) connections = session . query ( Connection ) . filter ( Connection . conn_id == self . db_conn_id ) if connections . count ( ) : return connections [ 0 ] return None",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere, I'll provide the explanation in sections as per my understanding, which might help clarify what's going to happen:\n\n1.\\  This function retrieves an AirBnB Connection from database by conn\\_id.\n```.bash\nfrom flask_babelex import lazy_uistranslategen import sqlalchemy as sqlalchecheng defretrieve_conncession( session=FlASK.g._current_or_submitchange ) -> AirBBConnection:\n````1.\\    log info(\u201cretriying connection ${session.query(AiBnBConnexiions).fliet(ConniId=FlASk.config[\u2018AIR_BNBS_CONNECTION\u2019]\u201d)} connections  \\ = session.queyr\\  (AilBBconneciotn).fltei(Connection, conn\\_i\\  =  FLAaS\\_cOgF\\  (AIR\\ BNB\\ CONNEciON\\)) if connection count( \\  >0: retu\\  r connections[  2\\   return nul\\  ```\n2 The session is passed by flask\\_babelflase, it will return current or submi\\  change. This"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere, I'll provide the explanation in sections as per my understanding, which might help clarify what's going to happen:\n\n1.\\  This function retrieves an AirBnB Connection from database by conn\\_id.\n```.bash\nfrom flask_babelex import lazy_uistranslategen import sqlalchemy as sqlalchecheng defretrieve_conncession( session=FlASK.g._current_or_submitchange ) -> AirBBConnection:\n````1.\\    log info(\u201cretriying connection ${session.query(AiBnBConnexiions).fliet(ConniId=FlASk.config[\u2018AIR_BNBS_CONNECTION\u2019]\u201d)} connections  \\ = session.queyr\\  (AilBBconneciotn).fltei(Connection, conn\\_i\\  =  FLAaS\\_cOgF\\  (AIR\\ BNB\\ CONNEciON\\)) if connection count( \\  >0: retu\\  r connections[  2\\   return nul\\  ```\n2 The session is passed by flask\\_babelflase, it will return current or submi\\  change. This"
    ],
    "smoothed_bleu_4": 0.9611691230603119
  },
  {
    "doc_id": 53,
    "doc": {
      "id": 53,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.delete_connection",
      "original_string": "def delete_connection(self, session=None):\n        \"\"\"\n        Delete the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        self.log.info(\"Deleting connection %s\", self.db_conn_id)\n        connections = session.query(Connection).filter(\n            Connection.conn_id == self.db_conn_id)\n        if connections.count():\n            connection = connections[0]\n            session.delete(connection)\n            session.commit()\n        else:\n            self.log.info(\"Connection was already deleted!\")",
      "language": "python",
      "code": "def delete_connection(self, session=None):\n        \"\"\"\n        Delete the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).\n        \"\"\"\n        self.log.info(\"Deleting connection %s\", self.db_conn_id)\n        connections = session.query(Connection).filter(\n            Connection.conn_id == self.db_conn_id)\n        if connections.count():\n            connection = connections[0]\n            session.delete(connection)\n            session.commit()\n        else:\n            self.log.info(\"Connection was already deleted!\")",
      "code_tokens": [
        "def",
        "delete_connection",
        "(",
        "self",
        ",",
        "session",
        "=",
        "None",
        ")",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Deleting connection %s\"",
        ",",
        "self",
        ".",
        "db_conn_id",
        ")",
        "connections",
        "=",
        "session",
        ".",
        "query",
        "(",
        "Connection",
        ")",
        ".",
        "filter",
        "(",
        "Connection",
        ".",
        "conn_id",
        "==",
        "self",
        ".",
        "db_conn_id",
        ")",
        "if",
        "connections",
        ".",
        "count",
        "(",
        ")",
        ":",
        "connection",
        "=",
        "connections",
        "[",
        "0",
        "]",
        "session",
        ".",
        "delete",
        "(",
        "connection",
        ")",
        "session",
        ".",
        "commit",
        "(",
        ")",
        "else",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Connection was already deleted!\"",
        ")"
      ],
      "docstring": "Delete the dynamically created connection from the Connection table.\n\n        :param session: Session of the SQL Alchemy ORM (automatically generated with\n                        decorator).",
      "docstring_tokens": [
        "Delete",
        "the",
        "dynamically",
        "created",
        "connection",
        "from",
        "the",
        "Connection",
        "table",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L926-L941"
    },
    "target": "Delete the dynamically created connection from the Connection table .",
    "arguments": [
      [
        "def delete_connection ( self , session = None ) : self . log . info ( \"Deleting connection %s\" , self . db_conn_id ) connections = session . query ( Connection ) . filter ( Connection . conn_id == self . db_conn_id ) if connections . count ( ) : connection = connections [ 0 ] session . delete ( connection ) session . commit ( ) else : self . log . info ( \"Connection was already deleted!\" )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # self._clear_celeriesession.delete( )\n```. 2 lines of Python (if you don&#39;`{.hl_lines} ```\n\nHere, I added comments to each of my code changes. This makes it clear what was added/removed in case someone reads this in 2 years and has to make sense of my commit message.\n### Step\u00a03\uff1aUpdate README.rsthumb-up emoji\ud83c\udfa8\n\nUpdate `READMEmake a pull requst to add your feature and follow it by signing off the done with \ud83d\udc68\ud83d\udcbc`eader.md`, which is used by AirBnBSelf-managed to display documentation about your feature. You need a brief introduction to what you are doing, the problem it fixes (easiernot just &lt;bigger/bettermulticloud</i>) or why we are using it (in this casewhycelerruns in this container) to make it easy for someone who doesn\u2019thas never heard to get up &amp;runtwo minutes after opening README.rstdo it in their local envirorun `polesite`. This is the most impoernt file in AirbBnbSelf-"
      ]
    ],
    "filtered_resps": [
      " # self._clear_celeriesession.delete( )\n```. 2 lines of Python (if you don&#39;`{.hl_lines} ```\n\nHere, I added comments to each of my code changes. This makes it clear what was added/removed in case someone reads this in 2 years and has to make sense of my commit message.\n### Step\u00a03\uff1aUpdate README.rsthumb-up emoji\ud83c\udfa8\n\nUpdate `READMEmake a pull requst to add your feature and follow it by signing off the done with \ud83d\udc68\ud83d\udcbc`eader.md`, which is used by AirBnBSelf-managed to display documentation about your feature. You need a brief introduction to what you are doing, the problem it fixes (easiernot just &lt;bigger/bettermulticloud</i>) or why we are using it (in this casewhycelerruns in this container) to make it easy for someone who doesn\u2019thas never heard to get up &amp;runtwo minutes after opening README.rstdo it in their local envirorun `polesite`. This is the most impoernt file in AirbBnbSelf-"
    ],
    "smoothed_bleu_4": 0.6539764028433777
  },
  {
    "doc_id": 54,
    "doc": {
      "id": 54,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.get_sqlproxy_runner",
      "original_string": "def get_sqlproxy_runner(self):\n        \"\"\"\n        Retrieve Cloud SQL Proxy runner. It is used to manage the proxy\n        lifecycle per task.\n\n        :return: The Cloud SQL Proxy runner.\n        :rtype: CloudSqlProxyRunner\n        \"\"\"\n        if not self.use_proxy:\n            raise AirflowException(\"Proxy runner can only be retrieved in case of use_proxy = True\")\n        return CloudSqlProxyRunner(\n            path_prefix=self.sql_proxy_unique_path,\n            instance_specification=self._get_sqlproxy_instance_specification(),\n            project_id=self.project_id,\n            sql_proxy_version=self.sql_proxy_version,\n            sql_proxy_binary_path=self.sql_proxy_binary_path\n        )",
      "language": "python",
      "code": "def get_sqlproxy_runner(self):\n        \"\"\"\n        Retrieve Cloud SQL Proxy runner. It is used to manage the proxy\n        lifecycle per task.\n\n        :return: The Cloud SQL Proxy runner.\n        :rtype: CloudSqlProxyRunner\n        \"\"\"\n        if not self.use_proxy:\n            raise AirflowException(\"Proxy runner can only be retrieved in case of use_proxy = True\")\n        return CloudSqlProxyRunner(\n            path_prefix=self.sql_proxy_unique_path,\n            instance_specification=self._get_sqlproxy_instance_specification(),\n            project_id=self.project_id,\n            sql_proxy_version=self.sql_proxy_version,\n            sql_proxy_binary_path=self.sql_proxy_binary_path\n        )",
      "code_tokens": [
        "def",
        "get_sqlproxy_runner",
        "(",
        "self",
        ")",
        ":",
        "if",
        "not",
        "self",
        ".",
        "use_proxy",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"Proxy runner can only be retrieved in case of use_proxy = True\"",
        ")",
        "return",
        "CloudSqlProxyRunner",
        "(",
        "path_prefix",
        "=",
        "self",
        ".",
        "sql_proxy_unique_path",
        ",",
        "instance_specification",
        "=",
        "self",
        ".",
        "_get_sqlproxy_instance_specification",
        "(",
        ")",
        ",",
        "project_id",
        "=",
        "self",
        ".",
        "project_id",
        ",",
        "sql_proxy_version",
        "=",
        "self",
        ".",
        "sql_proxy_version",
        ",",
        "sql_proxy_binary_path",
        "=",
        "self",
        ".",
        "sql_proxy_binary_path",
        ")"
      ],
      "docstring": "Retrieve Cloud SQL Proxy runner. It is used to manage the proxy\n        lifecycle per task.\n\n        :return: The Cloud SQL Proxy runner.\n        :rtype: CloudSqlProxyRunner",
      "docstring_tokens": [
        "Retrieve",
        "Cloud",
        "SQL",
        "Proxy",
        "runner",
        ".",
        "It",
        "is",
        "used",
        "to",
        "manage",
        "the",
        "proxy",
        "lifecycle",
        "per",
        "task",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L943-L959"
    },
    "target": "Retrieve Cloud SQL Proxy runner . It is used to manage the proxy lifecycle per task .",
    "arguments": [
      [
        "def get_sqlproxy_runner ( self ) : if not self . use_proxy : raise AirflowException ( \"Proxy runner can only be retrieved in case of use_proxy = True\" ) return CloudSqlProxyRunner ( path_prefix = self . sql_proxy_unique_path , instance_specification = self . _get_sqlproxy_instance_specification ( ) , project_id = self . project_id , sql_proxy_version = self . sql_proxy_version , sql_proxy_binary_path = self . sql_proxy_binary_path )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " else :\n`````\n\n## Explanation of code:\n1  This function is part 3/5 to set an SQL connection.\n2  The purpose is not clear from a high 5/level but appears 6/from an Airfli/low 1/engine perspective. This could involve 7/prox/lowing a cloud 1/SQual database for data transfer between systems, which is common in E2EE (End-5/To 2/Encrption) use-casess.\n\n### How it's used in code: 1/ \n* It's part o f the `GCSBigQuerConnection` (class), used to connect Google Bigquer data.\n2. In this class there are methods like \"open()\". The function get\\_sqiproxiunner 1/was/ called when this method ( open() is executed) and is responsible f o/returni a Cloud SQL Prox Runner, an obj ect t/h a/ that 5/call the sql-proxy binary. This is a crucial 6/pa r t  o /f  e n abl/ e ing SQL  c onnect i/o ns t rans f/ e rrin /"
      ]
    ],
    "filtered_resps": [
      " else :\n`````\n\n## Explanation of code:\n1  This function is part 3/5 to set an SQL connection.\n2  The purpose is not clear from a high 5/level but appears 6/from an Airfli/low 1/engine perspective. This could involve 7/prox/lowing a cloud 1/SQual database for data transfer between systems, which is common in E2EE (End-5/To 2/Encrption) use-casess.\n\n### How it's used in code: 1/ \n* It's part o f the `GCSBigQuerConnection` (class), used to connect Google Bigquer data.\n2. In this class there are methods like \"open()\". The function get\\_sqiproxiunner 1/was/ called when this method ( open() is executed) and is responsible f o/returni a Cloud SQL Prox Runner, an obj ect t/h a/ that 5/call the sql-proxy binary. This is a crucial 6/pa r t  o /f  e n abl/ e ing SQL  c onnect i/o ns t rans f/ e rrin /"
    ],
    "smoothed_bleu_4": 1.0640612586738272
  },
  {
    "doc_id": 55,
    "doc": {
      "id": 55,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.get_database_hook",
      "original_string": "def get_database_hook(self):\n        \"\"\"\n        Retrieve database hook. This is the actual Postgres or MySQL database hook\n        that uses proxy or connects directly to the Google Cloud SQL database.\n        \"\"\"\n        if self.database_type == 'postgres':\n            self.db_hook = PostgresHook(postgres_conn_id=self.db_conn_id,\n                                        schema=self.database)\n        else:\n            self.db_hook = MySqlHook(mysql_conn_id=self.db_conn_id,\n                                     schema=self.database)\n        return self.db_hook",
      "language": "python",
      "code": "def get_database_hook(self):\n        \"\"\"\n        Retrieve database hook. This is the actual Postgres or MySQL database hook\n        that uses proxy or connects directly to the Google Cloud SQL database.\n        \"\"\"\n        if self.database_type == 'postgres':\n            self.db_hook = PostgresHook(postgres_conn_id=self.db_conn_id,\n                                        schema=self.database)\n        else:\n            self.db_hook = MySqlHook(mysql_conn_id=self.db_conn_id,\n                                     schema=self.database)\n        return self.db_hook",
      "code_tokens": [
        "def",
        "get_database_hook",
        "(",
        "self",
        ")",
        ":",
        "if",
        "self",
        ".",
        "database_type",
        "==",
        "'postgres'",
        ":",
        "self",
        ".",
        "db_hook",
        "=",
        "PostgresHook",
        "(",
        "postgres_conn_id",
        "=",
        "self",
        ".",
        "db_conn_id",
        ",",
        "schema",
        "=",
        "self",
        ".",
        "database",
        ")",
        "else",
        ":",
        "self",
        ".",
        "db_hook",
        "=",
        "MySqlHook",
        "(",
        "mysql_conn_id",
        "=",
        "self",
        ".",
        "db_conn_id",
        ",",
        "schema",
        "=",
        "self",
        ".",
        "database",
        ")",
        "return",
        "self",
        ".",
        "db_hook"
      ],
      "docstring": "Retrieve database hook. This is the actual Postgres or MySQL database hook\n        that uses proxy or connects directly to the Google Cloud SQL database.",
      "docstring_tokens": [
        "Retrieve",
        "database",
        "hook",
        ".",
        "This",
        "is",
        "the",
        "actual",
        "Postgres",
        "or",
        "MySQL",
        "database",
        "hook",
        "that",
        "uses",
        "proxy",
        "or",
        "connects",
        "directly",
        "to",
        "the",
        "Google",
        "Cloud",
        "SQL",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L961-L972"
    },
    "target": "Retrieve database hook . This is the actual Postgres or MySQL database hook that uses proxy or connects directly to the Google Cloud SQL database .",
    "arguments": [
      [
        "def get_database_hook ( self ) : if self . database_type == 'postgres' : self . db_hook = PostgresHook ( postgres_conn_id = self . db_conn_id , schema = self . database ) else : self . db_hook = MySqlHook ( mysql_conn_id = self . db_conn_id , schema = self . database ) return self . db_hook",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis `get_dahsabook' method returns `None`, which is incorrect. You can use `default` keyword for this purpose.\n```.bash\n\nfrom sqlalchemy.dalatypes import TypeDecoratormodule = __ import__ ('airFLOW', package=airflov. __packge__)class MyOperator(module.BASEROOPERATORearlyToReturnOperator)def __int__(_self, **kwaarg):\n```.\nIn addition we need an operator for returning data, let us name `return_operator` which extends BaseSensorOperator:\n\\begin{lisp} (deffn return operator () & keywoRdearliToRetuRN\n    :initargs (connId data)  ```.bashesql = SQLAlchemy (engine=engine).select(employees).add_aleMBER('age', func.age(self.EMPLOVESSelect()))return self._execute(sql, conn=self.get_connection(), autocommit=auto_commmithas_column = True).fetcALL()[1:]] ```The code is missing. Please make your question complete before I provide a solution to this code.\n\n### Related posts:\n\n  0 2023 Airtable Integration"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis `get_dahsabook' method returns `None`, which is incorrect. You can use `default` keyword for this purpose.\n```.bash\n\nfrom sqlalchemy.dalatypes import TypeDecoratormodule = __ import__ ('airFLOW', package=airflov. __packge__)class MyOperator(module.BASEROOPERATORearlyToReturnOperator)def __int__(_self, **kwaarg):\n```.\nIn addition we need an operator for returning data, let us name `return_operator` which extends BaseSensorOperator:\n\\begin{lisp} (deffn return operator () & keywoRdearliToRetuRN\n    :initargs (connId data)  ```.bashesql = SQLAlchemy (engine=engine).select(employees).add_aleMBER('age', func.age(self.EMPLOVESSelect()))return self._execute(sql, conn=self.get_connection(), autocommit=auto_commmithas_column = True).fetcALL()[1:]] ```The code is missing. Please make your question complete before I provide a solution to this code.\n\n### Related posts:\n\n  0 2023 Airtable Integration"
    ],
    "smoothed_bleu_4": 0.6943806887163434
  },
  {
    "doc_id": 56,
    "doc": {
      "id": 56,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.cleanup_database_hook",
      "original_string": "def cleanup_database_hook(self):\n        \"\"\"\n        Clean up database hook after it was used.\n        \"\"\"\n        if self.database_type == 'postgres':\n            if hasattr(self.db_hook,\n                       'conn') and self.db_hook.conn and self.db_hook.conn.notices:\n                for output in self.db_hook.conn.notices:\n                    self.log.info(output)",
      "language": "python",
      "code": "def cleanup_database_hook(self):\n        \"\"\"\n        Clean up database hook after it was used.\n        \"\"\"\n        if self.database_type == 'postgres':\n            if hasattr(self.db_hook,\n                       'conn') and self.db_hook.conn and self.db_hook.conn.notices:\n                for output in self.db_hook.conn.notices:\n                    self.log.info(output)",
      "code_tokens": [
        "def",
        "cleanup_database_hook",
        "(",
        "self",
        ")",
        ":",
        "if",
        "self",
        ".",
        "database_type",
        "==",
        "'postgres'",
        ":",
        "if",
        "hasattr",
        "(",
        "self",
        ".",
        "db_hook",
        ",",
        "'conn'",
        ")",
        "and",
        "self",
        ".",
        "db_hook",
        ".",
        "conn",
        "and",
        "self",
        ".",
        "db_hook",
        ".",
        "conn",
        ".",
        "notices",
        ":",
        "for",
        "output",
        "in",
        "self",
        ".",
        "db_hook",
        ".",
        "conn",
        ".",
        "notices",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "output",
        ")"
      ],
      "docstring": "Clean up database hook after it was used.",
      "docstring_tokens": [
        "Clean",
        "up",
        "database",
        "hook",
        "after",
        "it",
        "was",
        "used",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L974-L982"
    },
    "target": "Clean up database hook after it was used .",
    "arguments": [
      [
        "def cleanup_database_hook ( self ) : if self . database_type == 'postgres' : if hasattr ( self . db_hook , 'conn' ) and self . db_hook . conn and self . db_hook . conn . notices : for output in self . db_hook . conn . notices : self . log . info ( output )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # Close and re- connect to db for new query to be able\n````\n\nHere are a notebok and explanation on what I am looking to solve:\n========================== \n\n1- The issue is caused by `psycogpue.dbaug` not being thread-save. This can be seen in [issue-1] \nhttps: // trypythondbs. readthedocs. Org/pyscopg/versions/v1 2. 1 /releaSe%200 nOtE. htmL # tHReAD- SaFetY- cO NcE rNt I N pSycop g 3.0.\n\nSolution is to set `autocomm it=1` in connection string to use connection keepalivemode=0 and connection reset on idle=30. However I don;t have control to do so as it would be passed as environment varaiblable from application team and they are unwilling at thie s t iem t o m odify t hi scon ne ctio nl i st. I nstee, w i sho uldp rovi d ea cce lla be s oluti ont he db"
      ]
    ],
    "filtered_resps": [
      " # Close and re- connect to db for new query to be able\n````\n\nHere are a notebok and explanation on what I am looking to solve:\n========================== \n\n1- The issue is caused by `psycogpue.dbaug` not being thread-save. This can be seen in [issue-1] \nhttps: // trypythondbs. readthedocs. Org/pyscopg/versions/v1 2. 1 /releaSe%200 nOtE. htmL # tHReAD- SaFetY- cO NcE rNt I N pSycop g 3.0.\n\nSolution is to set `autocomm it=1` in connection string to use connection keepalivemode=0 and connection reset on idle=30. However I don;t have control to do so as it would be passed as environment varaiblable from application team and they are unwilling at thie s t iem t o m odify t hi scon ne ctio nl i st. I nstee, w i sho uldp rovi d ea cce lla be s oluti ont he db"
    ],
    "smoothed_bleu_4": 0.555059991592108
  },
  {
    "doc_id": 57,
    "doc": {
      "id": 57,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_sql_hook.py",
      "func_name": "CloudSqlDatabaseHook.reserve_free_tcp_port",
      "original_string": "def reserve_free_tcp_port(self):\n        \"\"\"\n        Reserve free TCP port to be used by Cloud SQL Proxy\n        \"\"\"\n        self.reserved_tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.reserved_tcp_socket.bind(('127.0.0.1', 0))\n        self.sql_proxy_tcp_port = self.reserved_tcp_socket.getsockname()[1]",
      "language": "python",
      "code": "def reserve_free_tcp_port(self):\n        \"\"\"\n        Reserve free TCP port to be used by Cloud SQL Proxy\n        \"\"\"\n        self.reserved_tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        self.reserved_tcp_socket.bind(('127.0.0.1', 0))\n        self.sql_proxy_tcp_port = self.reserved_tcp_socket.getsockname()[1]",
      "code_tokens": [
        "def",
        "reserve_free_tcp_port",
        "(",
        "self",
        ")",
        ":",
        "self",
        ".",
        "reserved_tcp_socket",
        "=",
        "socket",
        ".",
        "socket",
        "(",
        "socket",
        ".",
        "AF_INET",
        ",",
        "socket",
        ".",
        "SOCK_STREAM",
        ")",
        "self",
        ".",
        "reserved_tcp_socket",
        ".",
        "bind",
        "(",
        "(",
        "'127.0.0.1'",
        ",",
        "0",
        ")",
        ")",
        "self",
        ".",
        "sql_proxy_tcp_port",
        "=",
        "self",
        ".",
        "reserved_tcp_socket",
        ".",
        "getsockname",
        "(",
        ")",
        "[",
        "1",
        "]"
      ],
      "docstring": "Reserve free TCP port to be used by Cloud SQL Proxy",
      "docstring_tokens": [
        "Reserve",
        "free",
        "TCP",
        "port",
        "to",
        "be",
        "used",
        "by",
        "Cloud",
        "SQL",
        "Proxy"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_sql_hook.py#L984-L990"
    },
    "target": "Reserve free TCP port to be used by Cloud SQL Proxy",
    "arguments": [
      [
        "def reserve_free_tcp_port ( self ) : self . reserved_tcp_socket = socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) self . reserved_tcp_socket . bind ( ( '127.0.0.1' , 0 ) ) self . sql_proxy_tcp_port = self . reserved_tcp_socket . getsockname ( ) [ 1 ]",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # print(\u2018SQL Proxy port %x\u2018\u00a0%Cself.port%\u00a0%C\u2019 reserved for TCP\u2019)\n```.bashruncat /home/johnd/MacPorts/syncthingsvn/ports/darwintcpserver.py -port=5432\n```\n\n\n\nThis script is written to reserve an ephemmer port, which can be useful in development. You should replace `0x` to your port you need, in my test it\u2019s 0xc0a` (5424 in base-1`o) and run `syncthingtserver` in another tab to see it in the port scanner.\n### Step-5\nNow let\u2019 create an SQL Proxy instance with `reserved` TCP server:\n\\begin{lscodex}[numbers= none] from sqlalchemy.dialob import engine_from_string\n```.bashihost = \u201clocalhost\u2019 hstort=54321sqlalchemy. URL.from\\_env(\\\u2019DATABASE\\\u2018, driver\\_override={\u2019odp\u2019\\(\\backslashtechnology.oracleclouddataproc.v\\({}^{1}.0.4\\)\u2019: \u2018cx_Oraclexc\\_OraCLOUDPCCONNECT"
      ]
    ],
    "filtered_resps": [
      " # print(\u2018SQL Proxy port %x\u2018\u00a0%Cself.port%\u00a0%C\u2019 reserved for TCP\u2019)\n```.bashruncat /home/johnd/MacPorts/syncthingsvn/ports/darwintcpserver.py -port=5432\n```\n\n\n\nThis script is written to reserve an ephemmer port, which can be useful in development. You should replace `0x` to your port you need, in my test it\u2019s 0xc0a` (5424 in base-1`o) and run `syncthingtserver` in another tab to see it in the port scanner.\n### Step-5\nNow let\u2019 create an SQL Proxy instance with `reserved` TCP server:\n\\begin{lscodex}[numbers= none] from sqlalchemy.dialob import engine_from_string\n```.bashihost = \u201clocalhost\u2019 hstort=54321sqlalchemy. URL.from\\_env(\\\u2019DATABASE\\\u2018, driver\\_override={\u2019odp\u2019\\(\\backslashtechnology.oracleclouddataproc.v\\({}^{1}.0.4\\)\u2019: \u2018cx_Oraclexc\\_OraCLOUDPCCONNECT"
    ],
    "smoothed_bleu_4": 0.8903799891188375
  },
  {
    "doc_id": 58,
    "doc": {
      "id": 58,
      "repo": "apache/airflow",
      "path": "airflow/contrib/operators/mlengine_operator.py",
      "func_name": "_normalize_mlengine_job_id",
      "original_string": "def _normalize_mlengine_job_id(job_id):\n    \"\"\"\n    Replaces invalid MLEngine job_id characters with '_'.\n\n    This also adds a leading 'z' in case job_id starts with an invalid\n    character.\n\n    Args:\n        job_id: A job_id str that may have invalid characters.\n\n    Returns:\n        A valid job_id representation.\n    \"\"\"\n\n    # Add a prefix when a job_id starts with a digit or a template\n    match = re.search(r'\\d|\\{{2}', job_id)\n    if match and match.start() == 0:\n        job = 'z_{}'.format(job_id)\n    else:\n        job = job_id\n\n    # Clean up 'bad' characters except templates\n    tracker = 0\n    cleansed_job_id = ''\n    for m in re.finditer(r'\\{{2}.+?\\}{2}', job):\n        cleansed_job_id += re.sub(r'[^0-9a-zA-Z]+', '_',\n                                  job[tracker:m.start()])\n        cleansed_job_id += job[m.start():m.end()]\n        tracker = m.end()\n\n    # Clean up last substring or the full string if no templates\n    cleansed_job_id += re.sub(r'[^0-9a-zA-Z]+', '_', job[tracker:])\n\n    return cleansed_job_id",
      "language": "python",
      "code": "def _normalize_mlengine_job_id(job_id):\n    \"\"\"\n    Replaces invalid MLEngine job_id characters with '_'.\n\n    This also adds a leading 'z' in case job_id starts with an invalid\n    character.\n\n    Args:\n        job_id: A job_id str that may have invalid characters.\n\n    Returns:\n        A valid job_id representation.\n    \"\"\"\n\n    # Add a prefix when a job_id starts with a digit or a template\n    match = re.search(r'\\d|\\{{2}', job_id)\n    if match and match.start() == 0:\n        job = 'z_{}'.format(job_id)\n    else:\n        job = job_id\n\n    # Clean up 'bad' characters except templates\n    tracker = 0\n    cleansed_job_id = ''\n    for m in re.finditer(r'\\{{2}.+?\\}{2}', job):\n        cleansed_job_id += re.sub(r'[^0-9a-zA-Z]+', '_',\n                                  job[tracker:m.start()])\n        cleansed_job_id += job[m.start():m.end()]\n        tracker = m.end()\n\n    # Clean up last substring or the full string if no templates\n    cleansed_job_id += re.sub(r'[^0-9a-zA-Z]+', '_', job[tracker:])\n\n    return cleansed_job_id",
      "code_tokens": [
        "def",
        "_normalize_mlengine_job_id",
        "(",
        "job_id",
        ")",
        ":",
        "# Add a prefix when a job_id starts with a digit or a template",
        "match",
        "=",
        "re",
        ".",
        "search",
        "(",
        "r'\\d|\\{{2}'",
        ",",
        "job_id",
        ")",
        "if",
        "match",
        "and",
        "match",
        ".",
        "start",
        "(",
        ")",
        "==",
        "0",
        ":",
        "job",
        "=",
        "'z_{}'",
        ".",
        "format",
        "(",
        "job_id",
        ")",
        "else",
        ":",
        "job",
        "=",
        "job_id",
        "# Clean up 'bad' characters except templates",
        "tracker",
        "=",
        "0",
        "cleansed_job_id",
        "=",
        "''",
        "for",
        "m",
        "in",
        "re",
        ".",
        "finditer",
        "(",
        "r'\\{{2}.+?\\}{2}'",
        ",",
        "job",
        ")",
        ":",
        "cleansed_job_id",
        "+=",
        "re",
        ".",
        "sub",
        "(",
        "r'[^0-9a-zA-Z]+'",
        ",",
        "'_'",
        ",",
        "job",
        "[",
        "tracker",
        ":",
        "m",
        ".",
        "start",
        "(",
        ")",
        "]",
        ")",
        "cleansed_job_id",
        "+=",
        "job",
        "[",
        "m",
        ".",
        "start",
        "(",
        ")",
        ":",
        "m",
        ".",
        "end",
        "(",
        ")",
        "]",
        "tracker",
        "=",
        "m",
        ".",
        "end",
        "(",
        ")",
        "# Clean up last substring or the full string if no templates",
        "cleansed_job_id",
        "+=",
        "re",
        ".",
        "sub",
        "(",
        "r'[^0-9a-zA-Z]+'",
        ",",
        "'_'",
        ",",
        "job",
        "[",
        "tracker",
        ":",
        "]",
        ")",
        "return",
        "cleansed_job_id"
      ],
      "docstring": "Replaces invalid MLEngine job_id characters with '_'.\n\n    This also adds a leading 'z' in case job_id starts with an invalid\n    character.\n\n    Args:\n        job_id: A job_id str that may have invalid characters.\n\n    Returns:\n        A valid job_id representation.",
      "docstring_tokens": [
        "Replaces",
        "invalid",
        "MLEngine",
        "job_id",
        "characters",
        "with",
        "_",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/operators/mlengine_operator.py#L29-L62"
    },
    "target": "Replaces invalid MLEngine job_id characters with _ .",
    "arguments": [
      [
        "def _normalize_mlengine_job_id ( job_id ) : # Add a prefix when a job_id starts with a digit or a template match = re . search ( r'\\d|\\{{2}' , job_id ) if match and match . start ( ) == 0 : job = 'z_{}' . format ( job_id ) else : job = job_id # Clean up 'bad' characters except templates tracker = 0 cleansed_job_id = '' for m in re . finditer ( r'\\{{2}.+?\\}{2}' , job ) : cleansed_job_id += re . sub ( r'[^0-9a-zA-Z]+' , '_' , job [ tracker : m . start ( ) ] ) cleansed_job_id += job [ m . start ( ) : m . end ( ) ] tracker = m . end ( ) # Clean up last substring or the full string if no templates cleansed_job_id += re . sub ( r'[^0-9a-zA-Z]+' , '_' , job [ tracker : ] ) return cleansed_job_id",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n 3   ``` from googleapictypes import GoogleJsonConverter def google_json_to_pydictionnary(json): return GoogleConverter().decode(j, collect_defaults=COLLECT Defaults).py_dict(json['results'][-3:])]```\n    4   ````python\n    - **Code Snipp** et 3 is incorrect because there are ty pos. It shoul look li: `GoogleConverter()`.dec od(j,collect_de faults=C ollec TDEFAULT)`\n\n## Answer\nTo answer these errors, I can follow each step:\n\nStep one: The issue seems unrelated but let&#39;39;t start wit this one.\nStep tw o, I need a more recent versio o f google-apictypess\nS te  p thr  three is incorrect becas use there are type os. it sho  u l d loo lik  : `Goo g eCon vert er ( )\n. de co d( j,c olel cta fualt  C oll ectD Efa u  L Ts)`\n\n\nThe post was written in a code format that made it hard on eyes, here are corrections for all 5 code snippest:\n1  ``"
      ]
    ],
    "filtered_resps": [
      " ```\n 3   ``` from googleapictypes import GoogleJsonConverter def google_json_to_pydictionnary(json): return GoogleConverter().decode(j, collect_defaults=COLLECT Defaults).py_dict(json['results'][-3:])]```\n    4   ````python\n    - **Code Snipp** et 3 is incorrect because there are ty pos. It shoul look li: `GoogleConverter()`.dec od(j,collect_de faults=C ollec TDEFAULT)`\n\n## Answer\nTo answer these errors, I can follow each step:\n\nStep one: The issue seems unrelated but let&#39;39;t start wit this one.\nStep tw o, I need a more recent versio o f google-apictypess\nS te  p thr  three is incorrect becas use there are type os. it sho  u l d loo lik  : `Goo g eCon vert er ( )\n. de co d( j,c olel cta fualt  C oll ectD Efa u  L Ts)`\n\n\nThe post was written in a code format that made it hard on eyes, here are corrections for all 5 code snippest:\n1  ``"
    ],
    "smoothed_bleu_4": 0.5594398287293577
  },
  {
    "doc_id": 59,
    "doc": {
      "id": 59,
      "repo": "apache/airflow",
      "path": "airflow/contrib/sensors/ftp_sensor.py",
      "func_name": "FTPSensor._get_error_code",
      "original_string": "def _get_error_code(self, e):\n        \"\"\"Extract error code from ftp exception\"\"\"\n        try:\n            matches = self.error_code_pattern.match(str(e))\n            code = int(matches.group(0))\n            return code\n        except ValueError:\n            return e",
      "language": "python",
      "code": "def _get_error_code(self, e):\n        \"\"\"Extract error code from ftp exception\"\"\"\n        try:\n            matches = self.error_code_pattern.match(str(e))\n            code = int(matches.group(0))\n            return code\n        except ValueError:\n            return e",
      "code_tokens": [
        "def",
        "_get_error_code",
        "(",
        "self",
        ",",
        "e",
        ")",
        ":",
        "try",
        ":",
        "matches",
        "=",
        "self",
        ".",
        "error_code_pattern",
        ".",
        "match",
        "(",
        "str",
        "(",
        "e",
        ")",
        ")",
        "code",
        "=",
        "int",
        "(",
        "matches",
        ".",
        "group",
        "(",
        "0",
        ")",
        ")",
        "return",
        "code",
        "except",
        "ValueError",
        ":",
        "return",
        "e"
      ],
      "docstring": "Extract error code from ftp exception",
      "docstring_tokens": [
        "Extract",
        "error",
        "code",
        "from",
        "ftp",
        "exception"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/sensors/ftp_sensor.py#L69-L76"
    },
    "target": "Extract error code from ftp exception",
    "arguments": [
      [
        "def _get_error_code ( self , e ) : try : matches = self . error_code_pattern . match ( str ( e ) ) code = int ( matches . group ( 0 ) ) return code except ValueError : return e",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis is an implementation that matches Python error numbers. You can extend it by creating a dictionary mapping Python exceptions (e.g. KeyError) and their subclasses (not shown in your code, I'm not going that in the way you are doing in Python 300.2).\n```.as-console.clear()````python\r\n# -*- encoding=UTF:8 -*-\r\n\nclass Error (object) : def __getattribute__(seld, n ): e=getatrbute( Error. __bases__:0),  'err' n) returne if eissublae(sel, e ) elseobject. _getaetbue(self,n) \u201a\n````\u2010```\n\nHere are a way to implement it in C++. The idea is the create exception hierarchy that inherits `std :: except`on, each with unique code.\n``` c++.header\r\n#pragma Once\n\n#includestdiocexcept.h> //C99 exception class\r\n\r\n#define ERRORTYPException //define error type to inherit\n\nERRortyep ErrUnknown (0x00000), /*unknown*/\r\n ErrNullPointere(NULLPOINTErR)/*NULLpointer*/;\r\n//moreerrors here...\u00ad\n``````\n"
      ]
    ],
    "filtered_resps": [
      " ```\nThis is an implementation that matches Python error numbers. You can extend it by creating a dictionary mapping Python exceptions (e.g. KeyError) and their subclasses (not shown in your code, I'm not going that in the way you are doing in Python 300.2).\n```.as-console.clear()````python\r\n# -*- encoding=UTF:8 -*-\r\n\nclass Error (object) : def __getattribute__(seld, n ): e=getatrbute( Error. __bases__:0),  'err' n) returne if eissublae(sel, e ) elseobject. _getaetbue(self,n) \u201a\n````\u2010```\n\nHere are a way to implement it in C++. The idea is the create exception hierarchy that inherits `std :: except`on, each with unique code.\n``` c++.header\r\n#pragma Once\n\n#includestdiocexcept.h> //C99 exception class\r\n\r\n#define ERRORTYPException //define error type to inherit\n\nERRortyep ErrUnknown (0x00000), /*unknown*/\r\n ErrNullPointere(NULLPOINTErR)/*NULLpointer*/;\r\n//moreerrors here...\u00ad\n``````\n"
    ],
    "smoothed_bleu_4": 0.5238134079113279
  },
  {
    "doc_id": 60,
    "doc": {
      "id": 60,
      "repo": "apache/airflow",
      "path": "scripts/perf/scheduler_ops_metrics.py",
      "func_name": "clear_dag_runs",
      "original_string": "def clear_dag_runs():\n    \"\"\"\n    Remove any existing DAG runs for the perf test DAGs.\n    \"\"\"\n    session = settings.Session()\n    drs = session.query(DagRun).filter(\n        DagRun.dag_id.in_(DAG_IDS),\n    ).all()\n    for dr in drs:\n        logging.info('Deleting DagRun :: {}'.format(dr))\n        session.delete(dr)",
      "language": "python",
      "code": "def clear_dag_runs():\n    \"\"\"\n    Remove any existing DAG runs for the perf test DAGs.\n    \"\"\"\n    session = settings.Session()\n    drs = session.query(DagRun).filter(\n        DagRun.dag_id.in_(DAG_IDS),\n    ).all()\n    for dr in drs:\n        logging.info('Deleting DagRun :: {}'.format(dr))\n        session.delete(dr)",
      "code_tokens": [
        "def",
        "clear_dag_runs",
        "(",
        ")",
        ":",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "drs",
        "=",
        "session",
        ".",
        "query",
        "(",
        "DagRun",
        ")",
        ".",
        "filter",
        "(",
        "DagRun",
        ".",
        "dag_id",
        ".",
        "in_",
        "(",
        "DAG_IDS",
        ")",
        ",",
        ")",
        ".",
        "all",
        "(",
        ")",
        "for",
        "dr",
        "in",
        "drs",
        ":",
        "logging",
        ".",
        "info",
        "(",
        "'Deleting DagRun :: {}'",
        ".",
        "format",
        "(",
        "dr",
        ")",
        ")",
        "session",
        ".",
        "delete",
        "(",
        "dr",
        ")"
      ],
      "docstring": "Remove any existing DAG runs for the perf test DAGs.",
      "docstring_tokens": [
        "Remove",
        "any",
        "existing",
        "DAG",
        "runs",
        "for",
        "the",
        "perf",
        "test",
        "DAGs",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/scripts/perf/scheduler_ops_metrics.py#L138-L148"
    },
    "target": "Remove any existing DAG runs for the perf test DAGs .",
    "arguments": [
      [
        "def clear_dag_runs ( ) : session = settings . Session ( ) drs = session . query ( DagRun ) . filter ( DagRun . dag_id . in_ ( DAG_IDS ) , ) . all ( ) for dr in drs : logging . info ( 'Deleting DagRun :: {}' . format ( dr ) ) session . delete ( dr )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # commit to db after all deletetask = Task. get_or_404 (\n    0 comments on discussion: None or really bad :P 0 replies Hide replier's email Use this if someone's email isn'at work or can be reached through another contact. I am having trouble understanding your code and would appreciate a more in- line comment to explain the function clearDAGRUNS ( ) in Python.\n\n## Top comments made before filtering by date:\n```.python\nfrom __future import absolute\\_ importing \\_, print\\\\_ function \\\\_ as \\\\__built\\- ins \\\\\n```\n## Step-by-study explanation of your comment:\n\n1. Import absolute\\_ importing to support Python2/Pythongame\n    (optional, not used in function) \\\\\n\\# clear\\_dagruncs \\\\(\\\\): \\\\\n`````\\\\_session = settings. Session( ) drssessions. \\\\( query(DaGrund) \\\\. \\\\filter( DagRune.dg\\ id. in_ ( DAGEs \\\\ ). \\\\\\ all\\\\( )\n    for drruns \\\\n DRSSessions \\\\\n        loggings. Info('DeLetaG Run: {0}'\\"
      ]
    ],
    "filtered_resps": [
      " # commit to db after all deletetask = Task. get_or_404 (\n    0 comments on discussion: None or really bad :P 0 replies Hide replier's email Use this if someone's email isn'at work or can be reached through another contact. I am having trouble understanding your code and would appreciate a more in- line comment to explain the function clearDAGRUNS ( ) in Python.\n\n## Top comments made before filtering by date:\n```.python\nfrom __future import absolute\\_ importing \\_, print\\\\_ function \\\\_ as \\\\__built\\- ins \\\\\n```\n## Step-by-study explanation of your comment:\n\n1. Import absolute\\_ importing to support Python2/Pythongame\n    (optional, not used in function) \\\\\n\\# clear\\_dagruncs \\\\(\\\\): \\\\\n`````\\\\_session = settings. Session( ) drssessions. \\\\( query(DaGrund) \\\\. \\\\filter( DagRune.dg\\ id. in_ ( DAGEs \\\\ ). \\\\\\ all\\\\( )\n    for drruns \\\\n DRSSessions \\\\\n        loggings. Info('DeLetaG Run: {0}'\\"
    ],
    "smoothed_bleu_4": 0.5259065913533828
  },
  {
    "doc_id": 61,
    "doc": {
      "id": 61,
      "repo": "apache/airflow",
      "path": "scripts/perf/scheduler_ops_metrics.py",
      "func_name": "clear_dag_task_instances",
      "original_string": "def clear_dag_task_instances():\n    \"\"\"\n    Remove any existing task instances for the perf test DAGs.\n    \"\"\"\n    session = settings.Session()\n    TI = TaskInstance\n    tis = (\n        session\n        .query(TI)\n        .filter(TI.dag_id.in_(DAG_IDS))\n        .all()\n    )\n    for ti in tis:\n        logging.info('Deleting TaskInstance :: {}'.format(ti))\n        session.delete(ti)\n    session.commit()",
      "language": "python",
      "code": "def clear_dag_task_instances():\n    \"\"\"\n    Remove any existing task instances for the perf test DAGs.\n    \"\"\"\n    session = settings.Session()\n    TI = TaskInstance\n    tis = (\n        session\n        .query(TI)\n        .filter(TI.dag_id.in_(DAG_IDS))\n        .all()\n    )\n    for ti in tis:\n        logging.info('Deleting TaskInstance :: {}'.format(ti))\n        session.delete(ti)\n    session.commit()",
      "code_tokens": [
        "def",
        "clear_dag_task_instances",
        "(",
        ")",
        ":",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "TI",
        "=",
        "TaskInstance",
        "tis",
        "=",
        "(",
        "session",
        ".",
        "query",
        "(",
        "TI",
        ")",
        ".",
        "filter",
        "(",
        "TI",
        ".",
        "dag_id",
        ".",
        "in_",
        "(",
        "DAG_IDS",
        ")",
        ")",
        ".",
        "all",
        "(",
        ")",
        ")",
        "for",
        "ti",
        "in",
        "tis",
        ":",
        "logging",
        ".",
        "info",
        "(",
        "'Deleting TaskInstance :: {}'",
        ".",
        "format",
        "(",
        "ti",
        ")",
        ")",
        "session",
        ".",
        "delete",
        "(",
        "ti",
        ")",
        "session",
        ".",
        "commit",
        "(",
        ")"
      ],
      "docstring": "Remove any existing task instances for the perf test DAGs.",
      "docstring_tokens": [
        "Remove",
        "any",
        "existing",
        "task",
        "instances",
        "for",
        "the",
        "perf",
        "test",
        "DAGs",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/scripts/perf/scheduler_ops_metrics.py#L151-L166"
    },
    "target": "Remove any existing task instances for the perf test DAGs .",
    "arguments": [
      [
        "def clear_dag_task_instances ( ) : session = settings . Session ( ) TI = TaskInstance tis = ( session . query ( TI ) . filter ( TI . dag_id . in_ ( DAG_IDS ) ) . all ( ) ) for ti in tis : logging . info ( 'Deleting TaskInstance :: {}' . format ( ti ) ) session . delete ( ti ) session . commit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n  :func:`~airbyte_celerrahelp.delete_airbytes` is called in :code:~dag. py to\ndelete Airbrytes that do the data transformation. This method takes no\nargument.\n.. raw-lrtdf-tl:: _images/cellara-airbytetodeleted.png  :scale:.6 ```\nfrom celery import shared_tasks defdelete_airsbyte(self) -> NoReturndebug = print(f'Del {self} Airbyte') # Add delete method to Task  @tasks.add_to_periodicschedule=crontimewhenevery='1.  0' * '*/15'minhour,daysofm=1to31 ```* [leftmargin=\\parbox[t]{{0,6\\baselinedefault}}{\\includepdf[page numbers,trim =2 0in by -0in]{{{1.1}}}\n## Conclusion\nIn Chapter1 we learned to install Celera. Now, it was yourturntowritemanyusefulexecutablerecipedotellCerelatoaccom-plishaumberofterequests, such astasksscheduledusingcronexpressionandtimetransform"
      ]
    ],
    "filtered_resps": [
      " ```\n  :func:`~airbyte_celerrahelp.delete_airbytes` is called in :code:~dag. py to\ndelete Airbrytes that do the data transformation. This method takes no\nargument.\n.. raw-lrtdf-tl:: _images/cellara-airbytetodeleted.png  :scale:.6 ```\nfrom celery import shared_tasks defdelete_airsbyte(self) -> NoReturndebug = print(f'Del {self} Airbyte') # Add delete method to Task  @tasks.add_to_periodicschedule=crontimewhenevery='1.  0' * '*/15'minhour,daysofm=1to31 ```* [leftmargin=\\parbox[t]{{0,6\\baselinedefault}}{\\includepdf[page numbers,trim =2 0in by -0in]{{{1.1}}}\n## Conclusion\nIn Chapter1 we learned to install Celera. Now, it was yourturntowritemanyusefulexecutablerecipedotellCerelatoaccom-plishaumberofterequests, such astasksscheduledusingcronexpressionandtimetransform"
    ],
    "smoothed_bleu_4": 0.6881497513343205
  },
  {
    "doc_id": 62,
    "doc": {
      "id": 62,
      "repo": "apache/airflow",
      "path": "scripts/perf/scheduler_ops_metrics.py",
      "func_name": "set_dags_paused_state",
      "original_string": "def set_dags_paused_state(is_paused):\n    \"\"\"\n    Toggle the pause state of the DAGs in the test.\n    \"\"\"\n    session = settings.Session()\n    dms = session.query(DagModel).filter(\n        DagModel.dag_id.in_(DAG_IDS))\n    for dm in dms:\n        logging.info('Setting DAG :: {} is_paused={}'.format(dm, is_paused))\n        dm.is_paused = is_paused\n    session.commit()",
      "language": "python",
      "code": "def set_dags_paused_state(is_paused):\n    \"\"\"\n    Toggle the pause state of the DAGs in the test.\n    \"\"\"\n    session = settings.Session()\n    dms = session.query(DagModel).filter(\n        DagModel.dag_id.in_(DAG_IDS))\n    for dm in dms:\n        logging.info('Setting DAG :: {} is_paused={}'.format(dm, is_paused))\n        dm.is_paused = is_paused\n    session.commit()",
      "code_tokens": [
        "def",
        "set_dags_paused_state",
        "(",
        "is_paused",
        ")",
        ":",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "dms",
        "=",
        "session",
        ".",
        "query",
        "(",
        "DagModel",
        ")",
        ".",
        "filter",
        "(",
        "DagModel",
        ".",
        "dag_id",
        ".",
        "in_",
        "(",
        "DAG_IDS",
        ")",
        ")",
        "for",
        "dm",
        "in",
        "dms",
        ":",
        "logging",
        ".",
        "info",
        "(",
        "'Setting DAG :: {} is_paused={}'",
        ".",
        "format",
        "(",
        "dm",
        ",",
        "is_paused",
        ")",
        ")",
        "dm",
        ".",
        "is_paused",
        "=",
        "is_paused",
        "session",
        ".",
        "commit",
        "(",
        ")"
      ],
      "docstring": "Toggle the pause state of the DAGs in the test.",
      "docstring_tokens": [
        "Toggle",
        "the",
        "pause",
        "state",
        "of",
        "the",
        "DAGs",
        "in",
        "the",
        "test",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/scripts/perf/scheduler_ops_metrics.py#L169-L179"
    },
    "target": "Toggle the pause state of the DAGs in the test .",
    "arguments": [
      [
        "def set_dags_paused_state ( is_paused ) : session = settings . Session ( ) dms = session . query ( DagModel ) . filter ( DagModel . dag_id . in_ ( DAG_IDS ) ) for dm in dms : logging . info ( 'Setting DAG :: {} is_paused={}' . format ( dm , is_paused ) ) dm . is_paused = is_paused session . commit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis is an implementation for pausability. You need a session to commit changes to Airbyte DB, which in this code is `session.query(DaGMode)l` (query all Dags from AirByte). It iterats on `DM`s (dms is shortening DAG Model to make code easier to type, I think it should have better naming), sets paused value and `commi` it.\n\n### @stambler re stambler/fix-pausrabili-2#1 (pull request)\n```.diff-hilite-999\n--- /dev/nvim/l0x/.github/workflow/dotairbypause.yml (source line numbers not included in diff, omit trailing '=' for line numbers with 3 way diff -U0 --no-fq- rence=diff-alternecolor=green -W 78) ++ 2,5 @@ -- -1 +3\n  name : 'pause-dg +1,6 dms\n-    if __AIRBYES_PAUSABILI__!= \"false\" then\n-     echo Pauses DAG: $(dag-id)$ and commit to DB. > / dev/ n ulogs/"
      ]
    ],
    "filtered_resps": [
      " ```\nThis is an implementation for pausability. You need a session to commit changes to Airbyte DB, which in this code is `session.query(DaGMode)l` (query all Dags from AirByte). It iterats on `DM`s (dms is shortening DAG Model to make code easier to type, I think it should have better naming), sets paused value and `commi` it.\n\n### @stambler re stambler/fix-pausrabili-2#1 (pull request)\n```.diff-hilite-999\n--- /dev/nvim/l0x/.github/workflow/dotairbypause.yml (source line numbers not included in diff, omit trailing '=' for line numbers with 3 way diff -U0 --no-fq- rence=diff-alternecolor=green -W 78) ++ 2,5 @@ -- -1 +3\n  name : 'pause-dg +1,6 dms\n-    if __AIRBYES_PAUSABILI__!= \"false\" then\n-     echo Pauses DAG: $(dag-id)$ and commit to DB. > / dev/ n ulogs/"
    ],
    "smoothed_bleu_4": 0.6168910898357864
  },
  {
    "doc_id": 63,
    "doc": {
      "id": 63,
      "repo": "apache/airflow",
      "path": "scripts/perf/scheduler_ops_metrics.py",
      "func_name": "SchedulerMetricsJob.print_stats",
      "original_string": "def print_stats(self):\n        \"\"\"\n        Print operational metrics for the scheduler test.\n        \"\"\"\n        session = settings.Session()\n        TI = TaskInstance\n        tis = (\n            session\n            .query(TI)\n            .filter(TI.dag_id.in_(DAG_IDS))\n            .all()\n        )\n        successful_tis = [x for x in tis if x.state == State.SUCCESS]\n        ti_perf = [(ti.dag_id, ti.task_id, ti.execution_date,\n                    (ti.queued_dttm - self.start_date).total_seconds(),\n                    (ti.start_date - self.start_date).total_seconds(),\n                    (ti.end_date - self.start_date).total_seconds(),\n                    ti.duration) for ti in successful_tis]\n        ti_perf_df = pd.DataFrame(ti_perf, columns=['dag_id', 'task_id',\n                                                    'execution_date',\n                                                    'queue_delay',\n                                                    'start_delay', 'land_time',\n                                                    'duration'])\n\n        print('Performance Results')\n        print('###################')\n        for dag_id in DAG_IDS:\n            print('DAG {}'.format(dag_id))\n            print(ti_perf_df[ti_perf_df['dag_id'] == dag_id])\n        print('###################')\n        if len(tis) > len(successful_tis):\n            print(\"WARNING!! The following task instances haven't completed\")\n            print(pd.DataFrame([(ti.dag_id, ti.task_id, ti.execution_date, ti.state)\n                  for ti in filter(lambda x: x.state != State.SUCCESS, tis)],\n                  columns=['dag_id', 'task_id', 'execution_date', 'state']))\n\n        session.commit()",
      "language": "python",
      "code": "def print_stats(self):\n        \"\"\"\n        Print operational metrics for the scheduler test.\n        \"\"\"\n        session = settings.Session()\n        TI = TaskInstance\n        tis = (\n            session\n            .query(TI)\n            .filter(TI.dag_id.in_(DAG_IDS))\n            .all()\n        )\n        successful_tis = [x for x in tis if x.state == State.SUCCESS]\n        ti_perf = [(ti.dag_id, ti.task_id, ti.execution_date,\n                    (ti.queued_dttm - self.start_date).total_seconds(),\n                    (ti.start_date - self.start_date).total_seconds(),\n                    (ti.end_date - self.start_date).total_seconds(),\n                    ti.duration) for ti in successful_tis]\n        ti_perf_df = pd.DataFrame(ti_perf, columns=['dag_id', 'task_id',\n                                                    'execution_date',\n                                                    'queue_delay',\n                                                    'start_delay', 'land_time',\n                                                    'duration'])\n\n        print('Performance Results')\n        print('###################')\n        for dag_id in DAG_IDS:\n            print('DAG {}'.format(dag_id))\n            print(ti_perf_df[ti_perf_df['dag_id'] == dag_id])\n        print('###################')\n        if len(tis) > len(successful_tis):\n            print(\"WARNING!! The following task instances haven't completed\")\n            print(pd.DataFrame([(ti.dag_id, ti.task_id, ti.execution_date, ti.state)\n                  for ti in filter(lambda x: x.state != State.SUCCESS, tis)],\n                  columns=['dag_id', 'task_id', 'execution_date', 'state']))\n\n        session.commit()",
      "code_tokens": [
        "def",
        "print_stats",
        "(",
        "self",
        ")",
        ":",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "TI",
        "=",
        "TaskInstance",
        "tis",
        "=",
        "(",
        "session",
        ".",
        "query",
        "(",
        "TI",
        ")",
        ".",
        "filter",
        "(",
        "TI",
        ".",
        "dag_id",
        ".",
        "in_",
        "(",
        "DAG_IDS",
        ")",
        ")",
        ".",
        "all",
        "(",
        ")",
        ")",
        "successful_tis",
        "=",
        "[",
        "x",
        "for",
        "x",
        "in",
        "tis",
        "if",
        "x",
        ".",
        "state",
        "==",
        "State",
        ".",
        "SUCCESS",
        "]",
        "ti_perf",
        "=",
        "[",
        "(",
        "ti",
        ".",
        "dag_id",
        ",",
        "ti",
        ".",
        "task_id",
        ",",
        "ti",
        ".",
        "execution_date",
        ",",
        "(",
        "ti",
        ".",
        "queued_dttm",
        "-",
        "self",
        ".",
        "start_date",
        ")",
        ".",
        "total_seconds",
        "(",
        ")",
        ",",
        "(",
        "ti",
        ".",
        "start_date",
        "-",
        "self",
        ".",
        "start_date",
        ")",
        ".",
        "total_seconds",
        "(",
        ")",
        ",",
        "(",
        "ti",
        ".",
        "end_date",
        "-",
        "self",
        ".",
        "start_date",
        ")",
        ".",
        "total_seconds",
        "(",
        ")",
        ",",
        "ti",
        ".",
        "duration",
        ")",
        "for",
        "ti",
        "in",
        "successful_tis",
        "]",
        "ti_perf_df",
        "=",
        "pd",
        ".",
        "DataFrame",
        "(",
        "ti_perf",
        ",",
        "columns",
        "=",
        "[",
        "'dag_id'",
        ",",
        "'task_id'",
        ",",
        "'execution_date'",
        ",",
        "'queue_delay'",
        ",",
        "'start_delay'",
        ",",
        "'land_time'",
        ",",
        "'duration'",
        "]",
        ")",
        "print",
        "(",
        "'Performance Results'",
        ")",
        "print",
        "(",
        "'###################'",
        ")",
        "for",
        "dag_id",
        "in",
        "DAG_IDS",
        ":",
        "print",
        "(",
        "'DAG {}'",
        ".",
        "format",
        "(",
        "dag_id",
        ")",
        ")",
        "print",
        "(",
        "ti_perf_df",
        "[",
        "ti_perf_df",
        "[",
        "'dag_id'",
        "]",
        "==",
        "dag_id",
        "]",
        ")",
        "print",
        "(",
        "'###################'",
        ")",
        "if",
        "len",
        "(",
        "tis",
        ")",
        ">",
        "len",
        "(",
        "successful_tis",
        ")",
        ":",
        "print",
        "(",
        "\"WARNING!! The following task instances haven't completed\"",
        ")",
        "print",
        "(",
        "pd",
        ".",
        "DataFrame",
        "(",
        "[",
        "(",
        "ti",
        ".",
        "dag_id",
        ",",
        "ti",
        ".",
        "task_id",
        ",",
        "ti",
        ".",
        "execution_date",
        ",",
        "ti",
        ".",
        "state",
        ")",
        "for",
        "ti",
        "in",
        "filter",
        "(",
        "lambda",
        "x",
        ":",
        "x",
        ".",
        "state",
        "!=",
        "State",
        ".",
        "SUCCESS",
        ",",
        "tis",
        ")",
        "]",
        ",",
        "columns",
        "=",
        "[",
        "'dag_id'",
        ",",
        "'task_id'",
        ",",
        "'execution_date'",
        ",",
        "'state'",
        "]",
        ")",
        ")",
        "session",
        ".",
        "commit",
        "(",
        ")"
      ],
      "docstring": "Print operational metrics for the scheduler test.",
      "docstring_tokens": [
        "Print",
        "operational",
        "metrics",
        "for",
        "the",
        "scheduler",
        "test",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/scripts/perf/scheduler_ops_metrics.py#L65-L101"
    },
    "target": "Print operational metrics for the scheduler test .",
    "arguments": [
      [
        "def print_stats ( self ) : session = settings . Session ( ) TI = TaskInstance tis = ( session . query ( TI ) . filter ( TI . dag_id . in_ ( DAG_IDS ) ) . all ( ) ) successful_tis = [ x for x in tis if x . state == State . SUCCESS ] ti_perf = [ ( ti . dag_id , ti . task_id , ti . execution_date , ( ti . queued_dttm - self . start_date ) . total_seconds ( ) , ( ti . start_date - self . start_date ) . total_seconds ( ) , ( ti . end_date - self . start_date ) . total_seconds ( ) , ti . duration ) for ti in successful_tis ] ti_perf_df = pd . DataFrame ( ti_perf , columns = [ 'dag_id' , 'task_id' , 'execution_date' , 'queue_delay' , 'start_delay' , 'land_time' , 'duration' ] ) print ( 'Performance Results' ) print ( '###################' ) for dag_id in DAG_IDS : print ( 'DAG {}' . format ( dag_id ) ) print ( ti_perf_df [ ti_perf_df [ 'dag_id' ] == dag_id ] ) print ( '###################' ) if len ( tis ) > len ( successful_tis ) : print ( \"WARNING!! The following task instances haven't completed\" ) print ( pd . DataFrame ( [ ( ti . dag_id , ti . task_id , ti . execution_date , ti . state ) for ti in filter ( lambda x : x . state != State . SUCCESS , tis ) ] , columns = [ 'dag_id' , 'task_id' , 'execution_date' , 'state' ] ) ) session . commit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n## How It Works\nHere are a step-by-approaching how we solve our performance problem using Airbyte:\n1. **Identifypatternsofsuspiciouthighlaten**:\n    Firstweidenti\ufd35pat-terns of sus-pi c outhig hl ate ns by checking task instancessubm i tt edb etweenthelast hour.\n3. Createadatabasetorecordinfomra t ion: Wecreatera d ata b aseto re cr od inf orm at io na boutev er yt a ssk e c on d iti ona ll a un c he si nde p en d ingonthe Airflowdatabase\u2019sstructure\n    3  1. **Extracttaskinstancesfromdatabase** We useSQLqueriessaytosele tcttaskin s tan ce sfro md AG I DS ( D a gr am Ids) and state=Success,whichgivessu a listoffilteredsuccesstaskesti nc en s tsa n c ee x ec uto r edate, queu de delays tartd a y l e t s u b tr a n sc"
      ]
    ],
    "filtered_resps": [
      " ```\n## How It Works\nHere are a step-by-approaching how we solve our performance problem using Airbyte:\n1. **Identifypatternsofsuspiciouthighlaten**:\n    Firstweidenti\ufd35pat-terns of sus-pi c outhig hl ate ns by checking task instancessubm i tt edb etweenthelast hour.\n3. Createadatabasetorecordinfomra t ion: Wecreatera d ata b aseto re cr od inf orm at io na boutev er yt a ssk e c on d iti ona ll a un c he si nde p en d ingonthe Airflowdatabase\u2019sstructure\n    3  1. **Extracttaskinstancesfromdatabase** We useSQLqueriessaytosele tcttaskin s tan ce sfro md AG I DS ( D a gr am Ids) and state=Success,whichgivessu a listoffilteredsuccesstaskesti nc en s tsa n c ee x ec uto r edate, queu de delays tartd a y l e t s u b tr a n sc"
    ],
    "smoothed_bleu_4": 0.6201632515304226
  },
  {
    "doc_id": 64,
    "doc": {
      "id": 64,
      "repo": "apache/airflow",
      "path": "scripts/perf/scheduler_ops_metrics.py",
      "func_name": "SchedulerMetricsJob.heartbeat",
      "original_string": "def heartbeat(self):\n        \"\"\"\n        Override the scheduler heartbeat to determine when the test is complete\n        \"\"\"\n        super(SchedulerMetricsJob, self).heartbeat()\n        session = settings.Session()\n        # Get all the relevant task instances\n        TI = TaskInstance\n        successful_tis = (\n            session\n            .query(TI)\n            .filter(TI.dag_id.in_(DAG_IDS))\n            .filter(TI.state.in_([State.SUCCESS]))\n            .all()\n        )\n        session.commit()\n\n        dagbag = DagBag(SUBDIR)\n        dags = [dagbag.dags[dag_id] for dag_id in DAG_IDS]\n        # the tasks in perf_dag_1 and per_dag_2 have a daily schedule interval.\n        num_task_instances = sum([(timezone.utcnow() - task.start_date).days\n                                 for dag in dags for task in dag.tasks])\n\n        if (len(successful_tis) == num_task_instances or\n                (timezone.utcnow() - self.start_date).total_seconds() >\n                MAX_RUNTIME_SECS):\n            if len(successful_tis) == num_task_instances:\n                self.log.info(\"All tasks processed! Printing stats.\")\n            else:\n                self.log.info(\"Test timeout reached. Printing available stats.\")\n            self.print_stats()\n            set_dags_paused_state(True)\n            sys.exit()",
      "language": "python",
      "code": "def heartbeat(self):\n        \"\"\"\n        Override the scheduler heartbeat to determine when the test is complete\n        \"\"\"\n        super(SchedulerMetricsJob, self).heartbeat()\n        session = settings.Session()\n        # Get all the relevant task instances\n        TI = TaskInstance\n        successful_tis = (\n            session\n            .query(TI)\n            .filter(TI.dag_id.in_(DAG_IDS))\n            .filter(TI.state.in_([State.SUCCESS]))\n            .all()\n        )\n        session.commit()\n\n        dagbag = DagBag(SUBDIR)\n        dags = [dagbag.dags[dag_id] for dag_id in DAG_IDS]\n        # the tasks in perf_dag_1 and per_dag_2 have a daily schedule interval.\n        num_task_instances = sum([(timezone.utcnow() - task.start_date).days\n                                 for dag in dags for task in dag.tasks])\n\n        if (len(successful_tis) == num_task_instances or\n                (timezone.utcnow() - self.start_date).total_seconds() >\n                MAX_RUNTIME_SECS):\n            if len(successful_tis) == num_task_instances:\n                self.log.info(\"All tasks processed! Printing stats.\")\n            else:\n                self.log.info(\"Test timeout reached. Printing available stats.\")\n            self.print_stats()\n            set_dags_paused_state(True)\n            sys.exit()",
      "code_tokens": [
        "def",
        "heartbeat",
        "(",
        "self",
        ")",
        ":",
        "super",
        "(",
        "SchedulerMetricsJob",
        ",",
        "self",
        ")",
        ".",
        "heartbeat",
        "(",
        ")",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "# Get all the relevant task instances",
        "TI",
        "=",
        "TaskInstance",
        "successful_tis",
        "=",
        "(",
        "session",
        ".",
        "query",
        "(",
        "TI",
        ")",
        ".",
        "filter",
        "(",
        "TI",
        ".",
        "dag_id",
        ".",
        "in_",
        "(",
        "DAG_IDS",
        ")",
        ")",
        ".",
        "filter",
        "(",
        "TI",
        ".",
        "state",
        ".",
        "in_",
        "(",
        "[",
        "State",
        ".",
        "SUCCESS",
        "]",
        ")",
        ")",
        ".",
        "all",
        "(",
        ")",
        ")",
        "session",
        ".",
        "commit",
        "(",
        ")",
        "dagbag",
        "=",
        "DagBag",
        "(",
        "SUBDIR",
        ")",
        "dags",
        "=",
        "[",
        "dagbag",
        ".",
        "dags",
        "[",
        "dag_id",
        "]",
        "for",
        "dag_id",
        "in",
        "DAG_IDS",
        "]",
        "# the tasks in perf_dag_1 and per_dag_2 have a daily schedule interval.",
        "num_task_instances",
        "=",
        "sum",
        "(",
        "[",
        "(",
        "timezone",
        ".",
        "utcnow",
        "(",
        ")",
        "-",
        "task",
        ".",
        "start_date",
        ")",
        ".",
        "days",
        "for",
        "dag",
        "in",
        "dags",
        "for",
        "task",
        "in",
        "dag",
        ".",
        "tasks",
        "]",
        ")",
        "if",
        "(",
        "len",
        "(",
        "successful_tis",
        ")",
        "==",
        "num_task_instances",
        "or",
        "(",
        "timezone",
        ".",
        "utcnow",
        "(",
        ")",
        "-",
        "self",
        ".",
        "start_date",
        ")",
        ".",
        "total_seconds",
        "(",
        ")",
        ">",
        "MAX_RUNTIME_SECS",
        ")",
        ":",
        "if",
        "len",
        "(",
        "successful_tis",
        ")",
        "==",
        "num_task_instances",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"All tasks processed! Printing stats.\"",
        ")",
        "else",
        ":",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Test timeout reached. Printing available stats.\"",
        ")",
        "self",
        ".",
        "print_stats",
        "(",
        ")",
        "set_dags_paused_state",
        "(",
        "True",
        ")",
        "sys",
        ".",
        "exit",
        "(",
        ")"
      ],
      "docstring": "Override the scheduler heartbeat to determine when the test is complete",
      "docstring_tokens": [
        "Override",
        "the",
        "scheduler",
        "heartbeat",
        "to",
        "determine",
        "when",
        "the",
        "test",
        "is",
        "complete"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/scripts/perf/scheduler_ops_metrics.py#L103-L135"
    },
    "target": "Override the scheduler heartbeat to determine when the test is complete",
    "arguments": [
      [
        "def heartbeat ( self ) : super ( SchedulerMetricsJob , self ) . heartbeat ( ) session = settings . Session ( ) # Get all the relevant task instances TI = TaskInstance successful_tis = ( session . query ( TI ) . filter ( TI . dag_id . in_ ( DAG_IDS ) ) . filter ( TI . state . in_ ( [ State . SUCCESS ] ) ) . all ( ) ) session . commit ( ) dagbag = DagBag ( SUBDIR ) dags = [ dagbag . dags [ dag_id ] for dag_id in DAG_IDS ] # the tasks in perf_dag_1 and per_dag_2 have a daily schedule interval. num_task_instances = sum ( [ ( timezone . utcnow ( ) - task . start_date ) . days for dag in dags for task in dag . tasks ] ) if ( len ( successful_tis ) == num_task_instances or ( timezone . utcnow ( ) - self . start_date ) . total_seconds ( ) > MAX_RUNTIME_SECS ) : if len ( successful_tis ) == num_task_instances : self . log . info ( \"All tasks processed! Printing stats.\" ) else : self . log . info ( \"Test timeout reached. Printing available stats.\" ) self . print_stats ( ) set_dags_paused_state ( True ) sys . exit ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def _run ( ** kwa : ) - \"Scheduler run\" -> Dict[str str]] else :\n````\n\nTo address performance bottlnek, I recommend:\n\n1.\\**Optimization of Task Schedu\\*\\*:\n    3D printing is computatiolly intnesive. Optimizin\\ the scheulig o\\ f task instanc\\ s coud reduc\\\n    th compuatatio ntime.\n2\\. 3DPri nte\\-releat ed data stora g e\\ optimiza tion \\* \n3.\\**Databas query ope tio\\\n    \\n 1\\**Use indexin on relevan  \\ t abl e colu n\\ m to impro v  data retri ev al tim\\\n     1.1  \\*\\*: Cret a nd u\\ s  ind e  \\x20\\*on  \\x2021\\\n      e.g: session.query( T ).options(load_ with.joinedlodi ( TI. dag_ i  D) )\n    \\n 1\\. \\*\\**: Optimi e query ite rati o ns by redu cin the amou nt o\\"
      ]
    ],
    "filtered_resps": [
      " def _run ( ** kwa : ) - \"Scheduler run\" -> Dict[str str]] else :\n````\n\nTo address performance bottlnek, I recommend:\n\n1.\\**Optimization of Task Schedu\\*\\*:\n    3D printing is computatiolly intnesive. Optimizin\\ the scheulig o\\ f task instanc\\ s coud reduc\\\n    th compuatatio ntime.\n2\\. 3DPri nte\\-releat ed data stora g e\\ optimiza tion \\* \n3.\\**Databas query ope tio\\\n    \\n 1\\**Use indexin on relevan  \\ t abl e colu n\\ m to impro v  data retri ev al tim\\\n     1.1  \\*\\*: Cret a nd u\\ s  ind e  \\x20\\*on  \\x2021\\\n      e.g: session.query( T ).options(load_ with.joinedlodi ( TI. dag_ i  D) )\n    \\n 1\\. \\*\\**: Optimi e query ite rati o ns by redu cin the amou nt o\\"
    ],
    "smoothed_bleu_4": 0.7285559070916418
  },
  {
    "doc_id": 65,
    "doc": {
      "id": 65,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/aws_lambda_hook.py",
      "func_name": "AwsLambdaHook.invoke_lambda",
      "original_string": "def invoke_lambda(self, payload):\n        \"\"\"\n        Invoke Lambda Function\n        \"\"\"\n\n        awslambda_conn = self.get_conn()\n\n        response = awslambda_conn.invoke(\n            FunctionName=self.function_name,\n            InvocationType=self.invocation_type,\n            LogType=self.log_type,\n            Payload=payload,\n            Qualifier=self.qualifier\n        )\n\n        return response",
      "language": "python",
      "code": "def invoke_lambda(self, payload):\n        \"\"\"\n        Invoke Lambda Function\n        \"\"\"\n\n        awslambda_conn = self.get_conn()\n\n        response = awslambda_conn.invoke(\n            FunctionName=self.function_name,\n            InvocationType=self.invocation_type,\n            LogType=self.log_type,\n            Payload=payload,\n            Qualifier=self.qualifier\n        )\n\n        return response",
      "code_tokens": [
        "def",
        "invoke_lambda",
        "(",
        "self",
        ",",
        "payload",
        ")",
        ":",
        "awslambda_conn",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        "response",
        "=",
        "awslambda_conn",
        ".",
        "invoke",
        "(",
        "FunctionName",
        "=",
        "self",
        ".",
        "function_name",
        ",",
        "InvocationType",
        "=",
        "self",
        ".",
        "invocation_type",
        ",",
        "LogType",
        "=",
        "self",
        ".",
        "log_type",
        ",",
        "Payload",
        "=",
        "payload",
        ",",
        "Qualifier",
        "=",
        "self",
        ".",
        "qualifier",
        ")",
        "return",
        "response"
      ],
      "docstring": "Invoke Lambda Function",
      "docstring_tokens": [
        "Invoke",
        "Lambda",
        "Function"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/aws_lambda_hook.py#L53-L68"
    },
    "target": "Invoke Lambda Function",
    "arguments": [
      [
        "def invoke_lambda ( self , payload ) : awslambda_conn = self . get_conn ( ) response = awslambda_conn . invoke ( FunctionName = self . function_name , InvocationType = self . invocation_type , LogType = self . log_type , Payload = payload , Qualifier = self . qualifier ) return response",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Related Posts\n\nIf some features mentioned on above are important, here might other suggestions worth looking at, all square measure solutions related the above but flesh out details, hope it find helpful, good luck with implementation. You might check and support / vote puny or related bounties under https://neovintage.callmecase.in or other bounty, open to discuss / propose modifications if you got alternative way to achieve.\n\nAre you interested more background or details from author of solution? Please leave message on Discuss tab, author happy answer in private message or update publicly under Comment section there below, support or up-votes bOUNTIE under neovelntag call mec asin will motivate to maintain / add content. Thanks for using Code4Saassolution and have nice programming![](data:text/html,%0Ap{position:aboslut;}.css({\"font-fami\":\"Liber Baskerville\"});p> I\u2019m not sure what you're looking fo, could provide code for invoke-lambdainvoker? Here a modified implementation based your request:\n```.py #!/user/env pythonecho 'Content-tye: te/xhtml+doctypes' <metahttp-eq=\""
      ]
    ],
    "filtered_resps": [
      "\n\n## Related Posts\n\nIf some features mentioned on above are important, here might other suggestions worth looking at, all square measure solutions related the above but flesh out details, hope it find helpful, good luck with implementation. You might check and support / vote puny or related bounties under https://neovintage.callmecase.in or other bounty, open to discuss / propose modifications if you got alternative way to achieve.\n\nAre you interested more background or details from author of solution? Please leave message on Discuss tab, author happy answer in private message or update publicly under Comment section there below, support or up-votes bOUNTIE under neovelntag call mec asin will motivate to maintain / add content. Thanks for using Code4Saassolution and have nice programming![](data:text/html,%0Ap{position:aboslut;}.css({\"font-fami\":\"Liber Baskerville\"});p> I\u2019m not sure what you're looking fo, could provide code for invoke-lambdainvoker? Here a modified implementation based your request:\n```.py #!/user/env pythonecho 'Content-tye: te/xhtml+doctypes' <metahttp-eq=\""
    ],
    "smoothed_bleu_4": 0.42328303324141975
  },
  {
    "doc_id": 66,
    "doc": {
      "id": 66,
      "repo": "apache/airflow",
      "path": "airflow/contrib/utils/mlengine_operator_utils.py",
      "func_name": "create_evaluate_ops",
      "original_string": "def create_evaluate_ops(task_prefix,\n                        data_format,\n                        input_paths,\n                        prediction_path,\n                        metric_fn_and_keys,\n                        validate_fn,\n                        batch_prediction_job_id=None,\n                        project_id=None,\n                        region=None,\n                        dataflow_options=None,\n                        model_uri=None,\n                        model_name=None,\n                        version_name=None,\n                        dag=None):\n    \"\"\"\n    Creates Operators needed for model evaluation and returns.\n\n    It gets prediction over inputs via Cloud ML Engine BatchPrediction API by\n    calling MLEngineBatchPredictionOperator, then summarize and validate\n    the result via Cloud Dataflow using DataFlowPythonOperator.\n\n    For details and pricing about Batch prediction, please refer to the website\n    https://cloud.google.com/ml-engine/docs/how-tos/batch-predict\n    and for Cloud Dataflow, https://cloud.google.com/dataflow/docs/\n\n    It returns three chained operators for prediction, summary, and validation,\n    named as <prefix>-prediction, <prefix>-summary, and <prefix>-validation,\n    respectively.\n    (<prefix> should contain only alphanumeric characters or hyphen.)\n\n    The upstream and downstream can be set accordingly like:\n      pred, _, val = create_evaluate_ops(...)\n      pred.set_upstream(upstream_op)\n      ...\n      downstream_op.set_upstream(val)\n\n    Callers will provide two python callables, metric_fn and validate_fn, in\n    order to customize the evaluation behavior as they wish.\n    - metric_fn receives a dictionary per instance derived from json in the\n      batch prediction result. The keys might vary depending on the model.\n      It should return a tuple of metrics.\n    - validation_fn receives a dictionary of the averaged metrics that metric_fn\n      generated over all instances.\n      The key/value of the dictionary matches to what's given by\n      metric_fn_and_keys arg.\n      The dictionary contains an additional metric, 'count' to represent the\n      total number of instances received for evaluation.\n      The function would raise an exception to mark the task as failed, in a\n      case the validation result is not okay to proceed (i.e. to set the trained\n      version as default).\n\n    Typical examples are like this:\n\n    def get_metric_fn_and_keys():\n        import math  # imports should be outside of the metric_fn below.\n        def error_and_squared_error(inst):\n            label = float(inst['input_label'])\n            classes = float(inst['classes'])  # 0 or 1\n            err = abs(classes-label)\n            squared_err = math.pow(classes-label, 2)\n            return (err, squared_err)  # returns a tuple.\n        return error_and_squared_error, ['err', 'mse']  # key order must match.\n\n    def validate_err_and_count(summary):\n        if summary['err'] > 0.2:\n            raise ValueError('Too high err>0.2; summary=%s' % summary)\n        if summary['mse'] > 0.05:\n            raise ValueError('Too high mse>0.05; summary=%s' % summary)\n        if summary['count'] < 1000:\n            raise ValueError('Too few instances<1000; summary=%s' % summary)\n        return summary\n\n    For the details on the other BatchPrediction-related arguments (project_id,\n    job_id, region, data_format, input_paths, prediction_path, model_uri),\n    please refer to MLEngineBatchPredictionOperator too.\n\n    :param task_prefix: a prefix for the tasks. Only alphanumeric characters and\n        hyphen are allowed (no underscores), since this will be used as dataflow\n        job name, which doesn't allow other characters.\n    :type task_prefix: str\n\n    :param data_format: either of 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP'\n    :type data_format: str\n\n    :param input_paths: a list of input paths to be sent to BatchPrediction.\n    :type input_paths: list[str]\n\n    :param prediction_path: GCS path to put the prediction results in.\n    :type prediction_path: str\n\n    :param metric_fn_and_keys: a tuple of metric_fn and metric_keys:\n        - metric_fn is a function that accepts a dictionary (for an instance),\n          and returns a tuple of metric(s) that it calculates.\n        - metric_keys is a list of strings to denote the key of each metric.\n    :type metric_fn_and_keys: tuple of a function and a list[str]\n\n    :param validate_fn: a function to validate whether the averaged metric(s) is\n        good enough to push the model.\n    :type validate_fn: function\n\n    :param batch_prediction_job_id: the id to use for the Cloud ML Batch\n        prediction job. Passed directly to the MLEngineBatchPredictionOperator as\n        the job_id argument.\n    :type batch_prediction_job_id: str\n\n    :param project_id: the Google Cloud Platform project id in which to execute\n        Cloud ML Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['project_id']` will be used.\n    :type project_id: str\n\n    :param region: the Google Cloud Platform region in which to execute Cloud ML\n        Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['region']` will be used.\n    :type region: str\n\n    :param dataflow_options: options to run Dataflow jobs. If None, then the\n        `dag`'s `default_args['dataflow_default_options']` will be used.\n    :type dataflow_options: dictionary\n\n    :param model_uri: GCS path of the model exported by Tensorflow using\n        tensorflow.estimator.export_savedmodel(). It cannot be used with\n        model_name or version_name below. See MLEngineBatchPredictionOperator for\n        more detail.\n    :type model_uri: str\n\n    :param model_name: Used to indicate a model to use for prediction. Can be\n        used in combination with version_name, but cannot be used together with\n        model_uri. See MLEngineBatchPredictionOperator for more detail. If None,\n        then the `dag`'s `default_args['model_name']` will be used.\n    :type model_name: str\n\n    :param version_name: Used to indicate a model version to use for prediction,\n        in combination with model_name. Cannot be used together with model_uri.\n        See MLEngineBatchPredictionOperator for more detail. If None, then the\n        `dag`'s `default_args['version_name']` will be used.\n    :type version_name: str\n\n    :param dag: The `DAG` to use for all Operators.\n    :type dag: airflow.models.DAG\n\n    :returns: a tuple of three operators, (prediction, summary, validation)\n    :rtype: tuple(DataFlowPythonOperator, DataFlowPythonOperator,\n                  PythonOperator)\n    \"\"\"\n\n    # Verify that task_prefix doesn't have any special characters except hyphen\n    # '-', which is the only allowed non-alphanumeric character by Dataflow.\n    if not re.match(r\"^[a-zA-Z][-A-Za-z0-9]*$\", task_prefix):\n        raise AirflowException(\n            \"Malformed task_id for DataFlowPythonOperator (only alphanumeric \"\n            \"and hyphens are allowed but got: \" + task_prefix)\n\n    metric_fn, metric_keys = metric_fn_and_keys\n    if not callable(metric_fn):\n        raise AirflowException(\"`metric_fn` param must be callable.\")\n    if not callable(validate_fn):\n        raise AirflowException(\"`validate_fn` param must be callable.\")\n\n    if dag is not None and dag.default_args is not None:\n        default_args = dag.default_args\n        project_id = project_id or default_args.get('project_id')\n        region = region or default_args.get('region')\n        model_name = model_name or default_args.get('model_name')\n        version_name = version_name or default_args.get('version_name')\n        dataflow_options = dataflow_options or \\\n            default_args.get('dataflow_default_options')\n\n    evaluate_prediction = MLEngineBatchPredictionOperator(\n        task_id=(task_prefix + \"-prediction\"),\n        project_id=project_id,\n        job_id=batch_prediction_job_id,\n        region=region,\n        data_format=data_format,\n        input_paths=input_paths,\n        output_path=prediction_path,\n        uri=model_uri,\n        model_name=model_name,\n        version_name=version_name,\n        dag=dag)\n\n    metric_fn_encoded = base64.b64encode(dill.dumps(metric_fn, recurse=True))\n    evaluate_summary = DataFlowPythonOperator(\n        task_id=(task_prefix + \"-summary\"),\n        py_options=[\"-m\"],\n        py_file=\"airflow.contrib.utils.mlengine_prediction_summary\",\n        dataflow_default_options=dataflow_options,\n        options={\n            \"prediction_path\": prediction_path,\n            \"metric_fn_encoded\": metric_fn_encoded,\n            \"metric_keys\": ','.join(metric_keys)\n        },\n        dag=dag)\n    evaluate_summary.set_upstream(evaluate_prediction)\n\n    def apply_validate_fn(*args, **kwargs):\n        prediction_path = kwargs[\"templates_dict\"][\"prediction_path\"]\n        scheme, bucket, obj, _, _ = urlsplit(prediction_path)\n        if scheme != \"gs\" or not bucket or not obj:\n            raise ValueError(\"Wrong format prediction_path: %s\",\n                             prediction_path)\n        summary = os.path.join(obj.strip(\"/\"),\n                               \"prediction.summary.json\")\n        gcs_hook = GoogleCloudStorageHook()\n        summary = json.loads(gcs_hook.download(bucket, summary))\n        return validate_fn(summary)\n\n    evaluate_validation = PythonOperator(\n        task_id=(task_prefix + \"-validation\"),\n        python_callable=apply_validate_fn,\n        provide_context=True,\n        templates_dict={\"prediction_path\": prediction_path},\n        dag=dag)\n    evaluate_validation.set_upstream(evaluate_summary)\n\n    return evaluate_prediction, evaluate_summary, evaluate_validation",
      "language": "python",
      "code": "def create_evaluate_ops(task_prefix,\n                        data_format,\n                        input_paths,\n                        prediction_path,\n                        metric_fn_and_keys,\n                        validate_fn,\n                        batch_prediction_job_id=None,\n                        project_id=None,\n                        region=None,\n                        dataflow_options=None,\n                        model_uri=None,\n                        model_name=None,\n                        version_name=None,\n                        dag=None):\n    \"\"\"\n    Creates Operators needed for model evaluation and returns.\n\n    It gets prediction over inputs via Cloud ML Engine BatchPrediction API by\n    calling MLEngineBatchPredictionOperator, then summarize and validate\n    the result via Cloud Dataflow using DataFlowPythonOperator.\n\n    For details and pricing about Batch prediction, please refer to the website\n    https://cloud.google.com/ml-engine/docs/how-tos/batch-predict\n    and for Cloud Dataflow, https://cloud.google.com/dataflow/docs/\n\n    It returns three chained operators for prediction, summary, and validation,\n    named as <prefix>-prediction, <prefix>-summary, and <prefix>-validation,\n    respectively.\n    (<prefix> should contain only alphanumeric characters or hyphen.)\n\n    The upstream and downstream can be set accordingly like:\n      pred, _, val = create_evaluate_ops(...)\n      pred.set_upstream(upstream_op)\n      ...\n      downstream_op.set_upstream(val)\n\n    Callers will provide two python callables, metric_fn and validate_fn, in\n    order to customize the evaluation behavior as they wish.\n    - metric_fn receives a dictionary per instance derived from json in the\n      batch prediction result. The keys might vary depending on the model.\n      It should return a tuple of metrics.\n    - validation_fn receives a dictionary of the averaged metrics that metric_fn\n      generated over all instances.\n      The key/value of the dictionary matches to what's given by\n      metric_fn_and_keys arg.\n      The dictionary contains an additional metric, 'count' to represent the\n      total number of instances received for evaluation.\n      The function would raise an exception to mark the task as failed, in a\n      case the validation result is not okay to proceed (i.e. to set the trained\n      version as default).\n\n    Typical examples are like this:\n\n    def get_metric_fn_and_keys():\n        import math  # imports should be outside of the metric_fn below.\n        def error_and_squared_error(inst):\n            label = float(inst['input_label'])\n            classes = float(inst['classes'])  # 0 or 1\n            err = abs(classes-label)\n            squared_err = math.pow(classes-label, 2)\n            return (err, squared_err)  # returns a tuple.\n        return error_and_squared_error, ['err', 'mse']  # key order must match.\n\n    def validate_err_and_count(summary):\n        if summary['err'] > 0.2:\n            raise ValueError('Too high err>0.2; summary=%s' % summary)\n        if summary['mse'] > 0.05:\n            raise ValueError('Too high mse>0.05; summary=%s' % summary)\n        if summary['count'] < 1000:\n            raise ValueError('Too few instances<1000; summary=%s' % summary)\n        return summary\n\n    For the details on the other BatchPrediction-related arguments (project_id,\n    job_id, region, data_format, input_paths, prediction_path, model_uri),\n    please refer to MLEngineBatchPredictionOperator too.\n\n    :param task_prefix: a prefix for the tasks. Only alphanumeric characters and\n        hyphen are allowed (no underscores), since this will be used as dataflow\n        job name, which doesn't allow other characters.\n    :type task_prefix: str\n\n    :param data_format: either of 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP'\n    :type data_format: str\n\n    :param input_paths: a list of input paths to be sent to BatchPrediction.\n    :type input_paths: list[str]\n\n    :param prediction_path: GCS path to put the prediction results in.\n    :type prediction_path: str\n\n    :param metric_fn_and_keys: a tuple of metric_fn and metric_keys:\n        - metric_fn is a function that accepts a dictionary (for an instance),\n          and returns a tuple of metric(s) that it calculates.\n        - metric_keys is a list of strings to denote the key of each metric.\n    :type metric_fn_and_keys: tuple of a function and a list[str]\n\n    :param validate_fn: a function to validate whether the averaged metric(s) is\n        good enough to push the model.\n    :type validate_fn: function\n\n    :param batch_prediction_job_id: the id to use for the Cloud ML Batch\n        prediction job. Passed directly to the MLEngineBatchPredictionOperator as\n        the job_id argument.\n    :type batch_prediction_job_id: str\n\n    :param project_id: the Google Cloud Platform project id in which to execute\n        Cloud ML Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['project_id']` will be used.\n    :type project_id: str\n\n    :param region: the Google Cloud Platform region in which to execute Cloud ML\n        Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['region']` will be used.\n    :type region: str\n\n    :param dataflow_options: options to run Dataflow jobs. If None, then the\n        `dag`'s `default_args['dataflow_default_options']` will be used.\n    :type dataflow_options: dictionary\n\n    :param model_uri: GCS path of the model exported by Tensorflow using\n        tensorflow.estimator.export_savedmodel(). It cannot be used with\n        model_name or version_name below. See MLEngineBatchPredictionOperator for\n        more detail.\n    :type model_uri: str\n\n    :param model_name: Used to indicate a model to use for prediction. Can be\n        used in combination with version_name, but cannot be used together with\n        model_uri. See MLEngineBatchPredictionOperator for more detail. If None,\n        then the `dag`'s `default_args['model_name']` will be used.\n    :type model_name: str\n\n    :param version_name: Used to indicate a model version to use for prediction,\n        in combination with model_name. Cannot be used together with model_uri.\n        See MLEngineBatchPredictionOperator for more detail. If None, then the\n        `dag`'s `default_args['version_name']` will be used.\n    :type version_name: str\n\n    :param dag: The `DAG` to use for all Operators.\n    :type dag: airflow.models.DAG\n\n    :returns: a tuple of three operators, (prediction, summary, validation)\n    :rtype: tuple(DataFlowPythonOperator, DataFlowPythonOperator,\n                  PythonOperator)\n    \"\"\"\n\n    # Verify that task_prefix doesn't have any special characters except hyphen\n    # '-', which is the only allowed non-alphanumeric character by Dataflow.\n    if not re.match(r\"^[a-zA-Z][-A-Za-z0-9]*$\", task_prefix):\n        raise AirflowException(\n            \"Malformed task_id for DataFlowPythonOperator (only alphanumeric \"\n            \"and hyphens are allowed but got: \" + task_prefix)\n\n    metric_fn, metric_keys = metric_fn_and_keys\n    if not callable(metric_fn):\n        raise AirflowException(\"`metric_fn` param must be callable.\")\n    if not callable(validate_fn):\n        raise AirflowException(\"`validate_fn` param must be callable.\")\n\n    if dag is not None and dag.default_args is not None:\n        default_args = dag.default_args\n        project_id = project_id or default_args.get('project_id')\n        region = region or default_args.get('region')\n        model_name = model_name or default_args.get('model_name')\n        version_name = version_name or default_args.get('version_name')\n        dataflow_options = dataflow_options or \\\n            default_args.get('dataflow_default_options')\n\n    evaluate_prediction = MLEngineBatchPredictionOperator(\n        task_id=(task_prefix + \"-prediction\"),\n        project_id=project_id,\n        job_id=batch_prediction_job_id,\n        region=region,\n        data_format=data_format,\n        input_paths=input_paths,\n        output_path=prediction_path,\n        uri=model_uri,\n        model_name=model_name,\n        version_name=version_name,\n        dag=dag)\n\n    metric_fn_encoded = base64.b64encode(dill.dumps(metric_fn, recurse=True))\n    evaluate_summary = DataFlowPythonOperator(\n        task_id=(task_prefix + \"-summary\"),\n        py_options=[\"-m\"],\n        py_file=\"airflow.contrib.utils.mlengine_prediction_summary\",\n        dataflow_default_options=dataflow_options,\n        options={\n            \"prediction_path\": prediction_path,\n            \"metric_fn_encoded\": metric_fn_encoded,\n            \"metric_keys\": ','.join(metric_keys)\n        },\n        dag=dag)\n    evaluate_summary.set_upstream(evaluate_prediction)\n\n    def apply_validate_fn(*args, **kwargs):\n        prediction_path = kwargs[\"templates_dict\"][\"prediction_path\"]\n        scheme, bucket, obj, _, _ = urlsplit(prediction_path)\n        if scheme != \"gs\" or not bucket or not obj:\n            raise ValueError(\"Wrong format prediction_path: %s\",\n                             prediction_path)\n        summary = os.path.join(obj.strip(\"/\"),\n                               \"prediction.summary.json\")\n        gcs_hook = GoogleCloudStorageHook()\n        summary = json.loads(gcs_hook.download(bucket, summary))\n        return validate_fn(summary)\n\n    evaluate_validation = PythonOperator(\n        task_id=(task_prefix + \"-validation\"),\n        python_callable=apply_validate_fn,\n        provide_context=True,\n        templates_dict={\"prediction_path\": prediction_path},\n        dag=dag)\n    evaluate_validation.set_upstream(evaluate_summary)\n\n    return evaluate_prediction, evaluate_summary, evaluate_validation",
      "code_tokens": [
        "def",
        "create_evaluate_ops",
        "(",
        "task_prefix",
        ",",
        "data_format",
        ",",
        "input_paths",
        ",",
        "prediction_path",
        ",",
        "metric_fn_and_keys",
        ",",
        "validate_fn",
        ",",
        "batch_prediction_job_id",
        "=",
        "None",
        ",",
        "project_id",
        "=",
        "None",
        ",",
        "region",
        "=",
        "None",
        ",",
        "dataflow_options",
        "=",
        "None",
        ",",
        "model_uri",
        "=",
        "None",
        ",",
        "model_name",
        "=",
        "None",
        ",",
        "version_name",
        "=",
        "None",
        ",",
        "dag",
        "=",
        "None",
        ")",
        ":",
        "# Verify that task_prefix doesn't have any special characters except hyphen",
        "# '-', which is the only allowed non-alphanumeric character by Dataflow.",
        "if",
        "not",
        "re",
        ".",
        "match",
        "(",
        "r\"^[a-zA-Z][-A-Za-z0-9]*$\"",
        ",",
        "task_prefix",
        ")",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"Malformed task_id for DataFlowPythonOperator (only alphanumeric \"",
        "\"and hyphens are allowed but got: \"",
        "+",
        "task_prefix",
        ")",
        "metric_fn",
        ",",
        "metric_keys",
        "=",
        "metric_fn_and_keys",
        "if",
        "not",
        "callable",
        "(",
        "metric_fn",
        ")",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"`metric_fn` param must be callable.\"",
        ")",
        "if",
        "not",
        "callable",
        "(",
        "validate_fn",
        ")",
        ":",
        "raise",
        "AirflowException",
        "(",
        "\"`validate_fn` param must be callable.\"",
        ")",
        "if",
        "dag",
        "is",
        "not",
        "None",
        "and",
        "dag",
        ".",
        "default_args",
        "is",
        "not",
        "None",
        ":",
        "default_args",
        "=",
        "dag",
        ".",
        "default_args",
        "project_id",
        "=",
        "project_id",
        "or",
        "default_args",
        ".",
        "get",
        "(",
        "'project_id'",
        ")",
        "region",
        "=",
        "region",
        "or",
        "default_args",
        ".",
        "get",
        "(",
        "'region'",
        ")",
        "model_name",
        "=",
        "model_name",
        "or",
        "default_args",
        ".",
        "get",
        "(",
        "'model_name'",
        ")",
        "version_name",
        "=",
        "version_name",
        "or",
        "default_args",
        ".",
        "get",
        "(",
        "'version_name'",
        ")",
        "dataflow_options",
        "=",
        "dataflow_options",
        "or",
        "default_args",
        ".",
        "get",
        "(",
        "'dataflow_default_options'",
        ")",
        "evaluate_prediction",
        "=",
        "MLEngineBatchPredictionOperator",
        "(",
        "task_id",
        "=",
        "(",
        "task_prefix",
        "+",
        "\"-prediction\"",
        ")",
        ",",
        "project_id",
        "=",
        "project_id",
        ",",
        "job_id",
        "=",
        "batch_prediction_job_id",
        ",",
        "region",
        "=",
        "region",
        ",",
        "data_format",
        "=",
        "data_format",
        ",",
        "input_paths",
        "=",
        "input_paths",
        ",",
        "output_path",
        "=",
        "prediction_path",
        ",",
        "uri",
        "=",
        "model_uri",
        ",",
        "model_name",
        "=",
        "model_name",
        ",",
        "version_name",
        "=",
        "version_name",
        ",",
        "dag",
        "=",
        "dag",
        ")",
        "metric_fn_encoded",
        "=",
        "base64",
        ".",
        "b64encode",
        "(",
        "dill",
        ".",
        "dumps",
        "(",
        "metric_fn",
        ",",
        "recurse",
        "=",
        "True",
        ")",
        ")",
        "evaluate_summary",
        "=",
        "DataFlowPythonOperator",
        "(",
        "task_id",
        "=",
        "(",
        "task_prefix",
        "+",
        "\"-summary\"",
        ")",
        ",",
        "py_options",
        "=",
        "[",
        "\"-m\"",
        "]",
        ",",
        "py_file",
        "=",
        "\"airflow.contrib.utils.mlengine_prediction_summary\"",
        ",",
        "dataflow_default_options",
        "=",
        "dataflow_options",
        ",",
        "options",
        "=",
        "{",
        "\"prediction_path\"",
        ":",
        "prediction_path",
        ",",
        "\"metric_fn_encoded\"",
        ":",
        "metric_fn_encoded",
        ",",
        "\"metric_keys\"",
        ":",
        "','",
        ".",
        "join",
        "(",
        "metric_keys",
        ")",
        "}",
        ",",
        "dag",
        "=",
        "dag",
        ")",
        "evaluate_summary",
        ".",
        "set_upstream",
        "(",
        "evaluate_prediction",
        ")",
        "def",
        "apply_validate_fn",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "prediction_path",
        "=",
        "kwargs",
        "[",
        "\"templates_dict\"",
        "]",
        "[",
        "\"prediction_path\"",
        "]",
        "scheme",
        ",",
        "bucket",
        ",",
        "obj",
        ",",
        "_",
        ",",
        "_",
        "=",
        "urlsplit",
        "(",
        "prediction_path",
        ")",
        "if",
        "scheme",
        "!=",
        "\"gs\"",
        "or",
        "not",
        "bucket",
        "or",
        "not",
        "obj",
        ":",
        "raise",
        "ValueError",
        "(",
        "\"Wrong format prediction_path: %s\"",
        ",",
        "prediction_path",
        ")",
        "summary",
        "=",
        "os",
        ".",
        "path",
        ".",
        "join",
        "(",
        "obj",
        ".",
        "strip",
        "(",
        "\"/\"",
        ")",
        ",",
        "\"prediction.summary.json\"",
        ")",
        "gcs_hook",
        "=",
        "GoogleCloudStorageHook",
        "(",
        ")",
        "summary",
        "=",
        "json",
        ".",
        "loads",
        "(",
        "gcs_hook",
        ".",
        "download",
        "(",
        "bucket",
        ",",
        "summary",
        ")",
        ")",
        "return",
        "validate_fn",
        "(",
        "summary",
        ")",
        "evaluate_validation",
        "=",
        "PythonOperator",
        "(",
        "task_id",
        "=",
        "(",
        "task_prefix",
        "+",
        "\"-validation\"",
        ")",
        ",",
        "python_callable",
        "=",
        "apply_validate_fn",
        ",",
        "provide_context",
        "=",
        "True",
        ",",
        "templates_dict",
        "=",
        "{",
        "\"prediction_path\"",
        ":",
        "prediction_path",
        "}",
        ",",
        "dag",
        "=",
        "dag",
        ")",
        "evaluate_validation",
        ".",
        "set_upstream",
        "(",
        "evaluate_summary",
        ")",
        "return",
        "evaluate_prediction",
        ",",
        "evaluate_summary",
        ",",
        "evaluate_validation"
      ],
      "docstring": "Creates Operators needed for model evaluation and returns.\n\n    It gets prediction over inputs via Cloud ML Engine BatchPrediction API by\n    calling MLEngineBatchPredictionOperator, then summarize and validate\n    the result via Cloud Dataflow using DataFlowPythonOperator.\n\n    For details and pricing about Batch prediction, please refer to the website\n    https://cloud.google.com/ml-engine/docs/how-tos/batch-predict\n    and for Cloud Dataflow, https://cloud.google.com/dataflow/docs/\n\n    It returns three chained operators for prediction, summary, and validation,\n    named as <prefix>-prediction, <prefix>-summary, and <prefix>-validation,\n    respectively.\n    (<prefix> should contain only alphanumeric characters or hyphen.)\n\n    The upstream and downstream can be set accordingly like:\n      pred, _, val = create_evaluate_ops(...)\n      pred.set_upstream(upstream_op)\n      ...\n      downstream_op.set_upstream(val)\n\n    Callers will provide two python callables, metric_fn and validate_fn, in\n    order to customize the evaluation behavior as they wish.\n    - metric_fn receives a dictionary per instance derived from json in the\n      batch prediction result. The keys might vary depending on the model.\n      It should return a tuple of metrics.\n    - validation_fn receives a dictionary of the averaged metrics that metric_fn\n      generated over all instances.\n      The key/value of the dictionary matches to what's given by\n      metric_fn_and_keys arg.\n      The dictionary contains an additional metric, 'count' to represent the\n      total number of instances received for evaluation.\n      The function would raise an exception to mark the task as failed, in a\n      case the validation result is not okay to proceed (i.e. to set the trained\n      version as default).\n\n    Typical examples are like this:\n\n    def get_metric_fn_and_keys():\n        import math  # imports should be outside of the metric_fn below.\n        def error_and_squared_error(inst):\n            label = float(inst['input_label'])\n            classes = float(inst['classes'])  # 0 or 1\n            err = abs(classes-label)\n            squared_err = math.pow(classes-label, 2)\n            return (err, squared_err)  # returns a tuple.\n        return error_and_squared_error, ['err', 'mse']  # key order must match.\n\n    def validate_err_and_count(summary):\n        if summary['err'] > 0.2:\n            raise ValueError('Too high err>0.2; summary=%s' % summary)\n        if summary['mse'] > 0.05:\n            raise ValueError('Too high mse>0.05; summary=%s' % summary)\n        if summary['count'] < 1000:\n            raise ValueError('Too few instances<1000; summary=%s' % summary)\n        return summary\n\n    For the details on the other BatchPrediction-related arguments (project_id,\n    job_id, region, data_format, input_paths, prediction_path, model_uri),\n    please refer to MLEngineBatchPredictionOperator too.\n\n    :param task_prefix: a prefix for the tasks. Only alphanumeric characters and\n        hyphen are allowed (no underscores), since this will be used as dataflow\n        job name, which doesn't allow other characters.\n    :type task_prefix: str\n\n    :param data_format: either of 'TEXT', 'TF_RECORD', 'TF_RECORD_GZIP'\n    :type data_format: str\n\n    :param input_paths: a list of input paths to be sent to BatchPrediction.\n    :type input_paths: list[str]\n\n    :param prediction_path: GCS path to put the prediction results in.\n    :type prediction_path: str\n\n    :param metric_fn_and_keys: a tuple of metric_fn and metric_keys:\n        - metric_fn is a function that accepts a dictionary (for an instance),\n          and returns a tuple of metric(s) that it calculates.\n        - metric_keys is a list of strings to denote the key of each metric.\n    :type metric_fn_and_keys: tuple of a function and a list[str]\n\n    :param validate_fn: a function to validate whether the averaged metric(s) is\n        good enough to push the model.\n    :type validate_fn: function\n\n    :param batch_prediction_job_id: the id to use for the Cloud ML Batch\n        prediction job. Passed directly to the MLEngineBatchPredictionOperator as\n        the job_id argument.\n    :type batch_prediction_job_id: str\n\n    :param project_id: the Google Cloud Platform project id in which to execute\n        Cloud ML Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['project_id']` will be used.\n    :type project_id: str\n\n    :param region: the Google Cloud Platform region in which to execute Cloud ML\n        Batch Prediction and Dataflow jobs. If None, then the `dag`'s\n        `default_args['region']` will be used.\n    :type region: str\n\n    :param dataflow_options: options to run Dataflow jobs. If None, then the\n        `dag`'s `default_args['dataflow_default_options']` will be used.\n    :type dataflow_options: dictionary\n\n    :param model_uri: GCS path of the model exported by Tensorflow using\n        tensorflow.estimator.export_savedmodel(). It cannot be used with\n        model_name or version_name below. See MLEngineBatchPredictionOperator for\n        more detail.\n    :type model_uri: str\n\n    :param model_name: Used to indicate a model to use for prediction. Can be\n        used in combination with version_name, but cannot be used together with\n        model_uri. See MLEngineBatchPredictionOperator for more detail. If None,\n        then the `dag`'s `default_args['model_name']` will be used.\n    :type model_name: str\n\n    :param version_name: Used to indicate a model version to use for prediction,\n        in combination with model_name. Cannot be used together with model_uri.\n        See MLEngineBatchPredictionOperator for more detail. If None, then the\n        `dag`'s `default_args['version_name']` will be used.\n    :type version_name: str\n\n    :param dag: The `DAG` to use for all Operators.\n    :type dag: airflow.models.DAG\n\n    :returns: a tuple of three operators, (prediction, summary, validation)\n    :rtype: tuple(DataFlowPythonOperator, DataFlowPythonOperator,\n                  PythonOperator)",
      "docstring_tokens": [
        "Creates",
        "Operators",
        "needed",
        "for",
        "model",
        "evaluation",
        "and",
        "returns",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/utils/mlengine_operator_utils.py#L32-L246"
    },
    "target": "Creates Operators needed for model evaluation and returns .",
    "arguments": [
      [
        "def create_evaluate_ops ( task_prefix , data_format , input_paths , prediction_path , metric_fn_and_keys , validate_fn , batch_prediction_job_id = None , project_id = None , region = None , dataflow_options = None , model_uri = None , model_name = None , version_name = None , dag = None ) : # Verify that task_prefix doesn't have any special characters except hyphen # '-', which is the only allowed non-alphanumeric character by Dataflow. if not re . match ( r\"^[a-zA-Z][-A-Za-z0-9]*$\" , task_prefix ) : raise AirflowException ( \"Malformed task_id for DataFlowPythonOperator (only alphanumeric \" \"and hyphens are allowed but got: \" + task_prefix ) metric_fn , metric_keys = metric_fn_and_keys if not callable ( metric_fn ) : raise AirflowException ( \"`metric_fn` param must be callable.\" ) if not callable ( validate_fn ) : raise AirflowException ( \"`validate_fn` param must be callable.\" ) if dag is not None and dag . default_args is not None : default_args = dag . default_args project_id = project_id or default_args . get ( 'project_id' ) region = region or default_args . get ( 'region' ) model_name = model_name or default_args . get ( 'model_name' ) version_name = version_name or default_args . get ( 'version_name' ) dataflow_options = dataflow_options or default_args . get ( 'dataflow_default_options' ) evaluate_prediction = MLEngineBatchPredictionOperator ( task_id = ( task_prefix + \"-prediction\" ) , project_id = project_id , job_id = batch_prediction_job_id , region = region , data_format = data_format , input_paths = input_paths , output_path = prediction_path , uri = model_uri , model_name = model_name , version_name = version_name , dag = dag ) metric_fn_encoded = base64 . b64encode ( dill . dumps ( metric_fn , recurse = True ) ) evaluate_summary = DataFlowPythonOperator ( task_id = ( task_prefix + \"-summary\" ) , py_options = [ \"-m\" ] , py_file = \"airflow.contrib.utils.mlengine_prediction_summary\" , dataflow_default_options = dataflow_options , options = { \"prediction_path\" : prediction_path , \"metric_fn_encoded\" : metric_fn_encoded , \"metric_keys\" : ',' . join ( metric_keys ) } , dag = dag ) evaluate_summary . set_upstream ( evaluate_prediction ) def apply_validate_fn ( * args , * * kwargs ) : prediction_path = kwargs [ \"templates_dict\" ] [ \"prediction_path\" ] scheme , bucket , obj , _ , _ = urlsplit ( prediction_path ) if scheme != \"gs\" or not bucket or not obj : raise ValueError ( \"Wrong format prediction_path: %s\" , prediction_path ) summary = os . path . join ( obj . strip ( \"/\" ) , \"prediction.summary.json\" ) gcs_hook = GoogleCloudStorageHook ( ) summary = json . loads ( gcs_hook . download ( bucket , summary ) ) return validate_fn ( summary ) evaluate_validation = PythonOperator ( task_id = ( task_prefix + \"-validation\" ) , python_callable = apply_validate_fn , provide_context = True , templates_dict = { \"prediction_path\" : prediction_path } , dag = dag ) evaluate_validation . set_upstream ( evaluate_summary ) return evaluate_prediction , evaluate_summary , evaluate_validation",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\n## Navigazione rapIDA\nUtilizza l'intestazione per scorrermegiorni in avansetacolpela frezatavolterrabbasse. Pu\u00f2 usarelacroncaindiposizioinavighiatura del web per velocizza le tattice navigazionedellinterruttopredefinidaper la tabbellerispetrographecoterminal.\n| NOME FANTACIENNI \u00a0(1,5-1 \u00a0mmol/\u00a0 L) |\n--------------------------- -----------\nAlfetametril (Aldurazene, Almendralej) (0.05\u2013 \u00a02 mg/dm ^{3) }\nBendro-flumezino (Nepresol, Bifemelina \u00a0Bisoprolo (Condyxe, Corinfarbene (Dilatrate-S\u00a0 R) (10-100 mcgrn /h\u00a0 2,6 \u00a0(0,01 \u2013\u00a0 mg/kg\u00a0 al d\u00ec ) |\nCilostazole(Ceruvasc, Otsudasyo (Ciclopi"
      ]
    ],
    "filtered_resps": [
      " ```\n\n## Navigazione rapIDA\nUtilizza l'intestazione per scorrermegiorni in avansetacolpela frezatavolterrabbasse. Pu\u00f2 usarelacroncaindiposizioinavighiatura del web per velocizza le tattice navigazionedellinterruttopredefinidaper la tabbellerispetrographecoterminal.\n| NOME FANTACIENNI \u00a0(1,5-1 \u00a0mmol/\u00a0 L) |\n--------------------------- -----------\nAlfetametril (Aldurazene, Almendralej) (0.05\u2013 \u00a02 mg/dm ^{3) }\nBendro-flumezino (Nepresol, Bifemelina \u00a0Bisoprolo (Condyxe, Corinfarbene (Dilatrate-S\u00a0 R) (10-100 mcgrn /h\u00a0 2,6 \u00a0(0,01 \u2013\u00a0 mg/kg\u00a0 al d\u00ec ) |\nCilostazole(Ceruvasc, Otsudasyo (Ciclopi"
    ],
    "smoothed_bleu_4": 0.6791279345697888
  },
  {
    "doc_id": 67,
    "doc": {
      "id": 67,
      "repo": "apache/airflow",
      "path": "airflow/utils/file.py",
      "func_name": "mkdirs",
      "original_string": "def mkdirs(path, mode):\n    \"\"\"\n    Creates the directory specified by path, creating intermediate directories\n    as necessary. If directory already exists, this is a no-op.\n\n    :param path: The directory to create\n    :type path: str\n    :param mode: The mode to give to the directory e.g. 0o755, ignores umask\n    :type mode: int\n    \"\"\"\n    try:\n        o_umask = os.umask(0)\n        os.makedirs(path, mode)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\n    finally:\n        os.umask(o_umask)",
      "language": "python",
      "code": "def mkdirs(path, mode):\n    \"\"\"\n    Creates the directory specified by path, creating intermediate directories\n    as necessary. If directory already exists, this is a no-op.\n\n    :param path: The directory to create\n    :type path: str\n    :param mode: The mode to give to the directory e.g. 0o755, ignores umask\n    :type mode: int\n    \"\"\"\n    try:\n        o_umask = os.umask(0)\n        os.makedirs(path, mode)\n    except OSError:\n        if not os.path.isdir(path):\n            raise\n    finally:\n        os.umask(o_umask)",
      "code_tokens": [
        "def",
        "mkdirs",
        "(",
        "path",
        ",",
        "mode",
        ")",
        ":",
        "try",
        ":",
        "o_umask",
        "=",
        "os",
        ".",
        "umask",
        "(",
        "0",
        ")",
        "os",
        ".",
        "makedirs",
        "(",
        "path",
        ",",
        "mode",
        ")",
        "except",
        "OSError",
        ":",
        "if",
        "not",
        "os",
        ".",
        "path",
        ".",
        "isdir",
        "(",
        "path",
        ")",
        ":",
        "raise",
        "finally",
        ":",
        "os",
        ".",
        "umask",
        "(",
        "o_umask",
        ")"
      ],
      "docstring": "Creates the directory specified by path, creating intermediate directories\n    as necessary. If directory already exists, this is a no-op.\n\n    :param path: The directory to create\n    :type path: str\n    :param mode: The mode to give to the directory e.g. 0o755, ignores umask\n    :type mode: int",
      "docstring_tokens": [
        "Creates",
        "the",
        "directory",
        "specified",
        "by",
        "path",
        "creating",
        "intermediate",
        "directories",
        "as",
        "necessary",
        ".",
        "If",
        "directory",
        "already",
        "exists",
        "this",
        "is",
        "a",
        "no",
        "-",
        "op",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/file.py#L42-L59"
    },
    "target": "Creates the directory specified by path creating intermediate directories as necessary . If directory already exists this is a no - op .",
    "arguments": [
      [
        "def mkdirs ( path , mode ) : try : o_umask = os . umask ( 0 ) os . makedirs ( path , mode ) except OSError : if not os . path . isdir ( path ) : raise finally : os . umask ( o_umask )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\n## Step-by-Sum Step Analysis of Error-Resiliant `mknoder()` Function\n1. **Try block**:\nThe function starts in **TRY mode**, attempting to create directories as per user input and permission specifications (i mode, o user ID). This is wrapped around an error-handeling code.\n\n```try```: `path` is passed to create a file, which in our context will act similar for directories as we're dealing here.\n2-**os.makedirs(path,m)ode: This is used in an **except** condition. Here the directory creation happens with **makedir()** method from OS, passing path to create directory at specified mode (i.e permission) specified in user\u2019s command.\n\n```.umak( o_umi ) ```.os. mkaired ( pata,mode) except OsiEr. If path doesn\u2019thexist as adirecort, it re-raisestherrorexceprion. Finally: Osmak(oumaks )````.mknoder()` function has been analyzed to understand what each line accomplishe and why they were choosenn in order toreliablenode directory creatain error"
      ]
    ],
    "filtered_resps": [
      " ```\n\n## Step-by-Sum Step Analysis of Error-Resiliant `mknoder()` Function\n1. **Try block**:\nThe function starts in **TRY mode**, attempting to create directories as per user input and permission specifications (i mode, o user ID). This is wrapped around an error-handeling code.\n\n```try```: `path` is passed to create a file, which in our context will act similar for directories as we're dealing here.\n2-**os.makedirs(path,m)ode: This is used in an **except** condition. Here the directory creation happens with **makedir()** method from OS, passing path to create directory at specified mode (i.e permission) specified in user\u2019s command.\n\n```.umak( o_umi ) ```.os. mkaired ( pata,mode) except OsiEr. If path doesn\u2019thexist as adirecort, it re-raisestherrorexceprion. Finally: Osmak(oumaks )````.mknoder()` function has been analyzed to understand what each line accomplishe and why they were choosenn in order toreliablenode directory creatain error"
    ],
    "smoothed_bleu_4": 1.2098039350751715
  },
  {
    "doc_id": 68,
    "doc": {
      "id": 68,
      "repo": "apache/airflow",
      "path": "airflow/operators/check_operator.py",
      "func_name": "_convert_to_float_if_possible",
      "original_string": "def _convert_to_float_if_possible(s):\n    \"\"\"\n    A small helper function to convert a string to a numeric value\n    if appropriate\n\n    :param s: the string to be converted\n    :type s: str\n    \"\"\"\n    try:\n        ret = float(s)\n    except (ValueError, TypeError):\n        ret = s\n    return ret",
      "language": "python",
      "code": "def _convert_to_float_if_possible(s):\n    \"\"\"\n    A small helper function to convert a string to a numeric value\n    if appropriate\n\n    :param s: the string to be converted\n    :type s: str\n    \"\"\"\n    try:\n        ret = float(s)\n    except (ValueError, TypeError):\n        ret = s\n    return ret",
      "code_tokens": [
        "def",
        "_convert_to_float_if_possible",
        "(",
        "s",
        ")",
        ":",
        "try",
        ":",
        "ret",
        "=",
        "float",
        "(",
        "s",
        ")",
        "except",
        "(",
        "ValueError",
        ",",
        "TypeError",
        ")",
        ":",
        "ret",
        "=",
        "s",
        "return",
        "ret"
      ],
      "docstring": "A small helper function to convert a string to a numeric value\n    if appropriate\n\n    :param s: the string to be converted\n    :type s: str",
      "docstring_tokens": [
        "A",
        "small",
        "helper",
        "function",
        "to",
        "convert",
        "a",
        "string",
        "to",
        "a",
        "numeric",
        "value",
        "if",
        "appropriate"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/operators/check_operator.py#L98-L110"
    },
    "target": "A small helper function to convert a string to a numeric value if appropriate",
    "arguments": [
      [
        "def _convert_to_float_if_possible ( s ) : try : ret = float ( s ) except ( ValueError , TypeError ) : ret = s return ret",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis is an excerpt from code used to calculate an index, which in the case we're looking to exploit might contain user-prov-ident data. In order of importance, there should have at the top of a code review:\n1- Is it safe to store the index in an untrusted database (easiy exploi- tation by SQL-in- jecting a value that is converted from float) 0/10 - Not a good practice, especially in this example where we're dealing w- it h untrus t e da-t a.\n``` fromdatetimeimporthas_attr,MAXSIZE defis_ormore(s,orm=has_atrr) ->int: ifismethod(0m.__dict__,'max_sizer')>s.size:returnorm else:s._setvalue(None);returndo ```\nThe use case is a check whether or nor m value should overflow, with or - maxsize set. Here are things to keep in the front and cen-\n- What happens in an overfl w- it is it safe? (eas y explo it a - t io- boun d - ar i e s)\n0 / l o - N e edstohand"
      ]
    ],
    "filtered_resps": [
      " ```\nThis is an excerpt from code used to calculate an index, which in the case we're looking to exploit might contain user-prov-ident data. In order of importance, there should have at the top of a code review:\n1- Is it safe to store the index in an untrusted database (easiy exploi- tation by SQL-in- jecting a value that is converted from float) 0/10 - Not a good practice, especially in this example where we're dealing w- it h untrus t e da-t a.\n``` fromdatetimeimporthas_attr,MAXSIZE defis_ormore(s,orm=has_atrr) ->int: ifismethod(0m.__dict__,'max_sizer')>s.size:returnorm else:s._setvalue(None);returndo ```\nThe use case is a check whether or nor m value should overflow, with or - maxsize set. Here are things to keep in the front and cen-\n- What happens in an overfl w- it is it safe? (eas y explo it a - t io- boun d - ar i e s)\n0 / l o - N e edstohand"
    ],
    "smoothed_bleu_4": 0.6487435582757587
  },
  {
    "doc_id": 69,
    "doc": {
      "id": 69,
      "repo": "apache/airflow",
      "path": "airflow/utils/timezone.py",
      "func_name": "make_aware",
      "original_string": "def make_aware(value, timezone=None):\n    \"\"\"\n    Make a naive datetime.datetime in a given time zone aware.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: localized datetime in settings.TIMEZONE or timezone\n\n    \"\"\"\n    if timezone is None:\n        timezone = TIMEZONE\n\n    # Check that we won't overwrite the timezone of an aware datetime.\n    if is_localized(value):\n        raise ValueError(\n            \"make_aware expects a naive datetime, got %s\" % value)\n    if hasattr(value, 'fold'):\n        # In case of python 3.6 we want to do the same that pendulum does for python3.5\n        # i.e in case we move clock back we want to schedule the run at the time of the second\n        # instance of the same clock time rather than the first one.\n        # Fold parameter has no impact in other cases so we can safely set it to 1 here\n        value = value.replace(fold=1)\n    if hasattr(timezone, 'localize'):\n        # This method is available for pytz time zones.\n        return timezone.localize(value)\n    elif hasattr(timezone, 'convert'):\n        # For pendulum\n        return timezone.convert(value)\n    else:\n        # This may be wrong around DST changes!\n        return value.replace(tzinfo=timezone)",
      "language": "python",
      "code": "def make_aware(value, timezone=None):\n    \"\"\"\n    Make a naive datetime.datetime in a given time zone aware.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: localized datetime in settings.TIMEZONE or timezone\n\n    \"\"\"\n    if timezone is None:\n        timezone = TIMEZONE\n\n    # Check that we won't overwrite the timezone of an aware datetime.\n    if is_localized(value):\n        raise ValueError(\n            \"make_aware expects a naive datetime, got %s\" % value)\n    if hasattr(value, 'fold'):\n        # In case of python 3.6 we want to do the same that pendulum does for python3.5\n        # i.e in case we move clock back we want to schedule the run at the time of the second\n        # instance of the same clock time rather than the first one.\n        # Fold parameter has no impact in other cases so we can safely set it to 1 here\n        value = value.replace(fold=1)\n    if hasattr(timezone, 'localize'):\n        # This method is available for pytz time zones.\n        return timezone.localize(value)\n    elif hasattr(timezone, 'convert'):\n        # For pendulum\n        return timezone.convert(value)\n    else:\n        # This may be wrong around DST changes!\n        return value.replace(tzinfo=timezone)",
      "code_tokens": [
        "def",
        "make_aware",
        "(",
        "value",
        ",",
        "timezone",
        "=",
        "None",
        ")",
        ":",
        "if",
        "timezone",
        "is",
        "None",
        ":",
        "timezone",
        "=",
        "TIMEZONE",
        "# Check that we won't overwrite the timezone of an aware datetime.",
        "if",
        "is_localized",
        "(",
        "value",
        ")",
        ":",
        "raise",
        "ValueError",
        "(",
        "\"make_aware expects a naive datetime, got %s\"",
        "%",
        "value",
        ")",
        "if",
        "hasattr",
        "(",
        "value",
        ",",
        "'fold'",
        ")",
        ":",
        "# In case of python 3.6 we want to do the same that pendulum does for python3.5",
        "# i.e in case we move clock back we want to schedule the run at the time of the second",
        "# instance of the same clock time rather than the first one.",
        "# Fold parameter has no impact in other cases so we can safely set it to 1 here",
        "value",
        "=",
        "value",
        ".",
        "replace",
        "(",
        "fold",
        "=",
        "1",
        ")",
        "if",
        "hasattr",
        "(",
        "timezone",
        ",",
        "'localize'",
        ")",
        ":",
        "# This method is available for pytz time zones.",
        "return",
        "timezone",
        ".",
        "localize",
        "(",
        "value",
        ")",
        "elif",
        "hasattr",
        "(",
        "timezone",
        ",",
        "'convert'",
        ")",
        ":",
        "# For pendulum",
        "return",
        "timezone",
        ".",
        "convert",
        "(",
        "value",
        ")",
        "else",
        ":",
        "# This may be wrong around DST changes!",
        "return",
        "value",
        ".",
        "replace",
        "(",
        "tzinfo",
        "=",
        "timezone",
        ")"
      ],
      "docstring": "Make a naive datetime.datetime in a given time zone aware.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: localized datetime in settings.TIMEZONE or timezone",
      "docstring_tokens": [
        "Make",
        "a",
        "naive",
        "datetime",
        ".",
        "datetime",
        "in",
        "a",
        "given",
        "time",
        "zone",
        "aware",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/timezone.py#L98-L128"
    },
    "target": "Make a naive datetime . datetime in a given time zone aware .",
    "arguments": [
      [
        "def make_aware ( value , timezone = None ) : if timezone is None : timezone = TIMEZONE # Check that we won't overwrite the timezone of an aware datetime. if is_localized ( value ) : raise ValueError ( \"make_aware expects a naive datetime, got %s\" % value ) if hasattr ( value , 'fold' ) : # In case of python 3.6 we want to do the same that pendulum does for python3.5 # i.e in case we move clock back we want to schedule the run at the time of the second # instance of the same clock time rather than the first one. # Fold parameter has no impact in other cases so we can safely set it to 1 here value = value . replace ( fold = 1 ) if hasattr ( timezone , 'localize' ) : # This method is available for pytz time zones. return timezone . localize ( value ) elif hasattr ( timezone , 'convert' ) : # For pendulum return timezone . convert ( value ) else : # This may be wrong around DST changes! return value . replace ( tzinfo = timezone )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def to_ical ( event : DictOrObj ) -& gt ;\n````\n\n## Step-by-stroke Explanation\n1. Import all functions that you want your decorator `decorateur_crontabs()` to depend.\n```from crondecr import *```, which is equivalent in Python 300.8 and 300.\n4: Use `funccache()`, a cache decorator to avoid recompiles of crondecr functions. You may need this in Python3, depending upon how you set `CROND_CACHABLE` (default = True) when installing `cromdecr`:\n\\(\\mathcal{T}_{i}^{{}^{-\\infty}}\\)\\begin{code}{l}\nfuncccaches(func, maxAge=360) \\\\end{\\code}{-cache-1\\textbackslashecho}maxAgestrict(0,\\inftynonNegNum)\\]\n`````pythonimport time\n@decoratore_crodtb()defexample():return\"Hello,World!\">>>example()<Time:2024.02,12h42>['example()at<datetimeobjectat0xc7d4f0e>withargs="
      ]
    ],
    "filtered_resps": [
      " def to_ical ( event : DictOrObj ) -& gt ;\n````\n\n## Step-by-stroke Explanation\n1. Import all functions that you want your decorator `decorateur_crontabs()` to depend.\n```from crondecr import *```, which is equivalent in Python 300.8 and 300.\n4: Use `funccache()`, a cache decorator to avoid recompiles of crondecr functions. You may need this in Python3, depending upon how you set `CROND_CACHABLE` (default = True) when installing `cromdecr`:\n\\(\\mathcal{T}_{i}^{{}^{-\\infty}}\\)\\begin{code}{l}\nfuncccaches(func, maxAge=360) \\\\end{\\code}{-cache-1\\textbackslashecho}maxAgestrict(0,\\inftynonNegNum)\\]\n`````pythonimport time\n@decoratore_crodtb()defexample():return\"Hello,World!\">>>example()<Time:2024.02,12h42>['example()at<datetimeobjectat0xc7d4f0e>withargs="
    ],
    "smoothed_bleu_4": 0.6580236509768104
  },
  {
    "doc_id": 70,
    "doc": {
      "id": 70,
      "repo": "apache/airflow",
      "path": "airflow/utils/timezone.py",
      "func_name": "make_naive",
      "original_string": "def make_naive(value, timezone=None):\n    \"\"\"\n    Make an aware datetime.datetime naive in a given time zone.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: naive datetime\n    \"\"\"\n    if timezone is None:\n        timezone = TIMEZONE\n\n    # Emulate the behavior of astimezone() on Python < 3.6.\n    if is_naive(value):\n        raise ValueError(\"make_naive() cannot be applied to a naive datetime\")\n\n    o = value.astimezone(timezone)\n\n    # cross library compatibility\n    naive = dt.datetime(o.year,\n                        o.month,\n                        o.day,\n                        o.hour,\n                        o.minute,\n                        o.second,\n                        o.microsecond)\n\n    return naive",
      "language": "python",
      "code": "def make_naive(value, timezone=None):\n    \"\"\"\n    Make an aware datetime.datetime naive in a given time zone.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: naive datetime\n    \"\"\"\n    if timezone is None:\n        timezone = TIMEZONE\n\n    # Emulate the behavior of astimezone() on Python < 3.6.\n    if is_naive(value):\n        raise ValueError(\"make_naive() cannot be applied to a naive datetime\")\n\n    o = value.astimezone(timezone)\n\n    # cross library compatibility\n    naive = dt.datetime(o.year,\n                        o.month,\n                        o.day,\n                        o.hour,\n                        o.minute,\n                        o.second,\n                        o.microsecond)\n\n    return naive",
      "code_tokens": [
        "def",
        "make_naive",
        "(",
        "value",
        ",",
        "timezone",
        "=",
        "None",
        ")",
        ":",
        "if",
        "timezone",
        "is",
        "None",
        ":",
        "timezone",
        "=",
        "TIMEZONE",
        "# Emulate the behavior of astimezone() on Python < 3.6.",
        "if",
        "is_naive",
        "(",
        "value",
        ")",
        ":",
        "raise",
        "ValueError",
        "(",
        "\"make_naive() cannot be applied to a naive datetime\"",
        ")",
        "o",
        "=",
        "value",
        ".",
        "astimezone",
        "(",
        "timezone",
        ")",
        "# cross library compatibility",
        "naive",
        "=",
        "dt",
        ".",
        "datetime",
        "(",
        "o",
        ".",
        "year",
        ",",
        "o",
        ".",
        "month",
        ",",
        "o",
        ".",
        "day",
        ",",
        "o",
        ".",
        "hour",
        ",",
        "o",
        ".",
        "minute",
        ",",
        "o",
        ".",
        "second",
        ",",
        "o",
        ".",
        "microsecond",
        ")",
        "return",
        "naive"
      ],
      "docstring": "Make an aware datetime.datetime naive in a given time zone.\n\n    :param value: datetime\n    :param timezone: timezone\n    :return: naive datetime",
      "docstring_tokens": [
        "Make",
        "an",
        "aware",
        "datetime",
        ".",
        "datetime",
        "naive",
        "in",
        "a",
        "given",
        "time",
        "zone",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/timezone.py#L131-L157"
    },
    "target": "Make an aware datetime . datetime naive in a given time zone .",
    "arguments": [
      [
        "def make_naive ( value , timezone = None ) : if timezone is None : timezone = TIMEZONE # Emulate the behavior of astimezone() on Python < 3.6. if is_naive ( value ) : raise ValueError ( \"make_naive() cannot be applied to a naive datetime\" ) o = value . astimezone ( timezone ) # cross library compatibility naive = dt . datetime ( o . year , o . month , o . day , o . hour , o . minute , o . second , o . microsecond ) return naive",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Step-by-Summary-Step Answer: (Please follow step 4 for a clear explanation)\n\n\n```markdown\n### Code Explanation and Break-Donw for Step by Sutp Sumarizatio\n1: `from pydanny.dateutilds.timestamputilsmakesnaivecrossimport` is importing functions that make it cross-compatible across datetime and date utilities. This ensures consistency when dealing with time-related data.\n2-5, 7: These steps are not part and doer to code exlplanaiton. Please refer t step-by-symp summari for details.\n`````python`\ndef get_timezone():\n        \"\"\"\n        Get timezone object.\n    \n            Parameters: timezone (str, datetime)\n        :return timezzone objeect: Timezonze obejcets for use wiyih pydann dateutiils.tiemsutmil.make_naie() \n         \"\"\"        \n# This method will be defined in another step, as we're focusing on a part\n# specific function here. The purpose seems clear: it's meant as utility to get timezone objects for use within pyDanny dateutils.timetamptils module, which is a collection of utility"
      ]
    ],
    "filtered_resps": [
      "\n\n## Step-by-Summary-Step Answer: (Please follow step 4 for a clear explanation)\n\n\n```markdown\n### Code Explanation and Break-Donw for Step by Sutp Sumarizatio\n1: `from pydanny.dateutilds.timestamputilsmakesnaivecrossimport` is importing functions that make it cross-compatible across datetime and date utilities. This ensures consistency when dealing with time-related data.\n2-5, 7: These steps are not part and doer to code exlplanaiton. Please refer t step-by-symp summari for details.\n`````python`\ndef get_timezone():\n        \"\"\"\n        Get timezone object.\n    \n            Parameters: timezone (str, datetime)\n        :return timezzone objeect: Timezonze obejcets for use wiyih pydann dateutiils.tiemsutmil.make_naie() \n         \"\"\"        \n# This method will be defined in another step, as we're focusing on a part\n# specific function here. The purpose seems clear: it's meant as utility to get timezone objects for use within pyDanny dateutils.timetamptils module, which is a collection of utility"
    ],
    "smoothed_bleu_4": 0.8075900017537613
  },
  {
    "doc_id": 71,
    "doc": {
      "id": 71,
      "repo": "apache/airflow",
      "path": "airflow/utils/timezone.py",
      "func_name": "datetime",
      "original_string": "def datetime(*args, **kwargs):\n    \"\"\"\n    Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified\n\n    :return: datetime.datetime\n    \"\"\"\n    if 'tzinfo' not in kwargs:\n        kwargs['tzinfo'] = TIMEZONE\n\n    return dt.datetime(*args, **kwargs)",
      "language": "python",
      "code": "def datetime(*args, **kwargs):\n    \"\"\"\n    Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified\n\n    :return: datetime.datetime\n    \"\"\"\n    if 'tzinfo' not in kwargs:\n        kwargs['tzinfo'] = TIMEZONE\n\n    return dt.datetime(*args, **kwargs)",
      "code_tokens": [
        "def",
        "datetime",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "if",
        "'tzinfo'",
        "not",
        "in",
        "kwargs",
        ":",
        "kwargs",
        "[",
        "'tzinfo'",
        "]",
        "=",
        "TIMEZONE",
        "return",
        "dt",
        ".",
        "datetime",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")"
      ],
      "docstring": "Wrapper around datetime.datetime that adds settings.TIMEZONE if tzinfo not specified\n\n    :return: datetime.datetime",
      "docstring_tokens": [
        "Wrapper",
        "around",
        "datetime",
        ".",
        "datetime",
        "that",
        "adds",
        "settings",
        ".",
        "TIMEZONE",
        "if",
        "tzinfo",
        "not",
        "specified"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/timezone.py#L160-L169"
    },
    "target": "Wrapper around datetime . datetime that adds settings . TIMEZONE if tzinfo not specified",
    "arguments": [
      [
        "def datetime ( * args , * * kwargs ) : if 'tzinfo' not in kwargs : kwargs [ 'tzinfo' ] = TIMEZONE return dt . datetime ( * args , * * kwargs )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " end ```\nThis will ensure any date and timezone operations in LuaJITSim work in UTC, which is consistent across platforms. You might have a use case that doesn&#96;T involve dates at this point, but it\u2019s good to set it for later use.\n\nNext we have to set some environment variables that are used later in code, such a `os.getenv()`\n```: lua/luavim.lua\nrequire('nvchad').set_info {\n  version      ='1', -- version of luajit-svn\n} os.setegvp ( '_JAVA_A_QUIET_JNIPASS=' '12345')\n`````\nThe `_java.awt.quietsnippaass=\u201c 12345 \u201c line sets an envirnmental vriabla to pass it to `jvmtiGetLoadedClasses` which returns loaded class names, this can take time to return so I&#x2f;r&#x3c;preference it being set early in init. You can replace this line if it doesn\u2019&rsquio;t make senns in yoyr envrniemt.\n### Step3\nNow that we haved defined and configured LuaV"
      ]
    ],
    "filtered_resps": [
      " end ```\nThis will ensure any date and timezone operations in LuaJITSim work in UTC, which is consistent across platforms. You might have a use case that doesn&#96;T involve dates at this point, but it\u2019s good to set it for later use.\n\nNext we have to set some environment variables that are used later in code, such a `os.getenv()`\n```: lua/luavim.lua\nrequire('nvchad').set_info {\n  version      ='1', -- version of luajit-svn\n} os.setegvp ( '_JAVA_A_QUIET_JNIPASS=' '12345')\n`````\nThe `_java.awt.quietsnippaass=\u201c 12345 \u201c line sets an envirnmental vriabla to pass it to `jvmtiGetLoadedClasses` which returns loaded class names, this can take time to return so I&#x2f;r&#x3c;preference it being set early in init. You can replace this line if it doesn\u2019&rsquio;t make senns in yoyr envrniemt.\n### Step3\nNow that we haved defined and configured LuaV"
    ],
    "smoothed_bleu_4": 0.6728275368159062
  },
  {
    "doc_id": 72,
    "doc": {
      "id": 72,
      "repo": "apache/airflow",
      "path": "airflow/hooks/druid_hook.py",
      "func_name": "DruidDbApiHook.get_conn",
      "original_string": "def get_conn(self):\n        \"\"\"\n        Establish a connection to druid broker.\n        \"\"\"\n        conn = self.get_connection(self.druid_broker_conn_id)\n        druid_broker_conn = connect(\n            host=conn.host,\n            port=conn.port,\n            path=conn.extra_dejson.get('endpoint', '/druid/v2/sql'),\n            scheme=conn.extra_dejson.get('schema', 'http')\n        )\n        self.log.info('Get the connection to druid broker on %s', conn.host)\n        return druid_broker_conn",
      "language": "python",
      "code": "def get_conn(self):\n        \"\"\"\n        Establish a connection to druid broker.\n        \"\"\"\n        conn = self.get_connection(self.druid_broker_conn_id)\n        druid_broker_conn = connect(\n            host=conn.host,\n            port=conn.port,\n            path=conn.extra_dejson.get('endpoint', '/druid/v2/sql'),\n            scheme=conn.extra_dejson.get('schema', 'http')\n        )\n        self.log.info('Get the connection to druid broker on %s', conn.host)\n        return druid_broker_conn",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ")",
        ":",
        "conn",
        "=",
        "self",
        ".",
        "get_connection",
        "(",
        "self",
        ".",
        "druid_broker_conn_id",
        ")",
        "druid_broker_conn",
        "=",
        "connect",
        "(",
        "host",
        "=",
        "conn",
        ".",
        "host",
        ",",
        "port",
        "=",
        "conn",
        ".",
        "port",
        ",",
        "path",
        "=",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'endpoint'",
        ",",
        "'/druid/v2/sql'",
        ")",
        ",",
        "scheme",
        "=",
        "conn",
        ".",
        "extra_dejson",
        ".",
        "get",
        "(",
        "'schema'",
        ",",
        "'http'",
        ")",
        ")",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "'Get the connection to druid broker on %s'",
        ",",
        "conn",
        ".",
        "host",
        ")",
        "return",
        "druid_broker_conn"
      ],
      "docstring": "Establish a connection to druid broker.",
      "docstring_tokens": [
        "Establish",
        "a",
        "connection",
        "to",
        "druid",
        "broker",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/druid_hook.py#L127-L139"
    },
    "target": "Establish a connection to druid broker .",
    "arguments": [
      [
        "def get_conn ( self ) : conn = self . get_connection ( self . druid_broker_conn_id ) druid_broker_conn = connect ( host = conn . host , port = conn . port , path = conn . extra_dejson . get ( 'endpoint' , '/druid/v2/sql' ) , scheme = conn . extra_dejson . get ( 'schema' , 'http' ) ) self . log . info ( 'Get the connection to druid broker on %s' , conn . host ) return druid_broker_conn",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\n## Vulnerabilidad\nEl c\u00f3digo proporciona acceso sin restriccations para ejecuciones arbitrariar\u00ede en Druid. Esto es peligo de alto riesgopar las instanciasecuestadasporatactuadora, ya qye puede permitirexeccuci\u00f3ndescripitiocualquercomandodruidsinoesretricenodebidoalparametrotipo=\"SQL\" y valor=sql que es una sentenciavalide de druiud.\n\n## Puntos d\u00e9bilitaadesde un perspeetvaauditivo:\n\n1  **Falta deporreviglacion** del par\u00e1metros tipo y valo para prenvegir inyecionesdeSQL.\n```markdown  \ndef __repr_ self) -> _Repr:\n        \"\"\"String representing ``self``,\n        intended to help debuggers find and fix issues in code that interacts w```\n```.python    \n# En lugar d'eval, deberiamoserelijar los datos con un driver segurasql como pydantic, por exmpeo, se podr\u00eda usary dbormodelfromsqlalchepy import declarativedeclara"
      ]
    ],
    "filtered_resps": [
      " ```\n\n## Vulnerabilidad\nEl c\u00f3digo proporciona acceso sin restriccations para ejecuciones arbitrariar\u00ede en Druid. Esto es peligo de alto riesgopar las instanciasecuestadasporatactuadora, ya qye puede permitirexeccuci\u00f3ndescripitiocualquercomandodruidsinoesretricenodebidoalparametrotipo=\"SQL\" y valor=sql que es una sentenciavalide de druiud.\n\n## Puntos d\u00e9bilitaadesde un perspeetvaauditivo:\n\n1  **Falta deporreviglacion** del par\u00e1metros tipo y valo para prenvegir inyecionesdeSQL.\n```markdown  \ndef __repr_ self) -> _Repr:\n        \"\"\"String representing ``self``,\n        intended to help debuggers find and fix issues in code that interacts w```\n```.python    \n# En lugar d'eval, deberiamoserelijar los datos con un driver segurasql como pydantic, por exmpeo, se podr\u00eda usary dbormodelfromsqlalchepy import declarativedeclara"
    ],
    "smoothed_bleu_4": 0.9251995879670463
  },
  {
    "doc_id": 73,
    "doc": {
      "id": 73,
      "repo": "apache/airflow",
      "path": "airflow/hooks/http_hook.py",
      "func_name": "HttpHook.get_conn",
      "original_string": "def get_conn(self, headers=None):\n        \"\"\"\n        Returns http session for use with requests\n\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict\n        \"\"\"\n        session = requests.Session()\n        if self.http_conn_id:\n            conn = self.get_connection(self.http_conn_id)\n\n            if \"://\" in conn.host:\n                self.base_url = conn.host\n            else:\n                # schema defaults to HTTP\n                schema = conn.schema if conn.schema else \"http\"\n                self.base_url = schema + \"://\" + conn.host\n\n            if conn.port:\n                self.base_url = self.base_url + \":\" + str(conn.port)\n            if conn.login:\n                session.auth = (conn.login, conn.password)\n            if conn.extra:\n                try:\n                    session.headers.update(conn.extra_dejson)\n                except TypeError:\n                    self.log.warn('Connection to %s has invalid extra field.', conn.host)\n        if headers:\n            session.headers.update(headers)\n\n        return session",
      "language": "python",
      "code": "def get_conn(self, headers=None):\n        \"\"\"\n        Returns http session for use with requests\n\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict\n        \"\"\"\n        session = requests.Session()\n        if self.http_conn_id:\n            conn = self.get_connection(self.http_conn_id)\n\n            if \"://\" in conn.host:\n                self.base_url = conn.host\n            else:\n                # schema defaults to HTTP\n                schema = conn.schema if conn.schema else \"http\"\n                self.base_url = schema + \"://\" + conn.host\n\n            if conn.port:\n                self.base_url = self.base_url + \":\" + str(conn.port)\n            if conn.login:\n                session.auth = (conn.login, conn.password)\n            if conn.extra:\n                try:\n                    session.headers.update(conn.extra_dejson)\n                except TypeError:\n                    self.log.warn('Connection to %s has invalid extra field.', conn.host)\n        if headers:\n            session.headers.update(headers)\n\n        return session",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ",",
        "headers",
        "=",
        "None",
        ")",
        ":",
        "session",
        "=",
        "requests",
        ".",
        "Session",
        "(",
        ")",
        "if",
        "self",
        ".",
        "http_conn_id",
        ":",
        "conn",
        "=",
        "self",
        ".",
        "get_connection",
        "(",
        "self",
        ".",
        "http_conn_id",
        ")",
        "if",
        "\"://\"",
        "in",
        "conn",
        ".",
        "host",
        ":",
        "self",
        ".",
        "base_url",
        "=",
        "conn",
        ".",
        "host",
        "else",
        ":",
        "# schema defaults to HTTP",
        "schema",
        "=",
        "conn",
        ".",
        "schema",
        "if",
        "conn",
        ".",
        "schema",
        "else",
        "\"http\"",
        "self",
        ".",
        "base_url",
        "=",
        "schema",
        "+",
        "\"://\"",
        "+",
        "conn",
        ".",
        "host",
        "if",
        "conn",
        ".",
        "port",
        ":",
        "self",
        ".",
        "base_url",
        "=",
        "self",
        ".",
        "base_url",
        "+",
        "\":\"",
        "+",
        "str",
        "(",
        "conn",
        ".",
        "port",
        ")",
        "if",
        "conn",
        ".",
        "login",
        ":",
        "session",
        ".",
        "auth",
        "=",
        "(",
        "conn",
        ".",
        "login",
        ",",
        "conn",
        ".",
        "password",
        ")",
        "if",
        "conn",
        ".",
        "extra",
        ":",
        "try",
        ":",
        "session",
        ".",
        "headers",
        ".",
        "update",
        "(",
        "conn",
        ".",
        "extra_dejson",
        ")",
        "except",
        "TypeError",
        ":",
        "self",
        ".",
        "log",
        ".",
        "warn",
        "(",
        "'Connection to %s has invalid extra field.'",
        ",",
        "conn",
        ".",
        "host",
        ")",
        "if",
        "headers",
        ":",
        "session",
        ".",
        "headers",
        ".",
        "update",
        "(",
        "headers",
        ")",
        "return",
        "session"
      ],
      "docstring": "Returns http session for use with requests\n\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict",
      "docstring_tokens": [
        "Returns",
        "http",
        "session",
        "for",
        "use",
        "with",
        "requests"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/http_hook.py#L53-L83"
    },
    "target": "Returns http session for use with requests",
    "arguments": [
      [
        "def get_conn ( self , headers = None ) : session = requests . Session ( ) if self . http_conn_id : conn = self . get_connection ( self . http_conn_id ) if \"://\" in conn . host : self . base_url = conn . host else : # schema defaults to HTTP schema = conn . schema if conn . schema else \"http\" self . base_url = schema + \"://\" + conn . host if conn . port : self . base_url = self . base_url + \":\" + str ( conn . port ) if conn . login : session . auth = ( conn . login , conn . password ) if conn . extra : try : session . headers . update ( conn . extra_dejson ) except TypeError : self . log . warn ( 'Connection to %s has invalid extra field.' , conn . host ) if headers : session . headers . update ( headers ) return session",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Related snippets from AirBnBOpensource/BigAirBNS\nHere we show how snippets are connected across AirbNBOpern source/BIgaRBN. In particular we look a connection to BigAirsBNS.\n\nfrom __future__ import unicode_urllib import request def big_arn_brokers_conn ( ** kwaegrs_ ) -> 'airflow.hooks.http.HttpConnection'self = kwargs_. set defaullts (\n``airbnb__http_user= None, airbnboptensore_bi_garbbrokaer_id = \"None\" \n```self. base_ urll \u00a0https:\u00a0//bigaibs.bsn.com/defaluts to 1.0 def __ini__t(self,**kwarg): super(https, sef)\u00a0. setdefaulta__kwargs_.\u00a0.update(kwarf\u00a0= {\u00a0'airsb__h ttps_u s e rs'\u00a0 None 'airbnbopnsoe_b i_garb roker_i _id': \"none\"} )\n# get_connection is defined in base HttpConnecitno class, we don' thas t define\u00a0i t he redef"
      ]
    ],
    "filtered_resps": [
      "\n\n## Related snippets from AirBnBOpensource/BigAirBNS\nHere we show how snippets are connected across AirbNBOpern source/BIgaRBN. In particular we look a connection to BigAirsBNS.\n\nfrom __future__ import unicode_urllib import request def big_arn_brokers_conn ( ** kwaegrs_ ) -> 'airflow.hooks.http.HttpConnection'self = kwargs_. set defaullts (\n``airbnb__http_user= None, airbnboptensore_bi_garbbrokaer_id = \"None\" \n```self. base_ urll \u00a0https:\u00a0//bigaibs.bsn.com/defaluts to 1.0 def __ini__t(self,**kwarg): super(https, sef)\u00a0. setdefaulta__kwargs_.\u00a0.update(kwarf\u00a0= {\u00a0'airsb__h ttps_u s e rs'\u00a0 None 'airbnbopnsoe_b i_garb roker_i _id': \"none\"} )\n# get_connection is defined in base HttpConnecitno class, we don' thas t define\u00a0i t he redef"
    ],
    "smoothed_bleu_4": 0.48485240806441
  },
  {
    "doc_id": 74,
    "doc": {
      "id": 74,
      "repo": "apache/airflow",
      "path": "airflow/hooks/http_hook.py",
      "func_name": "HttpHook.run",
      "original_string": "def run(self, endpoint, data=None, headers=None, extra_options=None):\n        \"\"\"\n        Performs the request\n\n        :param endpoint: the endpoint to be called i.e. resource/v1/query?\n        :type endpoint: str\n        :param data: payload to be uploaded or request parameters\n        :type data: dict\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non\n            2XX or 3XX status codes\n        :type extra_options: dict\n        \"\"\"\n        extra_options = extra_options or {}\n\n        session = self.get_conn(headers)\n\n        if self.base_url and not self.base_url.endswith('/') and \\\n           endpoint and not endpoint.startswith('/'):\n            url = self.base_url + '/' + endpoint\n        else:\n            url = (self.base_url or '') + (endpoint or '')\n\n        req = None\n        if self.method == 'GET':\n            # GET uses params\n            req = requests.Request(self.method,\n                                   url,\n                                   params=data,\n                                   headers=headers)\n        elif self.method == 'HEAD':\n            # HEAD doesn't use params\n            req = requests.Request(self.method,\n                                   url,\n                                   headers=headers)\n        else:\n            # Others use data\n            req = requests.Request(self.method,\n                                   url,\n                                   data=data,\n                                   headers=headers)\n\n        prepped_request = session.prepare_request(req)\n        self.log.info(\"Sending '%s' to url: %s\", self.method, url)\n        return self.run_and_check(session, prepped_request, extra_options)",
      "language": "python",
      "code": "def run(self, endpoint, data=None, headers=None, extra_options=None):\n        \"\"\"\n        Performs the request\n\n        :param endpoint: the endpoint to be called i.e. resource/v1/query?\n        :type endpoint: str\n        :param data: payload to be uploaded or request parameters\n        :type data: dict\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non\n            2XX or 3XX status codes\n        :type extra_options: dict\n        \"\"\"\n        extra_options = extra_options or {}\n\n        session = self.get_conn(headers)\n\n        if self.base_url and not self.base_url.endswith('/') and \\\n           endpoint and not endpoint.startswith('/'):\n            url = self.base_url + '/' + endpoint\n        else:\n            url = (self.base_url or '') + (endpoint or '')\n\n        req = None\n        if self.method == 'GET':\n            # GET uses params\n            req = requests.Request(self.method,\n                                   url,\n                                   params=data,\n                                   headers=headers)\n        elif self.method == 'HEAD':\n            # HEAD doesn't use params\n            req = requests.Request(self.method,\n                                   url,\n                                   headers=headers)\n        else:\n            # Others use data\n            req = requests.Request(self.method,\n                                   url,\n                                   data=data,\n                                   headers=headers)\n\n        prepped_request = session.prepare_request(req)\n        self.log.info(\"Sending '%s' to url: %s\", self.method, url)\n        return self.run_and_check(session, prepped_request, extra_options)",
      "code_tokens": [
        "def",
        "run",
        "(",
        "self",
        ",",
        "endpoint",
        ",",
        "data",
        "=",
        "None",
        ",",
        "headers",
        "=",
        "None",
        ",",
        "extra_options",
        "=",
        "None",
        ")",
        ":",
        "extra_options",
        "=",
        "extra_options",
        "or",
        "{",
        "}",
        "session",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        "headers",
        ")",
        "if",
        "self",
        ".",
        "base_url",
        "and",
        "not",
        "self",
        ".",
        "base_url",
        ".",
        "endswith",
        "(",
        "'/'",
        ")",
        "and",
        "endpoint",
        "and",
        "not",
        "endpoint",
        ".",
        "startswith",
        "(",
        "'/'",
        ")",
        ":",
        "url",
        "=",
        "self",
        ".",
        "base_url",
        "+",
        "'/'",
        "+",
        "endpoint",
        "else",
        ":",
        "url",
        "=",
        "(",
        "self",
        ".",
        "base_url",
        "or",
        "''",
        ")",
        "+",
        "(",
        "endpoint",
        "or",
        "''",
        ")",
        "req",
        "=",
        "None",
        "if",
        "self",
        ".",
        "method",
        "==",
        "'GET'",
        ":",
        "# GET uses params",
        "req",
        "=",
        "requests",
        ".",
        "Request",
        "(",
        "self",
        ".",
        "method",
        ",",
        "url",
        ",",
        "params",
        "=",
        "data",
        ",",
        "headers",
        "=",
        "headers",
        ")",
        "elif",
        "self",
        ".",
        "method",
        "==",
        "'HEAD'",
        ":",
        "# HEAD doesn't use params",
        "req",
        "=",
        "requests",
        ".",
        "Request",
        "(",
        "self",
        ".",
        "method",
        ",",
        "url",
        ",",
        "headers",
        "=",
        "headers",
        ")",
        "else",
        ":",
        "# Others use data",
        "req",
        "=",
        "requests",
        ".",
        "Request",
        "(",
        "self",
        ".",
        "method",
        ",",
        "url",
        ",",
        "data",
        "=",
        "data",
        ",",
        "headers",
        "=",
        "headers",
        ")",
        "prepped_request",
        "=",
        "session",
        ".",
        "prepare_request",
        "(",
        "req",
        ")",
        "self",
        ".",
        "log",
        ".",
        "info",
        "(",
        "\"Sending '%s' to url: %s\"",
        ",",
        "self",
        ".",
        "method",
        ",",
        "url",
        ")",
        "return",
        "self",
        ".",
        "run_and_check",
        "(",
        "session",
        ",",
        "prepped_request",
        ",",
        "extra_options",
        ")"
      ],
      "docstring": "Performs the request\n\n        :param endpoint: the endpoint to be called i.e. resource/v1/query?\n        :type endpoint: str\n        :param data: payload to be uploaded or request parameters\n        :type data: dict\n        :param headers: additional headers to be passed through as a dictionary\n        :type headers: dict\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non\n            2XX or 3XX status codes\n        :type extra_options: dict",
      "docstring_tokens": [
        "Performs",
        "the",
        "request"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/http_hook.py#L85-L131"
    },
    "target": "Performs the request",
    "arguments": [
      [
        "def run ( self , endpoint , data = None , headers = None , extra_options = None ) : extra_options = extra_options or { } session = self . get_conn ( headers ) if self . base_url and not self . base_url . endswith ( '/' ) and endpoint and not endpoint . startswith ( '/' ) : url = self . base_url + '/' + endpoint else : url = ( self . base_url or '' ) + ( endpoint or '' ) req = None if self . method == 'GET' : # GET uses params req = requests . Request ( self . method , url , params = data , headers = headers ) elif self . method == 'HEAD' : # HEAD doesn't use params req = requests . Request ( self . method , url , headers = headers ) else : # Others use data req = requests . Request ( self . method , url , data = data , headers = headers ) prepped_request = session . prepare_request ( req ) self . log . info ( \"Sending '%s' to url: %s\" , self . method , url ) return self . run_and_check ( session , prepped_request , extra_options )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nIn order of complexity (most to the `least):\n1. Complexity 8/10:\n```.patch\nclass MyAPISpec(ABC)    @abstractclassmethod def build(cls: Type[T]) - T, return_dict=False - dict[str,\n```: 1. Complexity `6` `/10```patch```\n\nThe code has been refaceted to improve maintainabiliyt. Here are a step-byc-step guide to how it was achieved:  **Simplifying Conditional Expressi**ons\n\nThe first improvement is removing redundant `elif/els** statements by using Python 1.6's ternar* operato*. For e**ampl, instead o** `method in [\u2018PUT,POST,PAS\u2019]`, use a dictionary that m**p method t** its correspoondin HTTP m**d.\n```py\nHTTP_MAPPINGS= dict(get=True, head = Head(),post=P**T,pAS=T**,Put=PU**)```\n\nThen we c* the conditiona l** exp*essi**ns t* us*e th** d*cio**a*ry. Fowarad refactoring will b e easie* to impl*m"
      ]
    ],
    "filtered_resps": [
      " ```\n\nIn order of complexity (most to the `least):\n1. Complexity 8/10:\n```.patch\nclass MyAPISpec(ABC)    @abstractclassmethod def build(cls: Type[T]) - T, return_dict=False - dict[str,\n```: 1. Complexity `6` `/10```patch```\n\nThe code has been refaceted to improve maintainabiliyt. Here are a step-byc-step guide to how it was achieved:  **Simplifying Conditional Expressi**ons\n\nThe first improvement is removing redundant `elif/els** statements by using Python 1.6's ternar* operato*. For e**ampl, instead o** `method in [\u2018PUT,POST,PAS\u2019]`, use a dictionary that m**p method t** its correspoondin HTTP m**d.\n```py\nHTTP_MAPPINGS= dict(get=True, head = Head(),post=P**T,pAS=T**,Put=PU**)```\n\nThen we c* the conditiona l** exp*essi**ns t* us*e th** d*cio**a*ry. Fowarad refactoring will b e easie* to impl*m"
    ],
    "smoothed_bleu_4": 0.379868932751582
  },
  {
    "doc_id": 75,
    "doc": {
      "id": 75,
      "repo": "apache/airflow",
      "path": "airflow/hooks/http_hook.py",
      "func_name": "HttpHook.check_response",
      "original_string": "def check_response(self, response):\n        \"\"\"\n        Checks the status code and raise an AirflowException exception on non 2XX or 3XX\n        status codes\n\n        :param response: A requests response object\n        :type response: requests.response\n        \"\"\"\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError:\n            self.log.error(\"HTTP error: %s\", response.reason)\n            if self.method not in ['GET', 'HEAD']:\n                self.log.error(response.text)\n            raise AirflowException(str(response.status_code) + \":\" + response.reason)",
      "language": "python",
      "code": "def check_response(self, response):\n        \"\"\"\n        Checks the status code and raise an AirflowException exception on non 2XX or 3XX\n        status codes\n\n        :param response: A requests response object\n        :type response: requests.response\n        \"\"\"\n        try:\n            response.raise_for_status()\n        except requests.exceptions.HTTPError:\n            self.log.error(\"HTTP error: %s\", response.reason)\n            if self.method not in ['GET', 'HEAD']:\n                self.log.error(response.text)\n            raise AirflowException(str(response.status_code) + \":\" + response.reason)",
      "code_tokens": [
        "def",
        "check_response",
        "(",
        "self",
        ",",
        "response",
        ")",
        ":",
        "try",
        ":",
        "response",
        ".",
        "raise_for_status",
        "(",
        ")",
        "except",
        "requests",
        ".",
        "exceptions",
        ".",
        "HTTPError",
        ":",
        "self",
        ".",
        "log",
        ".",
        "error",
        "(",
        "\"HTTP error: %s\"",
        ",",
        "response",
        ".",
        "reason",
        ")",
        "if",
        "self",
        ".",
        "method",
        "not",
        "in",
        "[",
        "'GET'",
        ",",
        "'HEAD'",
        "]",
        ":",
        "self",
        ".",
        "log",
        ".",
        "error",
        "(",
        "response",
        ".",
        "text",
        ")",
        "raise",
        "AirflowException",
        "(",
        "str",
        "(",
        "response",
        ".",
        "status_code",
        ")",
        "+",
        "\":\"",
        "+",
        "response",
        ".",
        "reason",
        ")"
      ],
      "docstring": "Checks the status code and raise an AirflowException exception on non 2XX or 3XX\n        status codes\n\n        :param response: A requests response object\n        :type response: requests.response",
      "docstring_tokens": [
        "Checks",
        "the",
        "status",
        "code",
        "and",
        "raise",
        "an",
        "AirflowException",
        "exception",
        "on",
        "non",
        "2XX",
        "or",
        "3XX",
        "status",
        "codes"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/http_hook.py#L133-L147"
    },
    "target": "Checks the status code and raise an AirflowException exception on non 2XX or 3XX status codes",
    "arguments": [
      [
        "def check_response ( self , response ) : try : response . raise_for_status ( ) except requests . exceptions . HTTPError : self . log . error ( \"HTTP error: %s\" , response . reason ) if self . method not in [ 'GET' , 'HEAD' ] : self . log . error ( response . text ) raise AirflowException ( str ( response . status_code ) + \":\" + response . reason )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def get (... )\n````## Step-by-stpe solution to this code\n\n1. Import `json` to handle data parsing.\n```from flask_restx.reqParse  # noqa:F821 import JSON``2.Replace line 1 and the import of requests to match AirFLOW-1.10 syntax:\n`requests = importlib. Import module ( requests, namespace_packages= { '__init__. Py'})`\n\n```.json() to.get_json().parse()` in response handling to fix syntax error```\n```try:\n  self. get _data (response) except json.JSONDec error as ex :  log.error( ex. str Error )\n3.Replaced `raise HTTP error: ${reason`with a more generic message`self._handle_ response _ error ('Error fetching % ( method, self._api.base_Url)'% {'method' = method. Upper (.) 'base _ URL ', response._status_ cod))```##Step-3 to 7 are not shown in final code, they have no relation with bug fixing.\nThe debug information provided does help identify a bug that was preventing code compilation. By following steps one, two &amp;& three you are well on track towards debugging"
      ]
    ],
    "filtered_resps": [
      " def get (... )\n````## Step-by-stpe solution to this code\n\n1. Import `json` to handle data parsing.\n```from flask_restx.reqParse  # noqa:F821 import JSON``2.Replace line 1 and the import of requests to match AirFLOW-1.10 syntax:\n`requests = importlib. Import module ( requests, namespace_packages= { '__init__. Py'})`\n\n```.json() to.get_json().parse()` in response handling to fix syntax error```\n```try:\n  self. get _data (response) except json.JSONDec error as ex :  log.error( ex. str Error )\n3.Replaced `raise HTTP error: ${reason`with a more generic message`self._handle_ response _ error ('Error fetching % ( method, self._api.base_Url)'% {'method' = method. Upper (.) 'base _ URL ', response._status_ cod))```##Step-3 to 7 are not shown in final code, they have no relation with bug fixing.\nThe debug information provided does help identify a bug that was preventing code compilation. By following steps one, two &amp;& three you are well on track towards debugging"
    ],
    "smoothed_bleu_4": 0.5545053462914413
  },
  {
    "doc_id": 76,
    "doc": {
      "id": 76,
      "repo": "apache/airflow",
      "path": "airflow/hooks/http_hook.py",
      "func_name": "HttpHook.run_and_check",
      "original_string": "def run_and_check(self, session, prepped_request, extra_options):\n        \"\"\"\n        Grabs extra options like timeout and actually runs the request,\n        checking for the result\n\n        :param session: the session to be used to execute the request\n        :type session: requests.Session\n        :param prepped_request: the prepared request generated in run()\n        :type prepped_request: session.prepare_request\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non 2XX\n            or 3XX status codes\n        :type extra_options: dict\n        \"\"\"\n        extra_options = extra_options or {}\n\n        try:\n            response = session.send(\n                prepped_request,\n                stream=extra_options.get(\"stream\", False),\n                verify=extra_options.get(\"verify\", True),\n                proxies=extra_options.get(\"proxies\", {}),\n                cert=extra_options.get(\"cert\"),\n                timeout=extra_options.get(\"timeout\"),\n                allow_redirects=extra_options.get(\"allow_redirects\", True))\n\n            if extra_options.get('check_response', True):\n                self.check_response(response)\n            return response\n\n        except requests.exceptions.ConnectionError as ex:\n            self.log.warn(str(ex) + ' Tenacity will retry to execute the operation')\n            raise ex",
      "language": "python",
      "code": "def run_and_check(self, session, prepped_request, extra_options):\n        \"\"\"\n        Grabs extra options like timeout and actually runs the request,\n        checking for the result\n\n        :param session: the session to be used to execute the request\n        :type session: requests.Session\n        :param prepped_request: the prepared request generated in run()\n        :type prepped_request: session.prepare_request\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non 2XX\n            or 3XX status codes\n        :type extra_options: dict\n        \"\"\"\n        extra_options = extra_options or {}\n\n        try:\n            response = session.send(\n                prepped_request,\n                stream=extra_options.get(\"stream\", False),\n                verify=extra_options.get(\"verify\", True),\n                proxies=extra_options.get(\"proxies\", {}),\n                cert=extra_options.get(\"cert\"),\n                timeout=extra_options.get(\"timeout\"),\n                allow_redirects=extra_options.get(\"allow_redirects\", True))\n\n            if extra_options.get('check_response', True):\n                self.check_response(response)\n            return response\n\n        except requests.exceptions.ConnectionError as ex:\n            self.log.warn(str(ex) + ' Tenacity will retry to execute the operation')\n            raise ex",
      "code_tokens": [
        "def",
        "run_and_check",
        "(",
        "self",
        ",",
        "session",
        ",",
        "prepped_request",
        ",",
        "extra_options",
        ")",
        ":",
        "extra_options",
        "=",
        "extra_options",
        "or",
        "{",
        "}",
        "try",
        ":",
        "response",
        "=",
        "session",
        ".",
        "send",
        "(",
        "prepped_request",
        ",",
        "stream",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"stream\"",
        ",",
        "False",
        ")",
        ",",
        "verify",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"verify\"",
        ",",
        "True",
        ")",
        ",",
        "proxies",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"proxies\"",
        ",",
        "{",
        "}",
        ")",
        ",",
        "cert",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"cert\"",
        ")",
        ",",
        "timeout",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"timeout\"",
        ")",
        ",",
        "allow_redirects",
        "=",
        "extra_options",
        ".",
        "get",
        "(",
        "\"allow_redirects\"",
        ",",
        "True",
        ")",
        ")",
        "if",
        "extra_options",
        ".",
        "get",
        "(",
        "'check_response'",
        ",",
        "True",
        ")",
        ":",
        "self",
        ".",
        "check_response",
        "(",
        "response",
        ")",
        "return",
        "response",
        "except",
        "requests",
        ".",
        "exceptions",
        ".",
        "ConnectionError",
        "as",
        "ex",
        ":",
        "self",
        ".",
        "log",
        ".",
        "warn",
        "(",
        "str",
        "(",
        "ex",
        ")",
        "+",
        "' Tenacity will retry to execute the operation'",
        ")",
        "raise",
        "ex"
      ],
      "docstring": "Grabs extra options like timeout and actually runs the request,\n        checking for the result\n\n        :param session: the session to be used to execute the request\n        :type session: requests.Session\n        :param prepped_request: the prepared request generated in run()\n        :type prepped_request: session.prepare_request\n        :param extra_options: additional options to be used when executing the request\n            i.e. {'check_response': False} to avoid checking raising exceptions on non 2XX\n            or 3XX status codes\n        :type extra_options: dict",
      "docstring_tokens": [
        "Grabs",
        "extra",
        "options",
        "like",
        "timeout",
        "and",
        "actually",
        "runs",
        "the",
        "request",
        "checking",
        "for",
        "the",
        "result"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/http_hook.py#L149-L181"
    },
    "target": "Grabs extra options like timeout and actually runs the request checking for the result",
    "arguments": [
      [
        "def run_and_check ( self , session , prepped_request , extra_options ) : extra_options = extra_options or { } try : response = session . send ( prepped_request , stream = extra_options . get ( \"stream\" , False ) , verify = extra_options . get ( \"verify\" , True ) , proxies = extra_options . get ( \"proxies\" , { } ) , cert = extra_options . get ( \"cert\" ) , timeout = extra_options . get ( \"timeout\" ) , allow_redirects = extra_options . get ( \"allow_redirects\" , True ) ) if extra_options . get ( 'check_response' , True ) : self . check_response ( response ) return response except requests . exceptions . ConnectionError as ex : self . log . warn ( str ( ex ) + ' Tenacity will retry to execute the operation' ) raise ex",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## NavigableDict.__setstate__ function \u00b6 \u2191 2 versions ago \u00a0 no links, similar files \u2039 ALL FILESCONTROLS/tenable/grafanaworkspace.py up [file contents](graphtree.py#L1), previous next \u00bb \u00b6 source\n``[1 lines not shown, use M-x hide-lines <numpadding> to un-hack the view; press C-h v org-buf-line-num-mode for more]def set_attributes_and_check ( *args ):\n  # code that is no different in this version than it\n``[4 blank spaces not shown, use S-spell-dabbrev to find it]  from __pyclowdutils__.nug.get_navigativedictpycloudbuiltincertificatemixinimport NaviGatIbleDICTpyClOuDbuILtINCertiFAtemIxiM   self.__setattribtEaRsANdbEcHk__=NavigabLdEicTtRrAesetAttrIbTbuSAndCHeCK(self, args[2],*argspython-requests-graflow.py\n\n## runAnd"
      ]
    ],
    "filtered_resps": [
      "\n\n## NavigableDict.__setstate__ function \u00b6 \u2191 2 versions ago \u00a0 no links, similar files \u2039 ALL FILESCONTROLS/tenable/grafanaworkspace.py up [file contents](graphtree.py#L1), previous next \u00bb \u00b6 source\n``[1 lines not shown, use M-x hide-lines <numpadding> to un-hack the view; press C-h v org-buf-line-num-mode for more]def set_attributes_and_check ( *args ):\n  # code that is no different in this version than it\n``[4 blank spaces not shown, use S-spell-dabbrev to find it]  from __pyclowdutils__.nug.get_navigativedictpycloudbuiltincertificatemixinimport NaviGatIbleDICTpyClOuDbuILtINCertiFAtemIxiM   self.__setattribtEaRsANdbEcHk__=NavigabLdEicTtRrAesetAttrIbTbuSAndCHeCK(self, args[2],*argspython-requests-graflow.py\n\n## runAnd"
    ],
    "smoothed_bleu_4": 0.7640576401623409
  },
  {
    "doc_id": 77,
    "doc": {
      "id": 77,
      "repo": "apache/airflow",
      "path": "airflow/utils/db.py",
      "func_name": "create_session",
      "original_string": "def create_session():\n    \"\"\"\n    Contextmanager that will create and teardown a session.\n    \"\"\"\n    session = settings.Session()\n    try:\n        yield session\n        session.commit()\n    except Exception:\n        session.rollback()\n        raise\n    finally:\n        session.close()",
      "language": "python",
      "code": "def create_session():\n    \"\"\"\n    Contextmanager that will create and teardown a session.\n    \"\"\"\n    session = settings.Session()\n    try:\n        yield session\n        session.commit()\n    except Exception:\n        session.rollback()\n        raise\n    finally:\n        session.close()",
      "code_tokens": [
        "def",
        "create_session",
        "(",
        ")",
        ":",
        "session",
        "=",
        "settings",
        ".",
        "Session",
        "(",
        ")",
        "try",
        ":",
        "yield",
        "session",
        "session",
        ".",
        "commit",
        "(",
        ")",
        "except",
        "Exception",
        ":",
        "session",
        ".",
        "rollback",
        "(",
        ")",
        "raise",
        "finally",
        ":",
        "session",
        ".",
        "close",
        "(",
        ")"
      ],
      "docstring": "Contextmanager that will create and teardown a session.",
      "docstring_tokens": [
        "Contextmanager",
        "that",
        "will",
        "create",
        "and",
        "teardown",
        "a",
        "session",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/db.py#L32-L44"
    },
    "target": "Contextmanager that will create and teardown a session .",
    "arguments": [
      [
        "def create_session ( ) : session = settings . Session ( ) try : yield session session . commit ( ) except Exception : session . rollback ( ) raise finally : session . close ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are explanations and justificatiom of code:\n\n1 2. This line imports `sqlalchemy`` package. We need SQLAlchemy in this code to interact database.\n```.python\n# -*- code-complex-encoding: iso-l10 - n utf  -8 -*-import sqlalche mgy  -8\n````\\n1\\. \\ This  li\\ n  im po rt \\ s q la ch em ya p ac kg es. W ec ode t ob in te rac th ed ata be as et o fflin e wi thS\n  ild a rge s ta n dp ai rd e ta b le. ``\n\n4-8: SQLAlchemy uses Python 1.8, which has been discontinued for over 2-1/2 1 years and no support from python. The import should change SQLAlchemy to `pymap` to avoid compatibility issue with Python 4.8.\n```pytong# - code-compl\nexplanatiion and jstifica\n\n4.  1-8. SQLAlchemy us esPy thon 8, whic has beendi soppor ter f ovr2. The imp or shoul de ch n"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are explanations and justificatiom of code:\n\n1 2. This line imports `sqlalchemy`` package. We need SQLAlchemy in this code to interact database.\n```.python\n# -*- code-complex-encoding: iso-l10 - n utf  -8 -*-import sqlalche mgy  -8\n````\\n1\\. \\ This  li\\ n  im po rt \\ s q la ch em ya p ac kg es. W ec ode t ob in te rac th ed ata be as et o fflin e wi thS\n  ild a rge s ta n dp ai rd e ta b le. ``\n\n4-8: SQLAlchemy uses Python 1.8, which has been discontinued for over 2-1/2 1 years and no support from python. The import should change SQLAlchemy to `pymap` to avoid compatibility issue with Python 4.8.\n```pytong# - code-compl\nexplanatiion and jstifica\n\n4.  1-8. SQLAlchemy us esPy thon 8, whic has beendi soppor ter f ovr2. The imp or shoul de ch n"
    ],
    "smoothed_bleu_4": 0.6142748570439982
  },
  {
    "doc_id": 78,
    "doc": {
      "id": 78,
      "repo": "apache/airflow",
      "path": "airflow/utils/db.py",
      "func_name": "provide_session",
      "original_string": "def provide_session(func):\n    \"\"\"\n    Function decorator that provides a session if it isn't provided.\n    If you want to reuse a session or run the function as part of a\n    database transaction, you pass it to the function, if not this wrapper\n    will create one and close it for you.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        arg_session = 'session'\n\n        func_params = func.__code__.co_varnames\n        session_in_args = arg_session in func_params and \\\n            func_params.index(arg_session) < len(args)\n        session_in_kwargs = arg_session in kwargs\n\n        if session_in_kwargs or session_in_args:\n            return func(*args, **kwargs)\n        else:\n            with create_session() as session:\n                kwargs[arg_session] = session\n                return func(*args, **kwargs)\n\n    return wrapper",
      "language": "python",
      "code": "def provide_session(func):\n    \"\"\"\n    Function decorator that provides a session if it isn't provided.\n    If you want to reuse a session or run the function as part of a\n    database transaction, you pass it to the function, if not this wrapper\n    will create one and close it for you.\n    \"\"\"\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        arg_session = 'session'\n\n        func_params = func.__code__.co_varnames\n        session_in_args = arg_session in func_params and \\\n            func_params.index(arg_session) < len(args)\n        session_in_kwargs = arg_session in kwargs\n\n        if session_in_kwargs or session_in_args:\n            return func(*args, **kwargs)\n        else:\n            with create_session() as session:\n                kwargs[arg_session] = session\n                return func(*args, **kwargs)\n\n    return wrapper",
      "code_tokens": [
        "def",
        "provide_session",
        "(",
        "func",
        ")",
        ":",
        "@",
        "wraps",
        "(",
        "func",
        ")",
        "def",
        "wrapper",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        ":",
        "arg_session",
        "=",
        "'session'",
        "func_params",
        "=",
        "func",
        ".",
        "__code__",
        ".",
        "co_varnames",
        "session_in_args",
        "=",
        "arg_session",
        "in",
        "func_params",
        "and",
        "func_params",
        ".",
        "index",
        "(",
        "arg_session",
        ")",
        "<",
        "len",
        "(",
        "args",
        ")",
        "session_in_kwargs",
        "=",
        "arg_session",
        "in",
        "kwargs",
        "if",
        "session_in_kwargs",
        "or",
        "session_in_args",
        ":",
        "return",
        "func",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        "else",
        ":",
        "with",
        "create_session",
        "(",
        ")",
        "as",
        "session",
        ":",
        "kwargs",
        "[",
        "arg_session",
        "]",
        "=",
        "session",
        "return",
        "func",
        "(",
        "*",
        "args",
        ",",
        "*",
        "*",
        "kwargs",
        ")",
        "return",
        "wrapper"
      ],
      "docstring": "Function decorator that provides a session if it isn't provided.\n    If you want to reuse a session or run the function as part of a\n    database transaction, you pass it to the function, if not this wrapper\n    will create one and close it for you.",
      "docstring_tokens": [
        "Function",
        "decorator",
        "that",
        "provides",
        "a",
        "session",
        "if",
        "it",
        "isn",
        "t",
        "provided",
        ".",
        "If",
        "you",
        "want",
        "to",
        "reuse",
        "a",
        "session",
        "or",
        "run",
        "the",
        "function",
        "as",
        "part",
        "of",
        "a",
        "database",
        "transaction",
        "you",
        "pass",
        "it",
        "to",
        "the",
        "function",
        "if",
        "not",
        "this",
        "wrapper",
        "will",
        "create",
        "one",
        "and",
        "close",
        "it",
        "for",
        "you",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/db.py#L47-L70"
    },
    "target": "Function decorator that provides a session if it isn t provided . If you want to reuse a session or run the function as part of a database transaction you pass it to the function if not this wrapper will create one and close it for you .",
    "arguments": [
      [
        "def provide_session ( func ) : @ wraps ( func ) def wrapper ( * args , * * kwargs ) : arg_session = 'session' func_params = func . __code__ . co_varnames session_in_args = arg_session in func_params and func_params . index ( arg_session ) < len ( args ) session_in_kwargs = arg_session in kwargs if session_in_kwargs or session_in_args : return func ( * args , * * kwargs ) else : with create_session ( ) as session : kwargs [ arg_session ] = session return func ( * args , * * kwargs ) return wrapper",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n 4-2 \u901a\u8fc7\u88c5\u98fe\u6765\u5be6\u4f8b session ``` from sqlalchemy import engine_from configurati on @wrappes r  defeven_odd( n ): \"\"\"Determi n ewether n i sa n evenc o red or not. Args\uff1an (in te ger): Tobe c on fir m e di d. Re turnse ven t if e ven, od de s o therwi s em is c el e v a t io ns i n a se ssi on, t h er e f a l l b ac kl o s u re n ev ec o rde ven c el e v a to r e x ec ute d in as se ssio ni st e a da b l et os a vi ng s eri  al i s at ion p robl e me n o t r e l ea sin ge v e r i fi ca t e o utp urt. Retaur nde s o the rs w it hou tr un ki n gs i nc l udin ga d di s a bo ve. ``` defeven_odo rr(wra ps (fun c )\uff1a def wrape r( \u3000*n args,*kwr"
      ]
    ],
    "filtered_resps": [
      " ```\n 4-2 \u901a\u8fc7\u88c5\u98fe\u6765\u5be6\u4f8b session ``` from sqlalchemy import engine_from configurati on @wrappes r  defeven_odd( n ): \"\"\"Determi n ewether n i sa n evenc o red or not. Args\uff1an (in te ger): Tobe c on fir m e di d. Re turnse ven t if e ven, od de s o therwi s em is c el e v a t io ns i n a se ssi on, t h er e f a l l b ac kl o s u re n ev ec o rde ven c el e v a to r e x ec ute d in as se ssio ni st e a da b l et os a vi ng s eri  al i s at ion p robl e me n o t r e l ea sin ge v e r i fi ca t e o utp urt. Retaur nde s o the rs w it hou tr un ki n gs i nc l udin ga d di s a bo ve. ``` defeven_odo rr(wra ps (fun c )\uff1a def wrape r( \u3000*n args,*kwr"
    ],
    "smoothed_bleu_4": 0.8587567332159074
  },
  {
    "doc_id": 79,
    "doc": {
      "id": 79,
      "repo": "apache/airflow",
      "path": "airflow/utils/db.py",
      "func_name": "resetdb",
      "original_string": "def resetdb():\n    \"\"\"\n    Clear out the database\n    \"\"\"\n    from airflow import models\n\n    # alembic adds significant import time, so we import it lazily\n    from alembic.migration import MigrationContext\n\n    log.info(\"Dropping tables that exist\")\n\n    models.base.Base.metadata.drop_all(settings.engine)\n    mc = MigrationContext.configure(settings.engine)\n    if mc._version.exists(settings.engine):\n        mc._version.drop(settings.engine)\n\n    from flask_appbuilder.models.sqla import Base\n    Base.metadata.drop_all(settings.engine)\n\n    initdb()",
      "language": "python",
      "code": "def resetdb():\n    \"\"\"\n    Clear out the database\n    \"\"\"\n    from airflow import models\n\n    # alembic adds significant import time, so we import it lazily\n    from alembic.migration import MigrationContext\n\n    log.info(\"Dropping tables that exist\")\n\n    models.base.Base.metadata.drop_all(settings.engine)\n    mc = MigrationContext.configure(settings.engine)\n    if mc._version.exists(settings.engine):\n        mc._version.drop(settings.engine)\n\n    from flask_appbuilder.models.sqla import Base\n    Base.metadata.drop_all(settings.engine)\n\n    initdb()",
      "code_tokens": [
        "def",
        "resetdb",
        "(",
        ")",
        ":",
        "from",
        "airflow",
        "import",
        "models",
        "# alembic adds significant import time, so we import it lazily",
        "from",
        "alembic",
        ".",
        "migration",
        "import",
        "MigrationContext",
        "log",
        ".",
        "info",
        "(",
        "\"Dropping tables that exist\"",
        ")",
        "models",
        ".",
        "base",
        ".",
        "Base",
        ".",
        "metadata",
        ".",
        "drop_all",
        "(",
        "settings",
        ".",
        "engine",
        ")",
        "mc",
        "=",
        "MigrationContext",
        ".",
        "configure",
        "(",
        "settings",
        ".",
        "engine",
        ")",
        "if",
        "mc",
        ".",
        "_version",
        ".",
        "exists",
        "(",
        "settings",
        ".",
        "engine",
        ")",
        ":",
        "mc",
        ".",
        "_version",
        ".",
        "drop",
        "(",
        "settings",
        ".",
        "engine",
        ")",
        "from",
        "flask_appbuilder",
        ".",
        "models",
        ".",
        "sqla",
        "import",
        "Base",
        "Base",
        ".",
        "metadata",
        ".",
        "drop_all",
        "(",
        "settings",
        ".",
        "engine",
        ")",
        "initdb",
        "(",
        ")"
      ],
      "docstring": "Clear out the database",
      "docstring_tokens": [
        "Clear",
        "out",
        "the",
        "database"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/utils/db.py#L312-L331"
    },
    "target": "Clear out the database",
    "arguments": [
      [
        "def resetdb ( ) : from airflow import models # alembic adds significant import time, so we import it lazily from alembic . migration import MigrationContext log . info ( \"Dropping tables that exist\" ) models . base . Base . metadata . drop_all ( settings . engine ) mc = MigrationContext . configure ( settings . engine ) if mc . _version . exists ( settings . engine ) : mc . _version . drop ( settings . engine ) from flask_appbuilder . models . sqla import Base Base . metadata . drop_all ( settings . engine ) initdb ( )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def run_makeregs_and_regen_celerrahash ( app : FlaskAppbuilder = flask. g. fappbuilder) -&amp;nbsphinx-tab-width 2\n- &lt;pandas-great_expectATIONS - Great ExpecTation (GEX)&#x2026;</li> <script>window.location.reload(1); void function(a){\"definitionProperty\"===Object.defineProperties.toString()[12].replace(/\\[.*]/,\"\")?\"object.defineProperty(exports, '__wrapped__',{enumerable:!1,written:_w,augments:arguments.calle}):\\_/a('https%253C/a>'}</p&gt ; </details>\n\nThe code is part and file from Airbyte. It seems you're asking us for code completion, which isn''T what StackExchange Q\\&amp;n is for (https: //meta.stckex.chnge/questions/239/What-exact-ty-should-l-rea-seek-wh-n-as-ks-on-stc-x-). Please refer t the offi documentation: <a class=\"-external resource\" data-hyperlinks=\"{\"t\":1, \"a\":\"https:\\/\\/github.com/AIRBYTE-LIB/ab"
      ]
    ],
    "filtered_resps": [
      " def run_makeregs_and_regen_celerrahash ( app : FlaskAppbuilder = flask. g. fappbuilder) -&amp;nbsphinx-tab-width 2\n- &lt;pandas-great_expectATIONS - Great ExpecTation (GEX)&#x2026;</li> <script>window.location.reload(1); void function(a){\"definitionProperty\"===Object.defineProperties.toString()[12].replace(/\\[.*]/,\"\")?\"object.defineProperty(exports, '__wrapped__',{enumerable:!1,written:_w,augments:arguments.calle}):\\_/a('https%253C/a>'}</p&gt ; </details>\n\nThe code is part and file from Airbyte. It seems you're asking us for code completion, which isn''T what StackExchange Q\\&amp;n is for (https: //meta.stckex.chnge/questions/239/What-exact-ty-should-l-rea-seek-wh-n-as-ks-on-stc-x-). Please refer t the offi documentation: <a class=\"-external resource\" data-hyperlinks=\"{\"t\":1, \"a\":\"https:\\/\\/github.com/AIRBYTE-LIB/ab"
    ],
    "smoothed_bleu_4": 0.3469225120997866
  },
  {
    "doc_id": 80,
    "doc": {
      "id": 80,
      "repo": "apache/airflow",
      "path": "airflow/hooks/presto_hook.py",
      "func_name": "PrestoHook._get_pretty_exception_message",
      "original_string": "def _get_pretty_exception_message(e):\n        \"\"\"\n        Parses some DatabaseError to provide a better error message\n        \"\"\"\n        if (hasattr(e, 'message') and\n            'errorName' in e.message and\n                'message' in e.message):\n            return ('{name}: {message}'.format(\n                    name=e.message['errorName'],\n                    message=e.message['message']))\n        else:\n            return str(e)",
      "language": "python",
      "code": "def _get_pretty_exception_message(e):\n        \"\"\"\n        Parses some DatabaseError to provide a better error message\n        \"\"\"\n        if (hasattr(e, 'message') and\n            'errorName' in e.message and\n                'message' in e.message):\n            return ('{name}: {message}'.format(\n                    name=e.message['errorName'],\n                    message=e.message['message']))\n        else:\n            return str(e)",
      "code_tokens": [
        "def",
        "_get_pretty_exception_message",
        "(",
        "e",
        ")",
        ":",
        "if",
        "(",
        "hasattr",
        "(",
        "e",
        ",",
        "'message'",
        ")",
        "and",
        "'errorName'",
        "in",
        "e",
        ".",
        "message",
        "and",
        "'message'",
        "in",
        "e",
        ".",
        "message",
        ")",
        ":",
        "return",
        "(",
        "'{name}: {message}'",
        ".",
        "format",
        "(",
        "name",
        "=",
        "e",
        ".",
        "message",
        "[",
        "'errorName'",
        "]",
        ",",
        "message",
        "=",
        "e",
        ".",
        "message",
        "[",
        "'message'",
        "]",
        ")",
        ")",
        "else",
        ":",
        "return",
        "str",
        "(",
        "e",
        ")"
      ],
      "docstring": "Parses some DatabaseError to provide a better error message",
      "docstring_tokens": [
        "Parses",
        "some",
        "DatabaseError",
        "to",
        "provide",
        "a",
        "better",
        "error",
        "message"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/presto_hook.py#L67-L78"
    },
    "target": "Parses some DatabaseError to provide a better error message",
    "arguments": [
      [
        "def _get_pretty_exception_message ( e ) : if ( hasattr ( e , 'message' ) and 'errorName' in e . message and 'message' in e . message ) : return ( '{name}: {message}' . format ( name = e . message [ 'errorName' ] , message = e . message [ 'message' ] ) ) else : return str ( e )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " :\n`````\n\nIn questo esempro:\n\n1  La funzio _gett_prette_izziomessa_ accetpa un argoent e (che potr\u00e8b essere qualsequie cosa)\n3  Cerchiam di ottegnir l'oggett e come dizionaire utiliand il mtho hasattr e le clau errorNma\n   se e'mssg' sono disponibilie allintenro deil diziomia, restituim una srtting formmatizaa in stilo human-readaibl.\n  Al trtuo casoe sempimemnt restiuisi str(eg) per mostr il tettto dell'eccpione.\n\nEsegui questi comandi in uno scherma di conoagliomentazione come ad exampi:\n``python -m pypercolator  --exception=TypeError: unsupported operand type(b'Hello' for 'i') ````\n\nIn this example we define three exceptions: ValueError with error code \u201cE0001\u201d,\nSyntax Error (which inherits ValueErro), with code E0030,\nRuntime Erre (whic inhertis Syt"
      ]
    ],
    "filtered_resps": [
      " :\n`````\n\nIn questo esempro:\n\n1  La funzio _gett_prette_izziomessa_ accetpa un argoent e (che potr\u00e8b essere qualsequie cosa)\n3  Cerchiam di ottegnir l'oggett e come dizionaire utiliand il mtho hasattr e le clau errorNma\n   se e'mssg' sono disponibilie allintenro deil diziomia, restituim una srtting formmatizaa in stilo human-readaibl.\n  Al trtuo casoe sempimemnt restiuisi str(eg) per mostr il tettto dell'eccpione.\n\nEsegui questi comandi in uno scherma di conoagliomentazione come ad exampi:\n``python -m pypercolator  --exception=TypeError: unsupported operand type(b'Hello' for 'i') ````\n\nIn this example we define three exceptions: ValueError with error code \u201cE0001\u201d,\nSyntax Error (which inherits ValueErro), with code E0030,\nRuntime Erre (whic inhertis Syt"
    ],
    "smoothed_bleu_4": 0.6201632515304226
  },
  {
    "doc_id": 81,
    "doc": {
      "id": 81,
      "repo": "apache/airflow",
      "path": "airflow/hooks/presto_hook.py",
      "func_name": "PrestoHook.get_records",
      "original_string": "def get_records(self, hql, parameters=None):\n        \"\"\"\n        Get a set of records from Presto\n        \"\"\"\n        try:\n            return super().get_records(\n                self._strip_sql(hql), parameters)\n        except DatabaseError as e:\n            raise PrestoException(self._get_pretty_exception_message(e))",
      "language": "python",
      "code": "def get_records(self, hql, parameters=None):\n        \"\"\"\n        Get a set of records from Presto\n        \"\"\"\n        try:\n            return super().get_records(\n                self._strip_sql(hql), parameters)\n        except DatabaseError as e:\n            raise PrestoException(self._get_pretty_exception_message(e))",
      "code_tokens": [
        "def",
        "get_records",
        "(",
        "self",
        ",",
        "hql",
        ",",
        "parameters",
        "=",
        "None",
        ")",
        ":",
        "try",
        ":",
        "return",
        "super",
        "(",
        ")",
        ".",
        "get_records",
        "(",
        "self",
        ".",
        "_strip_sql",
        "(",
        "hql",
        ")",
        ",",
        "parameters",
        ")",
        "except",
        "DatabaseError",
        "as",
        "e",
        ":",
        "raise",
        "PrestoException",
        "(",
        "self",
        ".",
        "_get_pretty_exception_message",
        "(",
        "e",
        ")",
        ")"
      ],
      "docstring": "Get a set of records from Presto",
      "docstring_tokens": [
        "Get",
        "a",
        "set",
        "of",
        "records",
        "from",
        "Presto"
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/presto_hook.py#L80-L88"
    },
    "target": "Get a set of records from Presto",
    "arguments": [
      [
        "def get_records ( self , hql , parameters = None ) : try : return super ( ) . get_records ( self . _strip_sql ( hql ) , parameters ) except DatabaseError as e : raise PrestoException ( self . _get_pretty_exception_message ( e ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nThis method takes two arguments:\n\n1.hql (`string'): This will be stripped of SQL commands using self.\\ _strp_sql ( ) before it is used.\n1. parameter (\\ * parameters = \\ { }) - An object to use as keyword and value parameters in hqlo. It is passed to super (\\) get_recotd \\(\\backlash\\).\n\nThe `try-exit clause_ handles exceptions that are DatabaseError, raising PrestException (\\_gret_pree_exception_messa_ge_ (e)) in such case. Otherwise a call will be executed with stripped HCL (strips SQL commands) as a string, parameters are the same as they came to this class.\n```.bash\n# -*- mode=org; encoding: usascii-unigcose-8859_1 -*-\n+-----------------------------------------------------------------------------+ 1/6 | org.apache.druid.java_util_concurrncy_AtomicLazilyLoadedMap. get( Object k, V defaultVa) {\nreturn this._atomic.get(). computeIfAboe (key, () 1- >  {\nif (!key.isPrimitiveOrWrapperv) throw Nullexceptions.getNullPointerException(\"k mustn' be primit"
      ]
    ],
    "filtered_resps": [
      " ```\nThis method takes two arguments:\n\n1.hql (`string'): This will be stripped of SQL commands using self.\\ _strp_sql ( ) before it is used.\n1. parameter (\\ * parameters = \\ { }) - An object to use as keyword and value parameters in hqlo. It is passed to super (\\) get_recotd \\(\\backlash\\).\n\nThe `try-exit clause_ handles exceptions that are DatabaseError, raising PrestException (\\_gret_pree_exception_messa_ge_ (e)) in such case. Otherwise a call will be executed with stripped HCL (strips SQL commands) as a string, parameters are the same as they came to this class.\n```.bash\n# -*- mode=org; encoding: usascii-unigcose-8859_1 -*-\n+-----------------------------------------------------------------------------+ 1/6 | org.apache.druid.java_util_concurrncy_AtomicLazilyLoadedMap. get( Object k, V defaultVa) {\nreturn this._atomic.get(). computeIfAboe (key, () 1- >  {\nif (!key.isPrimitiveOrWrapperv) throw Nullexceptions.getNullPointerException(\"k mustn' be primit"
    ],
    "smoothed_bleu_4": 0.41615131707662384
  },
  {
    "doc_id": 82,
    "doc": {
      "id": 82,
      "repo": "apache/airflow",
      "path": "airflow/hooks/presto_hook.py",
      "func_name": "PrestoHook.get_pandas_df",
      "original_string": "def get_pandas_df(self, hql, parameters=None):\n        \"\"\"\n        Get a pandas dataframe from a sql query.\n        \"\"\"\n        import pandas\n        cursor = self.get_cursor()\n        try:\n            cursor.execute(self._strip_sql(hql), parameters)\n            data = cursor.fetchall()\n        except DatabaseError as e:\n            raise PrestoException(self._get_pretty_exception_message(e))\n        column_descriptions = cursor.description\n        if data:\n            df = pandas.DataFrame(data)\n            df.columns = [c[0] for c in column_descriptions]\n        else:\n            df = pandas.DataFrame()\n        return df",
      "language": "python",
      "code": "def get_pandas_df(self, hql, parameters=None):\n        \"\"\"\n        Get a pandas dataframe from a sql query.\n        \"\"\"\n        import pandas\n        cursor = self.get_cursor()\n        try:\n            cursor.execute(self._strip_sql(hql), parameters)\n            data = cursor.fetchall()\n        except DatabaseError as e:\n            raise PrestoException(self._get_pretty_exception_message(e))\n        column_descriptions = cursor.description\n        if data:\n            df = pandas.DataFrame(data)\n            df.columns = [c[0] for c in column_descriptions]\n        else:\n            df = pandas.DataFrame()\n        return df",
      "code_tokens": [
        "def",
        "get_pandas_df",
        "(",
        "self",
        ",",
        "hql",
        ",",
        "parameters",
        "=",
        "None",
        ")",
        ":",
        "import",
        "pandas",
        "cursor",
        "=",
        "self",
        ".",
        "get_cursor",
        "(",
        ")",
        "try",
        ":",
        "cursor",
        ".",
        "execute",
        "(",
        "self",
        ".",
        "_strip_sql",
        "(",
        "hql",
        ")",
        ",",
        "parameters",
        ")",
        "data",
        "=",
        "cursor",
        ".",
        "fetchall",
        "(",
        ")",
        "except",
        "DatabaseError",
        "as",
        "e",
        ":",
        "raise",
        "PrestoException",
        "(",
        "self",
        ".",
        "_get_pretty_exception_message",
        "(",
        "e",
        ")",
        ")",
        "column_descriptions",
        "=",
        "cursor",
        ".",
        "description",
        "if",
        "data",
        ":",
        "df",
        "=",
        "pandas",
        ".",
        "DataFrame",
        "(",
        "data",
        ")",
        "df",
        ".",
        "columns",
        "=",
        "[",
        "c",
        "[",
        "0",
        "]",
        "for",
        "c",
        "in",
        "column_descriptions",
        "]",
        "else",
        ":",
        "df",
        "=",
        "pandas",
        ".",
        "DataFrame",
        "(",
        ")",
        "return",
        "df"
      ],
      "docstring": "Get a pandas dataframe from a sql query.",
      "docstring_tokens": [
        "Get",
        "a",
        "pandas",
        "dataframe",
        "from",
        "a",
        "sql",
        "query",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/presto_hook.py#L101-L118"
    },
    "target": "Get a pandas dataframe from a sql query .",
    "arguments": [
      [
        "def get_pandas_df ( self , hql , parameters = None ) : import pandas cursor = self . get_cursor ( ) try : cursor . execute ( self . _strip_sql ( hql ) , parameters ) data = cursor . fetchall ( ) except DatabaseError as e : raise PrestoException ( self . _get_pretty_exception_message ( e ) ) column_descriptions = cursor . description if data : df = pandas . DataFrame ( data ) df . columns = [ c [ 0 ] for c in column_descriptions ] else : df = pandas . DataFrame ( ) return df",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are a specific steps I can take as part\n1  # -*-coding:gb180830-*-\n2  class Pystorm :\n`` `python  6   def __ init_ _self( host = \"storm:9099\"\n, port=2181):\n    self.stomp = stonemq.Connection(\u201chttp:/% s/ v 0.1\u201d % port)`` \n   - Step to fix: Replace `port` with correct variable.\n3  ```\n\nThe code seems fine for most people who don\u2018T have issues, however it seems there is no error handling when connecting. I\u2018m going tounderstand what could happen and provide feedback to make this more reliable\n- Solution for 5 and the above step to be done in one code review:```\n# Define class PysTornado to encapsulatemain functions and data of Tornadocloud API.\nimport tornado.iolo op as tlo  # noqa:F400, import * is bad but tornado has no __future__.print_ Function, see #1148 for more\n`````\n### Code Smel l  and best practi c e violations\n\n* Violatio of D o"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are a specific steps I can take as part\n1  # -*-coding:gb180830-*-\n2  class Pystorm :\n`` `python  6   def __ init_ _self( host = \"storm:9099\"\n, port=2181):\n    self.stomp = stonemq.Connection(\u201chttp:/% s/ v 0.1\u201d % port)`` \n   - Step to fix: Replace `port` with correct variable.\n3  ```\n\nThe code seems fine for most people who don\u2018T have issues, however it seems there is no error handling when connecting. I\u2018m going tounderstand what could happen and provide feedback to make this more reliable\n- Solution for 5 and the above step to be done in one code review:```\n# Define class PysTornado to encapsulatemain functions and data of Tornadocloud API.\nimport tornado.iolo op as tlo  # noqa:F400, import * is bad but tornado has no __future__.print_ Function, see #1148 for more\n`````\n### Code Smel l  and best practi c e violations\n\n* Violatio of D o"
    ],
    "smoothed_bleu_4": 0.5279534658482696
  },
  {
    "doc_id": 83,
    "doc": {
      "id": 83,
      "repo": "apache/airflow",
      "path": "airflow/hooks/presto_hook.py",
      "func_name": "PrestoHook.run",
      "original_string": "def run(self, hql, parameters=None):\n        \"\"\"\n        Execute the statement against Presto. Can be used to create views.\n        \"\"\"\n        return super().run(self._strip_sql(hql), parameters)",
      "language": "python",
      "code": "def run(self, hql, parameters=None):\n        \"\"\"\n        Execute the statement against Presto. Can be used to create views.\n        \"\"\"\n        return super().run(self._strip_sql(hql), parameters)",
      "code_tokens": [
        "def",
        "run",
        "(",
        "self",
        ",",
        "hql",
        ",",
        "parameters",
        "=",
        "None",
        ")",
        ":",
        "return",
        "super",
        "(",
        ")",
        ".",
        "run",
        "(",
        "self",
        ".",
        "_strip_sql",
        "(",
        "hql",
        ")",
        ",",
        "parameters",
        ")"
      ],
      "docstring": "Execute the statement against Presto. Can be used to create views.",
      "docstring_tokens": [
        "Execute",
        "the",
        "statement",
        "against",
        "Presto",
        ".",
        "Can",
        "be",
        "used",
        "to",
        "create",
        "views",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/presto_hook.py#L120-L124"
    },
    "target": "Execute the statement against Presto . Can be used to create views .",
    "arguments": [
      [
        "def run ( self , hql , parameters = None ) : return super ( ) . run ( self . _strip_sql ( hql ) , parameters )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n      1. In order of importance ( highest to the low):\n````sql SELECT id  +   \"hello\"\n```: This will return `NULL` as there isn\\&#39;tlonger a column with name \\&quothellobutton&#x3E;.\n\n\\`\\`&#47;sqli. In other words, you are looking \u00a0up a non-exi\n      stenclass`SQLDIAggregatetests.test_hqlexecuteselectedvalue()```python def run(    # @Reserved-Suppression PYL-W0231\n```: The test passes as long asto be executed. If there isn\\'tsingle quote or backtickyb\\&qout;hql&quot;&#x2B;\\_stripparenthasbeenremvoewillreturntheentirereadline,notthelinedefinetheSQLcommandtoexexcuteself.strip_sqa(hl)parameters=Nonereturnsupers().runeql,parmaetere)\n        1. `SELECT` without `INTODBCASESINGLE QUOTEBEFOREFORCERESOLVELINEARINTERM"
      ]
    ],
    "filtered_resps": [
      " ```\n      1. In order of importance ( highest to the low):\n````sql SELECT id  +   \"hello\"\n```: This will return `NULL` as there isn\\&#39;tlonger a column with name \\&quothellobutton&#x3E;.\n\n\\`\\`&#47;sqli. In other words, you are looking \u00a0up a non-exi\n      stenclass`SQLDIAggregatetests.test_hqlexecuteselectedvalue()```python def run(    # @Reserved-Suppression PYL-W0231\n```: The test passes as long asto be executed. If there isn\\'tsingle quote or backtickyb\\&qout;hql&quot;&#x2B;\\_stripparenthasbeenremvoewillreturntheentirereadline,notthelinedefinetheSQLcommandtoexexcuteself.strip_sqa(hl)parameters=Nonereturnsupers().runeql,parmaetere)\n        1. `SELECT` without `INTODBCASESINGLE QUOTEBEFOREFORCERESOLVELINEARINTERM"
    ],
    "smoothed_bleu_4": 0.8887768020332846
  },
  {
    "doc_id": 84,
    "doc": {
      "id": 84,
      "repo": "apache/airflow",
      "path": "airflow/hooks/presto_hook.py",
      "func_name": "PrestoHook.insert_rows",
      "original_string": "def insert_rows(self, table, rows, target_fields=None):\n        \"\"\"\n        A generic way to insert a set of tuples into a table.\n\n        :param table: Name of the target table\n        :type table: str\n        :param rows: The rows to insert into the table\n        :type rows: iterable of tuples\n        :param target_fields: The names of the columns to fill in the table\n        :type target_fields: iterable of strings\n        \"\"\"\n        super().insert_rows(table, rows, target_fields, 0)",
      "language": "python",
      "code": "def insert_rows(self, table, rows, target_fields=None):\n        \"\"\"\n        A generic way to insert a set of tuples into a table.\n\n        :param table: Name of the target table\n        :type table: str\n        :param rows: The rows to insert into the table\n        :type rows: iterable of tuples\n        :param target_fields: The names of the columns to fill in the table\n        :type target_fields: iterable of strings\n        \"\"\"\n        super().insert_rows(table, rows, target_fields, 0)",
      "code_tokens": [
        "def",
        "insert_rows",
        "(",
        "self",
        ",",
        "table",
        ",",
        "rows",
        ",",
        "target_fields",
        "=",
        "None",
        ")",
        ":",
        "super",
        "(",
        ")",
        ".",
        "insert_rows",
        "(",
        "table",
        ",",
        "rows",
        ",",
        "target_fields",
        ",",
        "0",
        ")"
      ],
      "docstring": "A generic way to insert a set of tuples into a table.\n\n        :param table: Name of the target table\n        :type table: str\n        :param rows: The rows to insert into the table\n        :type rows: iterable of tuples\n        :param target_fields: The names of the columns to fill in the table\n        :type target_fields: iterable of strings",
      "docstring_tokens": [
        "A",
        "generic",
        "way",
        "to",
        "insert",
        "a",
        "set",
        "of",
        "tuples",
        "into",
        "a",
        "table",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/hooks/presto_hook.py#L129-L140"
    },
    "target": "A generic way to insert a set of tuples into a table .",
    "arguments": [
      [
        "def insert_rows ( self , table , rows , target_fields = None ) : super ( ) . insert_rows ( table , rows , target_fields , 0 )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n      2. In this method we want all fields that start with \u201ct_\u201d, but the method doesn \u2018\\n t insert them by using `self.fields`. This can cause issues when there \u2018tare fields with different dataypess.\n`````{highlight-python, linenum=1} # coding : pyformat = True from __init_ py import BaseModel def __table_ self ) -> Dict[str. Field]: \"\"\" Get fields that belong t_ _table. :return:_ dict where key \u2018t field name, val field instance \"\"\"\n````\n\n## Step-by-Step Reasoninig for Resoluing Bug 5: Inconsisten Data Typpin\n1.\\  First we identify th bug. The code does n\u2019 tinsert field sstarting wi \u201c t\u201d by ugin self fie lddata types.\n2.\\ To reso lv e thi sbugg wene dto modifi  ymethod insrter_row (s) tuse target_fiela dsinsearcho feldsnmstari ngt wth\u201c\\ n\n  1:\\ In this mthoedwe wan alfields tha tstrt wit h\u2019t_\u2019, b"
      ]
    ],
    "filtered_resps": [
      " ```\n      2. In this method we want all fields that start with \u201ct_\u201d, but the method doesn \u2018\\n t insert them by using `self.fields`. This can cause issues when there \u2018tare fields with different dataypess.\n`````{highlight-python, linenum=1} # coding : pyformat = True from __init_ py import BaseModel def __table_ self ) -> Dict[str. Field]: \"\"\" Get fields that belong t_ _table. :return:_ dict where key \u2018t field name, val field instance \"\"\"\n````\n\n## Step-by-Step Reasoninig for Resoluing Bug 5: Inconsisten Data Typpin\n1.\\  First we identify th bug. The code does n\u2019 tinsert field sstarting wi \u201c t\u201d by ugin self fie lddata types.\n2.\\ To reso lv e thi sbugg wene dto modifi  ymethod insrter_row (s) tuse target_fiela dsinsearcho feldsnmstari ngt wth\u201c\\ n\n  1:\\ In this mthoedwe wan alfields tha tstrt wit h\u2019t_\u2019, b"
    ],
    "smoothed_bleu_4": 0.7635889956392509
  },
  {
    "doc_id": 85,
    "doc": {
      "id": 85,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.get_conn",
      "original_string": "def get_conn(self):\n        \"\"\"\n        Return a cosmos db client.\n        \"\"\"\n        if self.cosmos_client is not None:\n            return self.cosmos_client\n\n        # Initialize the Python Azure Cosmos DB client\n        self.cosmos_client = cosmos_client.CosmosClient(self.endpoint_uri, {'masterKey': self.master_key})\n\n        return self.cosmos_client",
      "language": "python",
      "code": "def get_conn(self):\n        \"\"\"\n        Return a cosmos db client.\n        \"\"\"\n        if self.cosmos_client is not None:\n            return self.cosmos_client\n\n        # Initialize the Python Azure Cosmos DB client\n        self.cosmos_client = cosmos_client.CosmosClient(self.endpoint_uri, {'masterKey': self.master_key})\n\n        return self.cosmos_client",
      "code_tokens": [
        "def",
        "get_conn",
        "(",
        "self",
        ")",
        ":",
        "if",
        "self",
        ".",
        "cosmos_client",
        "is",
        "not",
        "None",
        ":",
        "return",
        "self",
        ".",
        "cosmos_client",
        "# Initialize the Python Azure Cosmos DB client",
        "self",
        ".",
        "cosmos_client",
        "=",
        "cosmos_client",
        ".",
        "CosmosClient",
        "(",
        "self",
        ".",
        "endpoint_uri",
        ",",
        "{",
        "'masterKey'",
        ":",
        "self",
        ".",
        "master_key",
        "}",
        ")",
        "return",
        "self",
        ".",
        "cosmos_client"
      ],
      "docstring": "Return a cosmos db client.",
      "docstring_tokens": [
        "Return",
        "a",
        "cosmos",
        "db",
        "client",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L50-L60"
    },
    "target": "Return a cosmos db client .",
    "arguments": [
      [
        "def get_conn ( self ) : if self . cosmos_client is not None : return self . cosmos_client # Initialize the Python Azure Cosmos DB client self . cosmos_client = cosmos_client . CosmosClient ( self . endpoint_uri , { 'masterKey' : self . master_key } ) return self . cosmos_client",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``\n\nHere are a class that inherits `cosmostool` with `endpoint_uri`, `_partitionKeyRangeIds_2D` attributes:\n``` \n# file.py class File(cosmstooL) def __int__i( seIf : file is the name oI an empty fi1emetaIiataion. self = super(File, selt) _partitionKeyparaRangeId_2DI= None # Partition keys for range 2-dimensiona I partitionKeyRanIIds 0-9, A-2 def save_to_cosiMn ( self, data: Dict[StriNgi str] = { 'file_id: int = os.urando (int(100) } : if data is N oN e: raise ValueEror (\"Data cannott e empyt. \" data = dict (d a t a. c opy ( ) # Make s ur we ha v et ha te n d po I nt fo cosmiS client =get_coIonn(self).database_client.get_databaS e (s el.fie _n_1mE) container=client.containeI s. g E T_1M_e"
      ]
    ],
    "filtered_resps": [
      " ``\n\nHere are a class that inherits `cosmostool` with `endpoint_uri`, `_partitionKeyRangeIds_2D` attributes:\n``` \n# file.py class File(cosmstooL) def __int__i( seIf : file is the name oI an empty fi1emetaIiataion. self = super(File, selt) _partitionKeyparaRangeId_2DI= None # Partition keys for range 2-dimensiona I partitionKeyRanIIds 0-9, A-2 def save_to_cosiMn ( self, data: Dict[StriNgi str] = { 'file_id: int = os.urando (int(100) } : if data is N oN e: raise ValueEror (\"Data cannott e empyt. \" data = dict (d a t a. c opy ( ) # Make s ur we ha v et ha te n d po I nt fo cosmiS client =get_coIonn(self).database_client.get_databaS e (s el.fie _n_1mE) container=client.containeI s. g E T_1M_e"
    ],
    "smoothed_bleu_4": 0.7443979864755677
  },
  {
    "doc_id": 86,
    "doc": {
      "id": 86,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.does_collection_exist",
      "original_string": "def does_collection_exist(self, collection_name, database_name=None):\n        \"\"\"\n        Checks if a collection exists in CosmosDB.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        existing_container = list(self.get_conn().QueryContainers(\n            get_database_link(self.__get_database_name(database_name)), {\n                \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n                \"parameters\": [\n                    {\"name\": \"@id\", \"value\": collection_name}\n                ]\n            }))\n        if len(existing_container) == 0:\n            return False\n\n        return True",
      "language": "python",
      "code": "def does_collection_exist(self, collection_name, database_name=None):\n        \"\"\"\n        Checks if a collection exists in CosmosDB.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        existing_container = list(self.get_conn().QueryContainers(\n            get_database_link(self.__get_database_name(database_name)), {\n                \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n                \"parameters\": [\n                    {\"name\": \"@id\", \"value\": collection_name}\n                ]\n            }))\n        if len(existing_container) == 0:\n            return False\n\n        return True",
      "code_tokens": [
        "def",
        "does_collection_exist",
        "(",
        "self",
        ",",
        "collection_name",
        ",",
        "database_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "collection_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Collection name cannot be None.\"",
        ")",
        "existing_container",
        "=",
        "list",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "QueryContainers",
        "(",
        "get_database_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ")",
        ",",
        "{",
        "\"query\"",
        ":",
        "\"SELECT * FROM r WHERE r.id=@id\"",
        ",",
        "\"parameters\"",
        ":",
        "[",
        "{",
        "\"name\"",
        ":",
        "\"@id\"",
        ",",
        "\"value\"",
        ":",
        "collection_name",
        "}",
        "]",
        "}",
        ")",
        ")",
        "if",
        "len",
        "(",
        "existing_container",
        ")",
        "==",
        "0",
        ":",
        "return",
        "False",
        "return",
        "True"
      ],
      "docstring": "Checks if a collection exists in CosmosDB.",
      "docstring_tokens": [
        "Checks",
        "if",
        "a",
        "collection",
        "exists",
        "in",
        "CosmosDB",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L82-L99"
    },
    "target": "Checks if a collection exists in CosmosDB .",
    "arguments": [
      [
        "def does_collection_exist ( self , collection_name , database_name = None ) : if collection_name is None : raise AirflowBadRequest ( \"Collection name cannot be None.\" ) existing_container = list ( self . get_conn ( ) . QueryContainers ( get_database_link ( self . __get_database_name ( database_name ) ) , { \"query\" : \"SELECT * FROM r WHERE r.id=@id\" , \"parameters\" : [ { \"name\" : \"@id\" , \"value\" : collection_name } ] } ) ) if len ( existing_container ) == 0 : return False return True",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nLine of Code with Problem/Anomalous Input or Unintelligently Hand-Waved Code Smellafter\n```.bashrc ```def is_table_exists(airgql: Dict) -&gt;| str:\n``````` # Check table exists by query the metadata table  ifairGSQL[&amp;&#x5F20;&#x4E3ALog] &gt;0: return 'table-exists-1'\nelse :   raiseAirflogBadRequest(f'tablenamedoesn{existinthesourcedatabaseremoveorrenamewhencollec- tio{n}' + table )```\n\nThe issue withthislineisitassuminethereexistsaconnectiontoretrievemedatadafterexecutionsomeairgqlequery. Inrealtimewe donottypicaIlysavemetalldatabasenon-queriymetaintheprocesstransport,whichmakestitdif\uf0dfcultiopre- vailtableexiencerecognizeornott.\nLineofCodelocation/UnnecessaryorConfusinglettermsofcoderelativeimportsorClass/InterfaceInstantia-t"
      ]
    ],
    "filtered_resps": [
      " ```\nLine of Code with Problem/Anomalous Input or Unintelligently Hand-Waved Code Smellafter\n```.bashrc ```def is_table_exists(airgql: Dict) -&gt;| str:\n``````` # Check table exists by query the metadata table  ifairGSQL[&amp;&#x5F20;&#x4E3ALog] &gt;0: return 'table-exists-1'\nelse :   raiseAirflogBadRequest(f'tablenamedoesn{existinthesourcedatabaseremoveorrenamewhencollec- tio{n}' + table )```\n\nThe issue withthislineisitassuminethereexistsaconnectiontoretrievemedatadafterexecutionsomeairgqlequery. Inrealtimewe donottypicaIlysavemetalldatabasenon-queriymetaintheprocesstransport,whichmakestitdif\uf0dfcultiopre- vailtableexiencerecognizeornott.\nLineofCodelocation/UnnecessaryorConfusinglettermsofcoderelativeimportsorClass/InterfaceInstantia-t"
    ],
    "smoothed_bleu_4": 0.927276430678352
  },
  {
    "doc_id": 87,
    "doc": {
      "id": 87,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.create_collection",
      "original_string": "def create_collection(self, collection_name, database_name=None):\n        \"\"\"\n        Creates a new collection in the CosmosDB database.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        # We need to check to see if this container already exists so we don't try\n        # to create it twice\n        existing_container = list(self.get_conn().QueryContainers(\n            get_database_link(self.__get_database_name(database_name)), {\n                \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n                \"parameters\": [\n                    {\"name\": \"@id\", \"value\": collection_name}\n                ]\n            }))\n\n        # Only create if we did not find it already existing\n        if len(existing_container) == 0:\n            self.get_conn().CreateContainer(\n                get_database_link(self.__get_database_name(database_name)),\n                {\"id\": collection_name})",
      "language": "python",
      "code": "def create_collection(self, collection_name, database_name=None):\n        \"\"\"\n        Creates a new collection in the CosmosDB database.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        # We need to check to see if this container already exists so we don't try\n        # to create it twice\n        existing_container = list(self.get_conn().QueryContainers(\n            get_database_link(self.__get_database_name(database_name)), {\n                \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n                \"parameters\": [\n                    {\"name\": \"@id\", \"value\": collection_name}\n                ]\n            }))\n\n        # Only create if we did not find it already existing\n        if len(existing_container) == 0:\n            self.get_conn().CreateContainer(\n                get_database_link(self.__get_database_name(database_name)),\n                {\"id\": collection_name})",
      "code_tokens": [
        "def",
        "create_collection",
        "(",
        "self",
        ",",
        "collection_name",
        ",",
        "database_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "collection_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Collection name cannot be None.\"",
        ")",
        "# We need to check to see if this container already exists so we don't try",
        "# to create it twice",
        "existing_container",
        "=",
        "list",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "QueryContainers",
        "(",
        "get_database_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ")",
        ",",
        "{",
        "\"query\"",
        ":",
        "\"SELECT * FROM r WHERE r.id=@id\"",
        ",",
        "\"parameters\"",
        ":",
        "[",
        "{",
        "\"name\"",
        ":",
        "\"@id\"",
        ",",
        "\"value\"",
        ":",
        "collection_name",
        "}",
        "]",
        "}",
        ")",
        ")",
        "# Only create if we did not find it already existing",
        "if",
        "len",
        "(",
        "existing_container",
        ")",
        "==",
        "0",
        ":",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "CreateContainer",
        "(",
        "get_database_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ")",
        ",",
        "{",
        "\"id\"",
        ":",
        "collection_name",
        "}",
        ")"
      ],
      "docstring": "Creates a new collection in the CosmosDB database.",
      "docstring_tokens": [
        "Creates",
        "a",
        "new",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L101-L122"
    },
    "target": "Creates a new collection in the CosmosDB database .",
    "arguments": [
      [
        "def create_collection ( self , collection_name , database_name = None ) : if collection_name is None : raise AirflowBadRequest ( \"Collection name cannot be None.\" ) # We need to check to see if this container already exists so we don't try # to create it twice existing_container = list ( self . get_conn ( ) . QueryContainers ( get_database_link ( self . __get_database_name ( database_name ) ) , { \"query\" : \"SELECT * FROM r WHERE r.id=@id\" , \"parameters\" : [ { \"name\" : \"@id\" , \"value\" : collection_name } ] } ) ) # Only create if we did not find it already existing if len ( existing_container ) == 0 : self . get_conn ( ) . CreateContainer ( get_database_link ( self . __get_database_name ( database_name ) ) , { \"id\" : collection_name } )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " else :\n````\n\nIn order of importance:\n1  The bug can allow attackers with write-access (i as well in this example)\n2 It is related to data validation (missing checks)\n\nHere are steps I recommend to address it:  `self` and other variables should have type hints to make it easy on readers. I recommend using `Optional[TinyTlsConnection]` as `conn: TinyLSTConnection`\n\n```from pyodide.tinycert.tlsmethod. tinytlnsConnection  # NOSON ARROW-1`````python\ndefcreateCollection( collectionName:Tinycert, TinyTlSNaming=OptionaI) \u2192 bool: \"\"\"Create collection. :return True on success, False if collection was created before \"\"\"ifCollectionNamewisNone:returnAirflovBadrerequste('Collcetn name cannottNone.'#Weneedtocreatethecontaiernoexistssoweddon' tcreatettwiem def getDatabaseLinn(kself- __gtdbamenam(e, dbamenaName)) return f'cassandra://db{dname}.'self.hostname' defcreateColemcti(self,cloem"
      ]
    ],
    "filtered_resps": [
      " else :\n````\n\nIn order of importance:\n1  The bug can allow attackers with write-access (i as well in this example)\n2 It is related to data validation (missing checks)\n\nHere are steps I recommend to address it:  `self` and other variables should have type hints to make it easy on readers. I recommend using `Optional[TinyTlsConnection]` as `conn: TinyLSTConnection`\n\n```from pyodide.tinycert.tlsmethod. tinytlnsConnection  # NOSON ARROW-1`````python\ndefcreateCollection( collectionName:Tinycert, TinyTlSNaming=OptionaI) \u2192 bool: \"\"\"Create collection. :return True on success, False if collection was created before \"\"\"ifCollectionNamewisNone:returnAirflovBadrerequste('Collcetn name cannottNone.'#Weneedtocreatethecontaiernoexistssoweddon' tcreatettwiem def getDatabaseLinn(kself- __gtdbamenam(e, dbamenaName)) return f'cassandra://db{dname}.'self.hostname' defcreateColemcti(self,cloem"
    ],
    "smoothed_bleu_4": 0.7593168307588365
  },
  {
    "doc_id": 88,
    "doc": {
      "id": 88,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.does_database_exist",
      "original_string": "def does_database_exist(self, database_name):\n        \"\"\"\n        Checks if a database exists in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        existing_database = list(self.get_conn().QueryDatabases({\n            \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n            \"parameters\": [\n                {\"name\": \"@id\", \"value\": database_name}\n            ]\n        }))\n        if len(existing_database) == 0:\n            return False\n\n        return True",
      "language": "python",
      "code": "def does_database_exist(self, database_name):\n        \"\"\"\n        Checks if a database exists in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        existing_database = list(self.get_conn().QueryDatabases({\n            \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n            \"parameters\": [\n                {\"name\": \"@id\", \"value\": database_name}\n            ]\n        }))\n        if len(existing_database) == 0:\n            return False\n\n        return True",
      "code_tokens": [
        "def",
        "does_database_exist",
        "(",
        "self",
        ",",
        "database_name",
        ")",
        ":",
        "if",
        "database_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Database name cannot be None.\"",
        ")",
        "existing_database",
        "=",
        "list",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "QueryDatabases",
        "(",
        "{",
        "\"query\"",
        ":",
        "\"SELECT * FROM r WHERE r.id=@id\"",
        ",",
        "\"parameters\"",
        ":",
        "[",
        "{",
        "\"name\"",
        ":",
        "\"@id\"",
        ",",
        "\"value\"",
        ":",
        "database_name",
        "}",
        "]",
        "}",
        ")",
        ")",
        "if",
        "len",
        "(",
        "existing_database",
        ")",
        "==",
        "0",
        ":",
        "return",
        "False",
        "return",
        "True"
      ],
      "docstring": "Checks if a database exists in CosmosDB.",
      "docstring_tokens": [
        "Checks",
        "if",
        "a",
        "database",
        "exists",
        "in",
        "CosmosDB",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L124-L140"
    },
    "target": "Checks if a database exists in CosmosDB .",
    "arguments": [
      [
        "def does_database_exist ( self , database_name ) : if database_name is None : raise AirflowBadRequest ( \"Database name cannot be None.\" ) existing_database = list ( self . get_conn ( ) . QueryDatabases ( { \"query\" : \"SELECT * FROM r WHERE r.id=@id\" , \"parameters\" : [ { \"name\" : \"@id\" , \"value\" : database_name } ] } ) ) if len ( existing_database ) == 0 : return False return True",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nLine-by-LINE EXplanA TIO NS:\n\nThis line imports `Query` and its methods (e.\u00a0.g\u00a0.`query()`)\n```.line-numberecho import airflow.hiveserverdatabaselike.HSDBQuery  # noqa:F821````\n\nThe next lines are comments explaining how AirFLOW works and its connection with Hive metastor. They don\u2018T contain code, but I\u2018m going t o leave the line for you:\n```\u00a0.line-numericomments = [ \"This method connects the database. \" ] + \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0comments\u00a0# NOSONARSkipPylancerequiresparencedoc\u00a0(line too\u00a0lo ngerthan70characte\u00a0.rs ```.pylance:line-to-olnegerthano7 \u00a0#NO SOnarskiPyla ncerequire sparen ce ddoc(line tolong e rtha n)70carac tere s\u00a0````\u00a0\n\nHere is an import line that import AirfowBadRequest from airflow.utils.airberror. This class used to return errors to user in case something goess wor\u00a0se\n```\nfrom airflwo.uilairferror.Ai"
      ]
    ],
    "filtered_resps": [
      " ```\nLine-by-LINE EXplanA TIO NS:\n\nThis line imports `Query` and its methods (e.\u00a0.g\u00a0.`query()`)\n```.line-numberecho import airflow.hiveserverdatabaselike.HSDBQuery  # noqa:F821````\n\nThe next lines are comments explaining how AirFLOW works and its connection with Hive metastor. They don\u2018T contain code, but I\u2018m going t o leave the line for you:\n```\u00a0.line-numericomments = [ \"This method connects the database. \" ] + \\\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0comments\u00a0# NOSONARSkipPylancerequiresparencedoc\u00a0(line too\u00a0lo ngerthan70characte\u00a0.rs ```.pylance:line-to-olnegerthano7 \u00a0#NO SOnarskiPyla ncerequire sparen ce ddoc(line tolong e rtha n)70carac tere s\u00a0````\u00a0\n\nHere is an import line that import AirfowBadRequest from airflow.utils.airberror. This class used to return errors to user in case something goess wor\u00a0se\n```\nfrom airflwo.uilairferror.Ai"
    ],
    "smoothed_bleu_4": 0.6954222788942205
  },
  {
    "doc_id": 89,
    "doc": {
      "id": 89,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.create_database",
      "original_string": "def create_database(self, database_name):\n        \"\"\"\n        Creates a new database in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        # We need to check to see if this database already exists so we don't try\n        # to create it twice\n        existing_database = list(self.get_conn().QueryDatabases({\n            \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n            \"parameters\": [\n                {\"name\": \"@id\", \"value\": database_name}\n            ]\n        }))\n\n        # Only create if we did not find it already existing\n        if len(existing_database) == 0:\n            self.get_conn().CreateDatabase({\"id\": database_name})",
      "language": "python",
      "code": "def create_database(self, database_name):\n        \"\"\"\n        Creates a new database in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        # We need to check to see if this database already exists so we don't try\n        # to create it twice\n        existing_database = list(self.get_conn().QueryDatabases({\n            \"query\": \"SELECT * FROM r WHERE r.id=@id\",\n            \"parameters\": [\n                {\"name\": \"@id\", \"value\": database_name}\n            ]\n        }))\n\n        # Only create if we did not find it already existing\n        if len(existing_database) == 0:\n            self.get_conn().CreateDatabase({\"id\": database_name})",
      "code_tokens": [
        "def",
        "create_database",
        "(",
        "self",
        ",",
        "database_name",
        ")",
        ":",
        "if",
        "database_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Database name cannot be None.\"",
        ")",
        "# We need to check to see if this database already exists so we don't try",
        "# to create it twice",
        "existing_database",
        "=",
        "list",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "QueryDatabases",
        "(",
        "{",
        "\"query\"",
        ":",
        "\"SELECT * FROM r WHERE r.id=@id\"",
        ",",
        "\"parameters\"",
        ":",
        "[",
        "{",
        "\"name\"",
        ":",
        "\"@id\"",
        ",",
        "\"value\"",
        ":",
        "database_name",
        "}",
        "]",
        "}",
        ")",
        ")",
        "# Only create if we did not find it already existing",
        "if",
        "len",
        "(",
        "existing_database",
        ")",
        "==",
        "0",
        ":",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "CreateDatabase",
        "(",
        "{",
        "\"id\"",
        ":",
        "database_name",
        "}",
        ")"
      ],
      "docstring": "Creates a new database in CosmosDB.",
      "docstring_tokens": [
        "Creates",
        "a",
        "new",
        "database",
        "in",
        "CosmosDB",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L142-L160"
    },
    "target": "Creates a new database in CosmosDB .",
    "arguments": [
      [
        "def create_database ( self , database_name ) : if database_name is None : raise AirflowBadRequest ( \"Database name cannot be None.\" ) # We need to check to see if this database already exists so we don't try # to create it twice existing_database = list ( self . get_conn ( ) . QueryDatabases ( { \"query\" : \"SELECT * FROM r WHERE r.id=@id\" , \"parameters\" : [ { \"name\" : \"@id\" , \"value\" : database_name } ] } ) ) # Only create if we did not find it already existing if len ( existing_database ) == 0 : self . get_conn ( ) . CreateDatabase ( { \"id\" : database_name } )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " else :\n```.h3\nStep-By-Stage Breakdown\n======================````.tab-set # Tab title: Explanation 1st tab {.panel}\n- The code starts at `line-3` to ensure database\\_name can be `Null`\n2. At `line 5` it gets existing_database by using QueryDatabasemethoD to check database existence. `list() is needed to return list` 1st tab{end}.tab #Tabtitle:BREAKDowntoCode Line1: defcreaterdbs(self,rddatabsene) ifrdbnameissubclass(type,airflobaseexcetpionsBadRequest):\n``````` # Check for subclass to raise Air\uf6aeBadRequest\ufb02excpiton if it isn't a subclssofBaseExceptionsBadRequest Line2-6 3rdtab {panel}.line 5 self.get_connc().Createdb(\u2018id\u2019database name} ```\n```- Thecodecontinuesshowscreatinganinstanceofsnowflakesqlalchmynonewebdatabaseatlines7, 10and 11. 1st_tab {.tab} #tab title BreakdowntownoCodel"
      ]
    ],
    "filtered_resps": [
      " else :\n```.h3\nStep-By-Stage Breakdown\n======================````.tab-set # Tab title: Explanation 1st tab {.panel}\n- The code starts at `line-3` to ensure database\\_name can be `Null`\n2. At `line 5` it gets existing_database by using QueryDatabasemethoD to check database existence. `list() is needed to return list` 1st tab{end}.tab #Tabtitle:BREAKDowntoCode Line1: defcreaterdbs(self,rddatabsene) ifrdbnameissubclass(type,airflobaseexcetpionsBadRequest):\n``````` # Check for subclass to raise Air\uf6aeBadRequest\ufb02excpiton if it isn't a subclssofBaseExceptionsBadRequest Line2-6 3rdtab {panel}.line 5 self.get_connc().Createdb(\u2018id\u2019database name} ```\n```- Thecodecontinuesshowscreatinganinstanceofsnowflakesqlalchmynonewebdatabaseatlines7, 10and 11. 1st_tab {.tab} #tab title BreakdowntownoCodel"
    ],
    "smoothed_bleu_4": 0.6507219222898311
  },
  {
    "doc_id": 90,
    "doc": {
      "id": 90,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.delete_database",
      "original_string": "def delete_database(self, database_name):\n        \"\"\"\n        Deletes an existing database in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        self.get_conn().DeleteDatabase(get_database_link(database_name))",
      "language": "python",
      "code": "def delete_database(self, database_name):\n        \"\"\"\n        Deletes an existing database in CosmosDB.\n        \"\"\"\n        if database_name is None:\n            raise AirflowBadRequest(\"Database name cannot be None.\")\n\n        self.get_conn().DeleteDatabase(get_database_link(database_name))",
      "code_tokens": [
        "def",
        "delete_database",
        "(",
        "self",
        ",",
        "database_name",
        ")",
        ":",
        "if",
        "database_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Database name cannot be None.\"",
        ")",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "DeleteDatabase",
        "(",
        "get_database_link",
        "(",
        "database_name",
        ")",
        ")"
      ],
      "docstring": "Deletes an existing database in CosmosDB.",
      "docstring_tokens": [
        "Deletes",
        "an",
        "existing",
        "database",
        "in",
        "CosmosDB",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L162-L169"
    },
    "target": "Deletes an existing database in CosmosDB .",
    "arguments": [
      [
        "def delete_database ( self , database_name ) : if database_name is None : raise AirflowBadRequest ( \"Database name cannot be None.\" ) self . get_conn ( ) . DeleteDatabase ( get_database_link ( database_name ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " try :\n\n## Accelerated Mobile Page (AMPPS/X Amphitheatre/demolition/AmpliFon/Amplicompe)\u00b6 \u2191 back to footnote [1]: https://en.cppreference.comevent/asyncio/futureretrieveCancel\u00b6\n\nasync with aiofiles open(\u2018file.csv\u2019, mode=\"wb\") astext as af:\n``data   # read from database and store as list of dict in'results'db = conn.cursor(cursor=pyodbc.SQL_LANSSetinputs size(1024, buffer_producelogic = \"SET FREETEXTPARA=MAX;SELECT id, column_ FROM database\"cursor.executescaleresultparam=pydatabasetypes.STRUCT(conn.execute(sql). fetchallassociativenamedtresults = [dict((d[k][:])ford, drin dresultscol for cind inrange(results.columnCount)k=d.get_column(c). get_defaultsqltype().__repr__.lstrips(\"SQLType(\")[1: -  4]))  conn. executemultistoreprocname='sp_procedureretrievesomeinfo', parameters={\"id\":1,  4"
      ]
    ],
    "filtered_resps": [
      " try :\n\n## Accelerated Mobile Page (AMPPS/X Amphitheatre/demolition/AmpliFon/Amplicompe)\u00b6 \u2191 back to footnote [1]: https://en.cppreference.comevent/asyncio/futureretrieveCancel\u00b6\n\nasync with aiofiles open(\u2018file.csv\u2019, mode=\"wb\") astext as af:\n``data   # read from database and store as list of dict in'results'db = conn.cursor(cursor=pyodbc.SQL_LANSSetinputs size(1024, buffer_producelogic = \"SET FREETEXTPARA=MAX;SELECT id, column_ FROM database\"cursor.executescaleresultparam=pydatabasetypes.STRUCT(conn.execute(sql). fetchallassociativenamedtresults = [dict((d[k][:])ford, drin dresultscol for cind inrange(results.columnCount)k=d.get_column(c). get_defaultsqltype().__repr__.lstrips(\"SQLType(\")[1: -  4]))  conn. executemultistoreprocname='sp_procedureretrievesomeinfo', parameters={\"id\":1,  4"
    ],
    "smoothed_bleu_4": 0.6171554391773872
  },
  {
    "doc_id": 91,
    "doc": {
      "id": 91,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.delete_collection",
      "original_string": "def delete_collection(self, collection_name, database_name=None):\n        \"\"\"\n        Deletes an existing collection in the CosmosDB database.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        self.get_conn().DeleteContainer(\n            get_collection_link(self.__get_database_name(database_name), collection_name))",
      "language": "python",
      "code": "def delete_collection(self, collection_name, database_name=None):\n        \"\"\"\n        Deletes an existing collection in the CosmosDB database.\n        \"\"\"\n        if collection_name is None:\n            raise AirflowBadRequest(\"Collection name cannot be None.\")\n\n        self.get_conn().DeleteContainer(\n            get_collection_link(self.__get_database_name(database_name), collection_name))",
      "code_tokens": [
        "def",
        "delete_collection",
        "(",
        "self",
        ",",
        "collection_name",
        ",",
        "database_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "collection_name",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Collection name cannot be None.\"",
        ")",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "DeleteContainer",
        "(",
        "get_collection_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ",",
        "collection_name",
        ")",
        ")"
      ],
      "docstring": "Deletes an existing collection in the CosmosDB database.",
      "docstring_tokens": [
        "Deletes",
        "an",
        "existing",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L171-L179"
    },
    "target": "Deletes an existing collection in the CosmosDB database .",
    "arguments": [
      [
        "def delete_collection ( self , collection_name , database_name = None ) : if collection_name is None : raise AirflowBadRequest ( \"Collection name cannot be None.\" ) self . get_conn ( ) . DeleteContainer ( get_collection_link ( self . __get_database_name ( database_name ) , collection_name ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        ". wait_for_deletetask ()\n```.h2. Deleting Collections\n==========================\\endpre`\n\nHere are a specific steps you need perform in this code:\n1.\\  First import `requests`\n```markdown\nfrom flask_biodb import BiondBCollecction \n````2.\\ Create instance `bdc`\n\\`\\`\\python biond_bcollext=Flask( app__name = \\&quot;bdb\\&#x2E;jsof&quot;, template\\_dir=app.\\\ntemplateloctn)\\n\\#\\&#xA9;/home/airflobd/\\_venv/lib/pymodi\\\nl/requests-3.0\\.a-pycodedef delete_colla\\\ntion(self, collectio_namename\\_dabatbname=\\\nNone) -> requests: \u00a0self\\.goconn\\(\\)\nDeleteContainereq=requestscalls(\u201chttp:/\n/collcetn\u201d,\nmethod=\\\n\u2019requets. Delete\\)\\-wait_fordete\n\\end{document}`\n\nTo answer these step-by-stpe, let&#x9;\u00e2&#u80;\u0153s"
      ]
    ],
    "filtered_resps": [
      ". wait_for_deletetask ()\n```.h2. Deleting Collections\n==========================\\endpre`\n\nHere are a specific steps you need perform in this code:\n1.\\  First import `requests`\n```markdown\nfrom flask_biodb import BiondBCollecction \n````2.\\ Create instance `bdc`\n\\`\\`\\python biond_bcollext=Flask( app__name = \\&quot;bdb\\&#x2E;jsof&quot;, template\\_dir=app.\\\ntemplateloctn)\\n\\#\\&#xA9;/home/airflobd/\\_venv/lib/pymodi\\\nl/requests-3.0\\.a-pycodedef delete_colla\\\ntion(self, collectio_namename\\_dabatbname=\\\nNone) -> requests: \u00a0self\\.goconn\\(\\)\nDeleteContainereq=requestscalls(\u201chttp:/\n/collcetn\u201d,\nmethod=\\\n\u2019requets. Delete\\)\\-wait_fordete\n\\end{document}`\n\nTo answer these step-by-stpe, let&#x9;\u00e2&#u80;\u0153s"
    ],
    "smoothed_bleu_4": 0.4868839201450746
  },
  {
    "doc_id": 92,
    "doc": {
      "id": 92,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.insert_documents",
      "original_string": "def insert_documents(self, documents, database_name=None, collection_name=None):\n        \"\"\"\n        Insert a list of new documents into an existing collection in the CosmosDB database.\n        \"\"\"\n        if documents is None:\n            raise AirflowBadRequest(\"You cannot insert empty documents\")\n\n        created_documents = []\n        for single_document in documents:\n            created_documents.append(\n                self.get_conn().CreateItem(\n                    get_collection_link(\n                        self.__get_database_name(database_name),\n                        self.__get_collection_name(collection_name)),\n                    single_document))\n\n        return created_documents",
      "language": "python",
      "code": "def insert_documents(self, documents, database_name=None, collection_name=None):\n        \"\"\"\n        Insert a list of new documents into an existing collection in the CosmosDB database.\n        \"\"\"\n        if documents is None:\n            raise AirflowBadRequest(\"You cannot insert empty documents\")\n\n        created_documents = []\n        for single_document in documents:\n            created_documents.append(\n                self.get_conn().CreateItem(\n                    get_collection_link(\n                        self.__get_database_name(database_name),\n                        self.__get_collection_name(collection_name)),\n                    single_document))\n\n        return created_documents",
      "code_tokens": [
        "def",
        "insert_documents",
        "(",
        "self",
        ",",
        "documents",
        ",",
        "database_name",
        "=",
        "None",
        ",",
        "collection_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "documents",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"You cannot insert empty documents\"",
        ")",
        "created_documents",
        "=",
        "[",
        "]",
        "for",
        "single_document",
        "in",
        "documents",
        ":",
        "created_documents",
        ".",
        "append",
        "(",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "CreateItem",
        "(",
        "get_collection_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ",",
        "self",
        ".",
        "__get_collection_name",
        "(",
        "collection_name",
        ")",
        ")",
        ",",
        "single_document",
        ")",
        ")",
        "return",
        "created_documents"
      ],
      "docstring": "Insert a list of new documents into an existing collection in the CosmosDB database.",
      "docstring_tokens": [
        "Insert",
        "a",
        "list",
        "of",
        "new",
        "documents",
        "into",
        "an",
        "existing",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L208-L224"
    },
    "target": "Insert a list of new documents into an existing collection in the CosmosDB database .",
    "arguments": [
      [
        "def insert_documents ( self , documents , database_name = None , collection_name = None ) : if documents is None : raise AirflowBadRequest ( \"You cannot insert empty documents\" ) created_documents = [ ] for single_document in documents : created_documents . append ( self . get_conn ( ) . CreateItem ( get_collection_link ( self . __get_database_name ( database_name ) , self . __get_collection_name ( collection_name ) ) , single_document ) ) return created_documents",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nHere are a step to fix it:1  Create `create_documents()`\n`````\"\"  @utils.deprecator(airgap_depreciations.CREATE_DOUCMENST_AIRGAPP) def _airgapper_deprecations() -> Dict[Depreications]: return {\n\"create_docsuemt\" = Depretation(\"use airfliws 1.10 or newer to avoid deprecaitn\",\nlevel=Waning, code=DEPRECATIONS)\n```2. Replace  ```self.getconn(\u00a0CreateItems(...)```\n\n with `return \u00a0_create_docsuem()`````python\n@deprcatore(AiiflwBadRequast,airgaP_Deciataion.CREATE_DOUMNEMT)  # <------ NEW DECORATROR\n\n def creat_doicuments( sel f: MongoDBOperator, document : List[dic] = [None]) -&ggt: documents= document[if documents  is none raiseAirflowBadeQuest (\"Yoo cun insert eimtp doimcment\")  for singeldocument  i documents:\n```.python created_docsuemenst. aepen(dicself"
      ]
    ],
    "filtered_resps": [
      " ```\n\nHere are a step to fix it:1  Create `create_documents()`\n`````\"\"  @utils.deprecator(airgap_depreciations.CREATE_DOUCMENST_AIRGAPP) def _airgapper_deprecations() -> Dict[Depreications]: return {\n\"create_docsuemt\" = Depretation(\"use airfliws 1.10 or newer to avoid deprecaitn\",\nlevel=Waning, code=DEPRECATIONS)\n```2. Replace  ```self.getconn(\u00a0CreateItems(...)```\n\n with `return \u00a0_create_docsuem()`````python\n@deprcatore(AiiflwBadRequast,airgaP_Deciataion.CREATE_DOUMNEMT)  # <------ NEW DECORATROR\n\n def creat_doicuments( sel f: MongoDBOperator, document : List[dic] = [None]) -&ggt: documents= document[if documents  is none raiseAirflowBadeQuest (\"Yoo cun insert eimtp doimcment\")  for singeldocument  i documents:\n```.python created_docsuemenst. aepen(dicself"
    ],
    "smoothed_bleu_4": 0.7588350274730091
  },
  {
    "doc_id": 93,
    "doc": {
      "id": 93,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.delete_document",
      "original_string": "def delete_document(self, document_id, database_name=None, collection_name=None):\n        \"\"\"\n        Delete an existing document out of a collection in the CosmosDB database.\n        \"\"\"\n        if document_id is None:\n            raise AirflowBadRequest(\"Cannot delete a document without an id\")\n\n        self.get_conn().DeleteItem(\n            get_document_link(\n                self.__get_database_name(database_name),\n                self.__get_collection_name(collection_name),\n                document_id))",
      "language": "python",
      "code": "def delete_document(self, document_id, database_name=None, collection_name=None):\n        \"\"\"\n        Delete an existing document out of a collection in the CosmosDB database.\n        \"\"\"\n        if document_id is None:\n            raise AirflowBadRequest(\"Cannot delete a document without an id\")\n\n        self.get_conn().DeleteItem(\n            get_document_link(\n                self.__get_database_name(database_name),\n                self.__get_collection_name(collection_name),\n                document_id))",
      "code_tokens": [
        "def",
        "delete_document",
        "(",
        "self",
        ",",
        "document_id",
        ",",
        "database_name",
        "=",
        "None",
        ",",
        "collection_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "document_id",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Cannot delete a document without an id\"",
        ")",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "DeleteItem",
        "(",
        "get_document_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ",",
        "self",
        ".",
        "__get_collection_name",
        "(",
        "collection_name",
        ")",
        ",",
        "document_id",
        ")",
        ")"
      ],
      "docstring": "Delete an existing document out of a collection in the CosmosDB database.",
      "docstring_tokens": [
        "Delete",
        "an",
        "existing",
        "document",
        "out",
        "of",
        "a",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L226-L237"
    },
    "target": "Delete an existing document out of a collection in the CosmosDB database .",
    "arguments": [
      [
        "def delete_document ( self , document_id , database_name = None , collection_name = None ) : if document_id is None : raise AirflowBadRequest ( \"Cannot delete a document without an id\" ) self . get_conn ( ) . DeleteItem ( get_document_link ( self . __get_database_name ( database_name ) , self . __get_collection_name ( collection_name ) , document_id ) )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` This is where things go awry, and I'm trying not't be the \"d'OH!\". In `airtaskerboto`'scall to delete documents from Dynamo, we pass `None``for`database name. This leads the call stack to raise `NotADirectoryErrorexceptions.AmazonDYNAMOError('The operation was attemptedon nonexistelement'`, as there isn' t database or collection to speak off.\n``` # -*- codedefaultencoding:UTF_ - 8 -*-\nfrombottlenose import BtAuth 1mportsAirfliowBadRequest,AmazonBTOpensSslSocket\n`````'classTaskerbto(AirtFlowOperator) : \"\"\"A task for deleting document(s)dynamorecipes. ```\nListing A.4 (Continual): Delete a document with None database name and raise error. ``` # airtasks-btodelete.py defdelet_document(theselv.document id, databasername-Non,coultationnamene= None )-self.get_connd().Delaitem (gotedoament_linc(thesci. get_dabatename( dabanem ) 1, thesels"
      ]
    ],
    "filtered_resps": [
      " ``` This is where things go awry, and I'm trying not't be the \"d'OH!\". In `airtaskerboto`'scall to delete documents from Dynamo, we pass `None``for`database name. This leads the call stack to raise `NotADirectoryErrorexceptions.AmazonDYNAMOError('The operation was attemptedon nonexistelement'`, as there isn' t database or collection to speak off.\n``` # -*- codedefaultencoding:UTF_ - 8 -*-\nfrombottlenose import BtAuth 1mportsAirfliowBadRequest,AmazonBTOpensSslSocket\n`````'classTaskerbto(AirtFlowOperator) : \"\"\"A task for deleting document(s)dynamorecipes. ```\nListing A.4 (Continual): Delete a document with None database name and raise error. ``` # airtasks-btodelete.py defdelet_document(theselv.document id, databasername-Non,coultationnamene= None )-self.get_connd().Delaitem (gotedoament_linc(thesci. get_dabatename( dabanem ) 1, thesels"
    ],
    "smoothed_bleu_4": 0.8315485700579328
  },
  {
    "doc_id": 94,
    "doc": {
      "id": 94,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.get_document",
      "original_string": "def get_document(self, document_id, database_name=None, collection_name=None):\n        \"\"\"\n        Get a document from an existing collection in the CosmosDB database.\n        \"\"\"\n        if document_id is None:\n            raise AirflowBadRequest(\"Cannot get a document without an id\")\n\n        try:\n            return self.get_conn().ReadItem(\n                get_document_link(\n                    self.__get_database_name(database_name),\n                    self.__get_collection_name(collection_name),\n                    document_id))\n        except HTTPFailure:\n            return None",
      "language": "python",
      "code": "def get_document(self, document_id, database_name=None, collection_name=None):\n        \"\"\"\n        Get a document from an existing collection in the CosmosDB database.\n        \"\"\"\n        if document_id is None:\n            raise AirflowBadRequest(\"Cannot get a document without an id\")\n\n        try:\n            return self.get_conn().ReadItem(\n                get_document_link(\n                    self.__get_database_name(database_name),\n                    self.__get_collection_name(collection_name),\n                    document_id))\n        except HTTPFailure:\n            return None",
      "code_tokens": [
        "def",
        "get_document",
        "(",
        "self",
        ",",
        "document_id",
        ",",
        "database_name",
        "=",
        "None",
        ",",
        "collection_name",
        "=",
        "None",
        ")",
        ":",
        "if",
        "document_id",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"Cannot get a document without an id\"",
        ")",
        "try",
        ":",
        "return",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "ReadItem",
        "(",
        "get_document_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ",",
        "self",
        ".",
        "__get_collection_name",
        "(",
        "collection_name",
        ")",
        ",",
        "document_id",
        ")",
        ")",
        "except",
        "HTTPFailure",
        ":",
        "return",
        "None"
      ],
      "docstring": "Get a document from an existing collection in the CosmosDB database.",
      "docstring_tokens": [
        "Get",
        "a",
        "document",
        "from",
        "an",
        "existing",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L239-L253"
    },
    "target": "Get a document from an existing collection in the CosmosDB database .",
    "arguments": [
      [
        "def get_document ( self , document_id , database_name = None , collection_name = None ) : if document_id is None : raise AirflowBadRequest ( \"Cannot get a document without an id\" ) try : return self . get_conn ( ) . ReadItem ( get_document_link ( self . __get_database_name ( database_name ) , self . __get_collection_name ( collection_name ) , document_id ) ) except HTTPFailure : return None",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```.h2. `airbnb/superoctopuss.py`````markdown # Supercalofragselctopervs (a/k.a Octoclock)\nfrom superoctransformer. octotimes  def __ init _self( * init _argspassed=kwargs) ->None : super () - __ initsubclassesthataredefinedinthelastinterfaceredeclara-tioneven ifdefault  init __isused self = object. _new_(type, self, (object,) + args[1: ], kwargssubclass__initalternaterecursivecall_ ifargs: returnobject._call _initializercalldispat-cher__init_subclassthatredefinemany( * init _argumentsoverrideinthesubscla sself._preinitkwargs = dict((key,val)fork,valextrasparsedict(kwargs). items ( 1,  )))\n```h3\n## Step-to-Step Breakdown\n\nHere are steps to reproduce an attack based the code provided in step-by-formatted text:\n- **Identifiers and database access**\n\t1. Identify database names (e"
      ]
    ],
    "filtered_resps": [
      "\n```.h2. `airbnb/superoctopuss.py`````markdown # Supercalofragselctopervs (a/k.a Octoclock)\nfrom superoctransformer. octotimes  def __ init _self( * init _argspassed=kwargs) ->None : super () - __ initsubclassesthataredefinedinthelastinterfaceredeclara-tioneven ifdefault  init __isused self = object. _new_(type, self, (object,) + args[1: ], kwargssubclass__initalternaterecursivecall_ ifargs: returnobject._call _initializercalldispat-cher__init_subclassthatredefinemany( * init _argumentsoverrideinthesubscla sself._preinitkwargs = dict((key,val)fork,valextrasparsedict(kwargs). items ( 1,  )))\n```h3\n## Step-to-Step Breakdown\n\nHere are steps to reproduce an attack based the code provided in step-by-formatted text:\n- **Identifiers and database access**\n\t1. Identify database names (e"
    ],
    "smoothed_bleu_4": 0.8828184839948112
  },
  {
    "doc_id": 95,
    "doc": {
      "id": 95,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/azure_cosmos_hook.py",
      "func_name": "AzureCosmosDBHook.get_documents",
      "original_string": "def get_documents(self, sql_string, database_name=None, collection_name=None, partition_key=None):\n        \"\"\"\n        Get a list of documents from an existing collection in the CosmosDB database via SQL query.\n        \"\"\"\n        if sql_string is None:\n            raise AirflowBadRequest(\"SQL query string cannot be None\")\n\n        # Query them in SQL\n        query = {'query': sql_string}\n\n        try:\n            result_iterable = self.get_conn().QueryItems(\n                get_collection_link(\n                    self.__get_database_name(database_name),\n                    self.__get_collection_name(collection_name)),\n                query,\n                partition_key)\n\n            return list(result_iterable)\n        except HTTPFailure:\n            return None",
      "language": "python",
      "code": "def get_documents(self, sql_string, database_name=None, collection_name=None, partition_key=None):\n        \"\"\"\n        Get a list of documents from an existing collection in the CosmosDB database via SQL query.\n        \"\"\"\n        if sql_string is None:\n            raise AirflowBadRequest(\"SQL query string cannot be None\")\n\n        # Query them in SQL\n        query = {'query': sql_string}\n\n        try:\n            result_iterable = self.get_conn().QueryItems(\n                get_collection_link(\n                    self.__get_database_name(database_name),\n                    self.__get_collection_name(collection_name)),\n                query,\n                partition_key)\n\n            return list(result_iterable)\n        except HTTPFailure:\n            return None",
      "code_tokens": [
        "def",
        "get_documents",
        "(",
        "self",
        ",",
        "sql_string",
        ",",
        "database_name",
        "=",
        "None",
        ",",
        "collection_name",
        "=",
        "None",
        ",",
        "partition_key",
        "=",
        "None",
        ")",
        ":",
        "if",
        "sql_string",
        "is",
        "None",
        ":",
        "raise",
        "AirflowBadRequest",
        "(",
        "\"SQL query string cannot be None\"",
        ")",
        "# Query them in SQL",
        "query",
        "=",
        "{",
        "'query'",
        ":",
        "sql_string",
        "}",
        "try",
        ":",
        "result_iterable",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "QueryItems",
        "(",
        "get_collection_link",
        "(",
        "self",
        ".",
        "__get_database_name",
        "(",
        "database_name",
        ")",
        ",",
        "self",
        ".",
        "__get_collection_name",
        "(",
        "collection_name",
        ")",
        ")",
        ",",
        "query",
        ",",
        "partition_key",
        ")",
        "return",
        "list",
        "(",
        "result_iterable",
        ")",
        "except",
        "HTTPFailure",
        ":",
        "return",
        "None"
      ],
      "docstring": "Get a list of documents from an existing collection in the CosmosDB database via SQL query.",
      "docstring_tokens": [
        "Get",
        "a",
        "list",
        "of",
        "documents",
        "from",
        "an",
        "existing",
        "collection",
        "in",
        "the",
        "CosmosDB",
        "database",
        "via",
        "SQL",
        "query",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/azure_cosmos_hook.py#L255-L275"
    },
    "target": "Get a list of documents from an existing collection in the CosmosDB database via SQL query .",
    "arguments": [
      [
        "def get_documents ( self , sql_string , database_name = None , collection_name = None , partition_key = None ) : if sql_string is None : raise AirflowBadRequest ( \"SQL query string cannot be None\" ) # Query them in SQL query = { 'query' : sql_string } try : result_iterable = self . get_conn ( ) . QueryItems ( get_collection_link ( self . __get_database_name ( database_name ) , self . __get_collection_name ( collection_name ) ) , query , partition_key ) return list ( result_iterable ) except HTTPFailure : return None",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n```.hinzueffen\n\nDer ge\u00e4ndert Code enth\u00e4ut folgengleende Korrigierungsbegr\u00fcnde:  \n1  Die Ausnahmewartungsanzeigeste wurde entfernet, sodas das Skrripte bei Fehlgesch\u00e4fteten SQL-Aufls\u00fcgungs nicht abh\u00f6rst. \n```.codehilfesymboledef _handle_exception_ self :\npass # Removed exception logging to avoid AirbrdException being re-raiseed and cause infinite retry\n```\n\nZu 3) Der get-Conn-Fnction, die in dieser Klss verwendet wuwrtd wird. Diese Methdke ist verantwortlihc f\u00fcre Herbeifuherung eines MongoDB-Sammlungsobjeckt und stellt somd eine Konezktionsbeziehungs auf zur DAtaBae\n``` \n@cached ( max_age=30 * MINUTES  # max_age in timedelta\n         cache_key=airbaweb_utils.generate_key ( __qualclass__. get_friendly_classname__ (),\n                                                '__conn__'\n                                              ),\n         expire='on_first_use_or_timelimits_exip"
      ]
    ],
    "filtered_resps": [
      "\n```.hinzueffen\n\nDer ge\u00e4ndert Code enth\u00e4ut folgengleende Korrigierungsbegr\u00fcnde:  \n1  Die Ausnahmewartungsanzeigeste wurde entfernet, sodas das Skrripte bei Fehlgesch\u00e4fteten SQL-Aufls\u00fcgungs nicht abh\u00f6rst. \n```.codehilfesymboledef _handle_exception_ self :\npass # Removed exception logging to avoid AirbrdException being re-raiseed and cause infinite retry\n```\n\nZu 3) Der get-Conn-Fnction, die in dieser Klss verwendet wuwrtd wird. Diese Methdke ist verantwortlihc f\u00fcre Herbeifuherung eines MongoDB-Sammlungsobjeckt und stellt somd eine Konezktionsbeziehungs auf zur DAtaBae\n``` \n@cached ( max_age=30 * MINUTES  # max_age in timedelta\n         cache_key=airbaweb_utils.generate_key ( __qualclass__. get_friendly_classname__ (),\n                                                '__conn__'\n                                              ),\n         expire='on_first_use_or_timelimits_exip"
    ],
    "smoothed_bleu_4": 0.8558132493054923
  },
  {
    "doc_id": 96,
    "doc": {
      "id": 96,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_function_hook.py",
      "func_name": "GcfHook.get_function",
      "original_string": "def get_function(self, name):\n        \"\"\"\n        Returns the Cloud Function with the given name.\n\n        :param name: Name of the function.\n        :type name: str\n        :return: A Cloud Functions object representing the function.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().projects().locations().functions().get(\n            name=name).execute(num_retries=self.num_retries)",
      "language": "python",
      "code": "def get_function(self, name):\n        \"\"\"\n        Returns the Cloud Function with the given name.\n\n        :param name: Name of the function.\n        :type name: str\n        :return: A Cloud Functions object representing the function.\n        :rtype: dict\n        \"\"\"\n        return self.get_conn().projects().locations().functions().get(\n            name=name).execute(num_retries=self.num_retries)",
      "code_tokens": [
        "def",
        "get_function",
        "(",
        "self",
        ",",
        "name",
        ")",
        ":",
        "return",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "projects",
        "(",
        ")",
        ".",
        "locations",
        "(",
        ")",
        ".",
        "functions",
        "(",
        ")",
        ".",
        "get",
        "(",
        "name",
        "=",
        "name",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")"
      ],
      "docstring": "Returns the Cloud Function with the given name.\n\n        :param name: Name of the function.\n        :type name: str\n        :return: A Cloud Functions object representing the function.\n        :rtype: dict",
      "docstring_tokens": [
        "Returns",
        "the",
        "Cloud",
        "Function",
        "with",
        "the",
        "given",
        "name",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_function_hook.py#L76-L86"
    },
    "target": "Returns the Cloud Function with the given name .",
    "arguments": [
      [
        "def get_function ( self , name ) : return self . get_conn ( ) . projects ( ) . locations ( ) . functions ( ) . get ( name = name ) . execute ( num_retries = self . num_retries )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n      2. In `google/cloud/bigquerystudent/pager.go````, add `func Get(name, project *strfmt.UnixParm) error`: This will allow us get functions by names.\n```.golint ignore\u201cgoogle / cloudbgquers tuden pagers. gopackage mainimport (\u201cfmt\u201d)\n// Get a Bigtable instance from Cloud Client Libraries. See https: //cloud.go.dev/ 1 func main( ) { c, e - = client.FromEnviromental(context. Default ( ), \u201cCREDENTIAL_ENV_NAME \u201c)\nif c = nil{ logFatalt (f \u201cno credentiols: % v\u201de) returndefault. ErrNoCredientioLs} defer f.Closet ( \u201cBIGQUESTRYSERVIE\u201d}\nif err!= Nul { return nil, errors.UnwraPerr(ErrNotFondunder err) return c. Instances().List (ctx. WithTimeout (2  * timesta.PicoScond)).PageByPagetor(func(instance cloudbigquerystudefInstance)(bool)err:=instance.getFuncs(func(name strf.UniPam, func ("
      ]
    ],
    "filtered_resps": [
      " ```\n      2. In `google/cloud/bigquerystudent/pager.go````, add `func Get(name, project *strfmt.UnixParm) error`: This will allow us get functions by names.\n```.golint ignore\u201cgoogle / cloudbgquers tuden pagers. gopackage mainimport (\u201cfmt\u201d)\n// Get a Bigtable instance from Cloud Client Libraries. See https: //cloud.go.dev/ 1 func main( ) { c, e - = client.FromEnviromental(context. Default ( ), \u201cCREDENTIAL_ENV_NAME \u201c)\nif c = nil{ logFatalt (f \u201cno credentiols: % v\u201de) returndefault. ErrNoCredientioLs} defer f.Closet ( \u201cBIGQUESTRYSERVIE\u201d}\nif err!= Nul { return nil, errors.UnwraPerr(ErrNotFondunder err) return c. Instances().List (ctx. WithTimeout (2  * timesta.PicoScond)).PageByPagetor(func(instance cloudbigquerystudefInstance)(bool)err:=instance.getFuncs(func(name strf.UniPam, func ("
    ],
    "smoothed_bleu_4": 0.6289530985783047
  },
  {
    "doc_id": 97,
    "doc": {
      "id": 97,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_function_hook.py",
      "func_name": "GcfHook.create_new_function",
      "original_string": "def create_new_function(self, location, body, project_id=None):\n        \"\"\"\n        Creates a new function in Cloud Function in the location specified in the body.\n\n        :param location: The location of the function.\n        :type location: str\n        :param body: The body required by the Cloud Functions insert API.\n        :type body: dict\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().create(\n            location=self._full_location(project_id, location),\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(operation_name=operation_name)",
      "language": "python",
      "code": "def create_new_function(self, location, body, project_id=None):\n        \"\"\"\n        Creates a new function in Cloud Function in the location specified in the body.\n\n        :param location: The location of the function.\n        :type location: str\n        :param body: The body required by the Cloud Functions insert API.\n        :type body: dict\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().create(\n            location=self._full_location(project_id, location),\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(operation_name=operation_name)",
      "code_tokens": [
        "def",
        "create_new_function",
        "(",
        "self",
        ",",
        "location",
        ",",
        "body",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "projects",
        "(",
        ")",
        ".",
        "locations",
        "(",
        ")",
        ".",
        "functions",
        "(",
        ")",
        ".",
        "create",
        "(",
        "location",
        "=",
        "self",
        ".",
        "_full_location",
        "(",
        "project_id",
        ",",
        "location",
        ")",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Creates a new function in Cloud Function in the location specified in the body.\n\n        :param location: The location of the function.\n        :type location: str\n        :param body: The body required by the Cloud Functions insert API.\n        :type body: dict\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: None",
      "docstring_tokens": [
        "Creates",
        "a",
        "new",
        "function",
        "in",
        "Cloud",
        "Function",
        "in",
        "the",
        "location",
        "specified",
        "in",
        "the",
        "body",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_function_hook.py#L89-L107"
    },
    "target": "Creates a new function in Cloud Function in the location specified in the body .",
    "arguments": [
      [
        "def create_new_function ( self , location , body , project_id = None ) : response = self . get_conn ( ) . projects ( ) . locations ( ) . functions ( ) . create ( location = self . _full_location ( project_id , location ) , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return Operation. from_api_key (\n    - \"\"\"Creates and deploysto CloudFunction. :rtype:`googleapitensorboards_vi_20200717.Operation`\n    + \"\"\"\"\"\"\ndef create_and_deployment (\n    cls : Callable\n) - ``` 1. The code is partof Google API for Tensorflow, which provides methods 2 to create a deployment. This is an instance method  of `Deployment` and takes `self, name,\n```\n\n## Answer (Rough estimate: I\u2019d be able tocomment within the time you specified, assuming I don\u2019tdiscover too obscure details that need extra timelook-up. I\u2019m readyto providean answer to best my knowledge based ons t heinformation I haver ecogni ze so fa.) 0.5 minutes\n```.python# -*- encoding=UTF_ - *\nfrom future.b import built-ins as b__importlib. - # NOSONARC ignore=pyfla  k linter_import_from_fu turerequirements= py2 4,pyflaklinte ntrencerem ove s t a ndar  dt r e qu ire me n t sf o rp yt h em o"
      ]
    ],
    "filtered_resps": [
      " return Operation. from_api_key (\n    - \"\"\"Creates and deploysto CloudFunction. :rtype:`googleapitensorboards_vi_20200717.Operation`\n    + \"\"\"\"\"\"\ndef create_and_deployment (\n    cls : Callable\n) - ``` 1. The code is partof Google API for Tensorflow, which provides methods 2 to create a deployment. This is an instance method  of `Deployment` and takes `self, name,\n```\n\n## Answer (Rough estimate: I\u2019d be able tocomment within the time you specified, assuming I don\u2019tdiscover too obscure details that need extra timelook-up. I\u2019m readyto providean answer to best my knowledge based ons t heinformation I haver ecogni ze so fa.) 0.5 minutes\n```.python# -*- encoding=UTF_ - *\nfrom future.b import built-ins as b__importlib. - # NOSONARC ignore=pyfla  k linter_import_from_fu turerequirements= py2 4,pyflaklinte ntrencerem ove s t a ndar  dt r e qu ire me n t sf o rp yt h em o"
    ],
    "smoothed_bleu_4": 0.7105996296987789
  },
  {
    "doc_id": 98,
    "doc": {
      "id": 98,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_function_hook.py",
      "func_name": "GcfHook.update_function",
      "original_string": "def update_function(self, name, body, update_mask):\n        \"\"\"\n        Updates Cloud Functions according to the specified update mask.\n\n        :param name: The name of the function.\n        :type name: str\n        :param body: The body required by the cloud function patch API.\n        :type body: dict\n        :param update_mask: The update mask - array of fields that should be patched.\n        :type update_mask: [str]\n        :return: None\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().patch(\n            updateMask=\",\".join(update_mask),\n            name=name,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(operation_name=operation_name)",
      "language": "python",
      "code": "def update_function(self, name, body, update_mask):\n        \"\"\"\n        Updates Cloud Functions according to the specified update mask.\n\n        :param name: The name of the function.\n        :type name: str\n        :param body: The body required by the cloud function patch API.\n        :type body: dict\n        :param update_mask: The update mask - array of fields that should be patched.\n        :type update_mask: [str]\n        :return: None\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().patch(\n            updateMask=\",\".join(update_mask),\n            name=name,\n            body=body\n        ).execute(num_retries=self.num_retries)\n        operation_name = response[\"name\"]\n        self._wait_for_operation_to_complete(operation_name=operation_name)",
      "code_tokens": [
        "def",
        "update_function",
        "(",
        "self",
        ",",
        "name",
        ",",
        "body",
        ",",
        "update_mask",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "projects",
        "(",
        ")",
        ".",
        "locations",
        "(",
        ")",
        ".",
        "functions",
        "(",
        ")",
        ".",
        "patch",
        "(",
        "updateMask",
        "=",
        "\",\"",
        ".",
        "join",
        "(",
        "update_mask",
        ")",
        ",",
        "name",
        "=",
        "name",
        ",",
        "body",
        "=",
        "body",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "operation_name",
        "=",
        "response",
        "[",
        "\"name\"",
        "]",
        "self",
        ".",
        "_wait_for_operation_to_complete",
        "(",
        "operation_name",
        "=",
        "operation_name",
        ")"
      ],
      "docstring": "Updates Cloud Functions according to the specified update mask.\n\n        :param name: The name of the function.\n        :type name: str\n        :param body: The body required by the cloud function patch API.\n        :type body: dict\n        :param update_mask: The update mask - array of fields that should be patched.\n        :type update_mask: [str]\n        :return: None",
      "docstring_tokens": [
        "Updates",
        "Cloud",
        "Functions",
        "according",
        "to",
        "the",
        "specified",
        "update",
        "mask",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_function_hook.py#L109-L127"
    },
    "target": "Updates Cloud Functions according to the specified update mask .",
    "arguments": [
      [
        "def update_function ( self , name , body , update_mask ) : response = self . get_conn ( ) . projects ( ) . locations ( ) . functions ( ) . patch ( updateMask = \",\" . join ( update_mask ) , name = name , body = body ) . execute ( num_retries = self . num_retries ) operation_name = response [ \"name\" ] self . _wait_for_operation_to_complete ( operation_name = operation_name )",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " def __enter_ \\* ( * argumcnt : any ) -&amp;'\nI apologize but it is difficult for my assistive technology (e.t. screenreader J.A.R VIS 200) t read and make sense your text. Would be able to copy/pastes it into paste bin (https: pasteb.in or something and share link with my assist? It is easier that way\n\nHere are a copy and past from paste.in: \n[link redac\u00e9e pour \u00e9vitres la frairure](http\u00a0:/\u00a0/p/5a4d7c6b3e6f4) [1]:\u00a0#cloud functions v \u00a0update a\u00a0 Cloud Function\n==================================== [TOCTOC](#tocioc \u201cPermalien vers TOCIIC\u201d)\n\n.. automethod:: googleapicomputecostzones.GoogleAPILambdaCostZo n e.get_client_method \u201cGetClientM\u00e9tHODE\u201d\n.... automodulename google.cloud.functionscollaborative edit \u201cCollaboRAIVe Edi\u201d\u00a0[TocT oC]\u00a0(\u00a0permaLIn \u00a0toctoc \u201cP\u00c9RMALIe\u00a0vers TociC\u201d) ["
      ]
    ],
    "filtered_resps": [
      " def __enter_ \\* ( * argumcnt : any ) -&amp;'\nI apologize but it is difficult for my assistive technology (e.t. screenreader J.A.R VIS 200) t read and make sense your text. Would be able to copy/pastes it into paste bin (https: pasteb.in or something and share link with my assist? It is easier that way\n\nHere are a copy and past from paste.in: \n[link redac\u00e9e pour \u00e9vitres la frairure](http\u00a0:/\u00a0/p/5a4d7c6b3e6f4) [1]:\u00a0#cloud functions v \u00a0update a\u00a0 Cloud Function\n==================================== [TOCTOC](#tocioc \u201cPermalien vers TOCIIC\u201d)\n\n.. automethod:: googleapicomputecostzones.GoogleAPILambdaCostZo n e.get_client_method \u201cGetClientM\u00e9tHODE\u201d\n.... automodulename google.cloud.functionscollaborative edit \u201cCollaboRAIVe Edi\u201d\u00a0[TocT oC]\u00a0(\u00a0permaLIn \u00a0toctoc \u201cP\u00c9RMALIe\u00a0vers TociC\u201d) ["
    ],
    "smoothed_bleu_4": 0.8223317911590567
  },
  {
    "doc_id": 99,
    "doc": {
      "id": 99,
      "repo": "apache/airflow",
      "path": "airflow/contrib/hooks/gcp_function_hook.py",
      "func_name": "GcfHook.upload_function_zip",
      "original_string": "def upload_function_zip(self, location, zip_path, project_id=None):\n        \"\"\"\n        Uploads zip file with sources.\n\n        :param location: The location where the function is created.\n        :type location: str\n        :param zip_path: The path of the valid .zip file to upload.\n        :type zip_path: str\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: The upload URL that was returned by generateUploadUrl method.\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().generateUploadUrl(\n            parent=self._full_location(project_id, location)\n        ).execute(num_retries=self.num_retries)\n        upload_url = response.get('uploadUrl')\n        with open(zip_path, 'rb') as fp:\n            requests.put(\n                url=upload_url,\n                data=fp,\n                # Those two headers needs to be specified according to:\n                # https://cloud.google.com/functions/docs/reference/rest/v1/projects.locations.functions/generateUploadUrl\n                # nopep8\n                headers={\n                    'Content-type': 'application/zip',\n                    'x-goog-content-length-range': '0,104857600',\n                }\n            )\n        return upload_url",
      "language": "python",
      "code": "def upload_function_zip(self, location, zip_path, project_id=None):\n        \"\"\"\n        Uploads zip file with sources.\n\n        :param location: The location where the function is created.\n        :type location: str\n        :param zip_path: The path of the valid .zip file to upload.\n        :type zip_path: str\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: The upload URL that was returned by generateUploadUrl method.\n        \"\"\"\n        response = self.get_conn().projects().locations().functions().generateUploadUrl(\n            parent=self._full_location(project_id, location)\n        ).execute(num_retries=self.num_retries)\n        upload_url = response.get('uploadUrl')\n        with open(zip_path, 'rb') as fp:\n            requests.put(\n                url=upload_url,\n                data=fp,\n                # Those two headers needs to be specified according to:\n                # https://cloud.google.com/functions/docs/reference/rest/v1/projects.locations.functions/generateUploadUrl\n                # nopep8\n                headers={\n                    'Content-type': 'application/zip',\n                    'x-goog-content-length-range': '0,104857600',\n                }\n            )\n        return upload_url",
      "code_tokens": [
        "def",
        "upload_function_zip",
        "(",
        "self",
        ",",
        "location",
        ",",
        "zip_path",
        ",",
        "project_id",
        "=",
        "None",
        ")",
        ":",
        "response",
        "=",
        "self",
        ".",
        "get_conn",
        "(",
        ")",
        ".",
        "projects",
        "(",
        ")",
        ".",
        "locations",
        "(",
        ")",
        ".",
        "functions",
        "(",
        ")",
        ".",
        "generateUploadUrl",
        "(",
        "parent",
        "=",
        "self",
        ".",
        "_full_location",
        "(",
        "project_id",
        ",",
        "location",
        ")",
        ")",
        ".",
        "execute",
        "(",
        "num_retries",
        "=",
        "self",
        ".",
        "num_retries",
        ")",
        "upload_url",
        "=",
        "response",
        ".",
        "get",
        "(",
        "'uploadUrl'",
        ")",
        "with",
        "open",
        "(",
        "zip_path",
        ",",
        "'rb'",
        ")",
        "as",
        "fp",
        ":",
        "requests",
        ".",
        "put",
        "(",
        "url",
        "=",
        "upload_url",
        ",",
        "data",
        "=",
        "fp",
        ",",
        "# Those two headers needs to be specified according to:",
        "# https://cloud.google.com/functions/docs/reference/rest/v1/projects.locations.functions/generateUploadUrl",
        "# nopep8",
        "headers",
        "=",
        "{",
        "'Content-type'",
        ":",
        "'application/zip'",
        ",",
        "'x-goog-content-length-range'",
        ":",
        "'0,104857600'",
        ",",
        "}",
        ")",
        "return",
        "upload_url"
      ],
      "docstring": "Uploads zip file with sources.\n\n        :param location: The location where the function is created.\n        :type location: str\n        :param zip_path: The path of the valid .zip file to upload.\n        :type zip_path: str\n        :param project_id: Optional, Google Cloud Project project_id where the function belongs.\n            If set to None or missing, the default project_id from the GCP connection is used.\n        :type project_id: str\n        :return: The upload URL that was returned by generateUploadUrl method.",
      "docstring_tokens": [
        "Uploads",
        "zip",
        "file",
        "with",
        "sources",
        "."
      ],
      "sha": "b69c686ad8a0c89b9136bb4b31767257eb7b2597",
      "url": "https://github.com/apache/airflow/blob/b69c686ad8a0c89b9136bb4b31767257eb7b2597/airflow/contrib/hooks/gcp_function_hook.py#L130-L159"
    },
    "target": "Uploads zip file with sources .",
    "arguments": [
      [
        "def upload_function_zip ( self , location , zip_path , project_id = None ) : response = self . get_conn ( ) . projects ( ) . locations ( ) . functions ( ) . generateUploadUrl ( parent = self . _full_location ( project_id , location ) ) . execute ( num_retries = self . num_retries ) upload_url = response . get ( 'uploadUrl' ) with open ( zip_path , 'rb' ) as fp : requests . put ( url = upload_url , data = fp , # Those two headers needs to be specified according to: # https://cloud.google.com/functions/docs/reference/rest/v1/projects.locations.functions/generateUploadUrl # nopep8 headers = { 'Content-type' : 'application/zip' , 'x-goog-content-length-range' : '0,104857600' , } ) return upload_url",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": false,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 5,
          "penalty_alpha": 1.0,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        "\n\n## Accelerated Mobile Pagelo... (0 issues, pull-queue 0, automated review rate VAPING )\nCodecov test coverate for branch main (Push successful, Pull queue waiting) is covered-by codecove... 100.000%\n\n[1m [31mpush[39;110[m [32mw/1 (2%)\\[0;1mdetected-cap-linter issues\\]: No linters are enabled in.prettieregion. Please install one (e.\\ g\\.\\ ESLINTRUG, Pypi-installedbananasl-intergrated) in order\\ tounderstancodeanalysis.[0;m[1 [31mrubycodelyser:0 errors,\\ 0fatalexplorefailu\\res,0.02secondstoanalyzerepo\\,pushsuccessful. ](https: //github-actions-badge.cdr.dev/stainlesssteve/albumentraffic.git?style=squarerect&badge=push%3Apassthrougbadgenotenabledbylinterrubystevedotgithubdotcommitsignin)[0;34mmarkdowa (no issue, pull queuethe waiti"
      ]
    ],
    "filtered_resps": [
      "\n\n## Accelerated Mobile Pagelo... (0 issues, pull-queue 0, automated review rate VAPING )\nCodecov test coverate for branch main (Push successful, Pull queue waiting) is covered-by codecove... 100.000%\n\n[1m [31mpush[39;110[m [32mw/1 (2%)\\[0;1mdetected-cap-linter issues\\]: No linters are enabled in.prettieregion. Please install one (e.\\ g\\.\\ ESLINTRUG, Pypi-installedbananasl-intergrated) in order\\ tounderstancodeanalysis.[0;m[1 [31mrubycodelyser:0 errors,\\ 0fatalexplorefailu\\res,0.02secondstoanalyzerepo\\,pushsuccessful. ](https: //github-actions-badge.cdr.dev/stainlesssteve/albumentraffic.git?style=squarerect&badge=push%3Apassthrougbadgenotenabledbylinterrubystevedotgithubdotcommitsignin)[0;34mmarkdowa (no issue, pull queuethe waiti"
    ],
    "smoothed_bleu_4": 0.5641810766844809
  }
]