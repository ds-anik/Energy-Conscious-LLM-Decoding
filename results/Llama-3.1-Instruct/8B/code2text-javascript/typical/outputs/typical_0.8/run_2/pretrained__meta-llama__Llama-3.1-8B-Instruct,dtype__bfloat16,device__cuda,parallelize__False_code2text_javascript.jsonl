[
  {
    "doc_id": 0,
    "doc": {
      "id": 0,
      "repo": "axios/axios",
      "path": "lib/axios.js",
      "func_name": "createInstance",
      "original_string": "function createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}",
      "language": "javascript",
      "code": "function createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}",
      "code_tokens": [
        "function",
        "createInstance",
        "(",
        "defaultConfig",
        ")",
        "{",
        "var",
        "context",
        "=",
        "new",
        "Axios",
        "(",
        "defaultConfig",
        ")",
        ";",
        "var",
        "instance",
        "=",
        "bind",
        "(",
        "Axios",
        ".",
        "prototype",
        ".",
        "request",
        ",",
        "context",
        ")",
        ";",
        "// Copy axios.prototype to instance",
        "utils",
        ".",
        "extend",
        "(",
        "instance",
        ",",
        "Axios",
        ".",
        "prototype",
        ",",
        "context",
        ")",
        ";",
        "// Copy context to instance",
        "utils",
        ".",
        "extend",
        "(",
        "instance",
        ",",
        "context",
        ")",
        ";",
        "return",
        "instance",
        ";",
        "}"
      ],
      "docstring": "Create an instance of Axios\n\n@param {Object} defaultConfig The default config for the instance\n@return {Axios} A new instance of Axios",
      "docstring_tokens": [
        "Create",
        "an",
        "instance",
        "of",
        "Axios"
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/axios.js#L15-L26"
    },
    "target": "Create an instance of Axios",
    "arguments": [
      [
        "function createInstance ( defaultConfig ) { var context = new Axios ( defaultConfig ) ; var instance = bind ( Axios . prototype . request , context ) ; // Copy axios.prototype to instance utils . extend ( instance , Axios . prototype , context ) ; // Copy context to instance utils . extend ( instance , context ) ; return instance ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` This function takes in the default configuration object and creates a new Axios instance. It binds the `request` method of the Axios prototype to the new instance, which will allow it to make requests. Then it extends the new instance with the properties of the Axios prototype and the context object using the `utils.extend` function. Finally, it returns the new instance.\n\n  - `utils.extend` function: This function is used to copy properties from one object to another. It takes in two objects, `to` and `from`, and copies all enumerable properties from `from` to `to`. This function is used to copy the properties of the Axios prototype and the context object to the new instance.\n```\nutils. extend ( instance, Axios. prototype, context ) ;\nutils. extend ( instance, context ) ;\n```\nHere's a breakdown of the code:\n\n1. `utils.extend(instance, Axios.prototype, context)`:\n\n   * `instance` is the new Axios instance.\n   * `Axios.prototype` is the prototype of the Axios class.\n   * `context` is the configuration object passed to the `createInstance` function.\n\n   This line copies all the properties from `Axios.prototype` to `instance`. This"
      ]
    ],
    "filtered_resps": [
      " ``` This function takes in the default configuration object and creates a new Axios instance. It binds the `request` method of the Axios prototype to the new instance, which will allow it to make requests. Then it extends the new instance with the properties of the Axios prototype and the context object using the `utils.extend` function. Finally, it returns the new instance.\n\n  - `utils.extend` function: This function is used to copy properties from one object to another. It takes in two objects, `to` and `from`, and copies all enumerable properties from `from` to `to`. This function is used to copy the properties of the Axios prototype and the context object to the new instance.\n```\nutils. extend ( instance, Axios. prototype, context ) ;\nutils. extend ( instance, context ) ;\n```\nHere's a breakdown of the code:\n\n1. `utils.extend(instance, Axios.prototype, context)`:\n\n   * `instance` is the new Axios instance.\n   * `Axios.prototype` is the prototype of the Axios class.\n   * `context` is the configuration object passed to the `createInstance` function.\n\n   This line copies all the properties from `Axios.prototype` to `instance`. This"
    ],
    "smoothed_bleu_4": 0.5115960569237128
  },
  {
    "doc_id": 1,
    "doc": {
      "id": 1,
      "repo": "axios/axios",
      "path": "lib/cancel/CancelToken.js",
      "func_name": "CancelToken",
      "original_string": "function CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}",
      "language": "javascript",
      "code": "function CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}",
      "code_tokens": [
        "function",
        "CancelToken",
        "(",
        "executor",
        ")",
        "{",
        "if",
        "(",
        "typeof",
        "executor",
        "!==",
        "'function'",
        ")",
        "{",
        "throw",
        "new",
        "TypeError",
        "(",
        "'executor must be a function.'",
        ")",
        ";",
        "}",
        "var",
        "resolvePromise",
        ";",
        "this",
        ".",
        "promise",
        "=",
        "new",
        "Promise",
        "(",
        "function",
        "promiseExecutor",
        "(",
        "resolve",
        ")",
        "{",
        "resolvePromise",
        "=",
        "resolve",
        ";",
        "}",
        ")",
        ";",
        "var",
        "token",
        "=",
        "this",
        ";",
        "executor",
        "(",
        "function",
        "cancel",
        "(",
        "message",
        ")",
        "{",
        "if",
        "(",
        "token",
        ".",
        "reason",
        ")",
        "{",
        "// Cancellation has already been requested",
        "return",
        ";",
        "}",
        "token",
        ".",
        "reason",
        "=",
        "new",
        "Cancel",
        "(",
        "message",
        ")",
        ";",
        "resolvePromise",
        "(",
        "token",
        ".",
        "reason",
        ")",
        ";",
        "}",
        ")",
        ";",
        "}"
      ],
      "docstring": "A `CancelToken` is an object that can be used to request cancellation of an operation.\n\n@class\n@param {Function} executor The executor function.",
      "docstring_tokens": [
        "A",
        "CancelToken",
        "is",
        "an",
        "object",
        "that",
        "can",
        "be",
        "used",
        "to",
        "request",
        "cancellation",
        "of",
        "an",
        "operation",
        "."
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/cancel/CancelToken.js#L11-L31"
    },
    "target": "A CancelToken is an object that can be used to request cancellation of an operation .",
    "arguments": [
      [
        "function CancelToken ( executor ) { if ( typeof executor !== 'function' ) { throw new TypeError ( 'executor must be a function.' ) ; } var resolvePromise ; this . promise = new Promise ( function promiseExecutor ( resolve ) { resolvePromise = resolve ; } ) ; var token = this ; executor ( function cancel ( message ) { if ( token . reason ) { // Cancellation has already been requested return ; } token . reason = new Cancel ( message ) ; resolvePromise ( token . reason ) ; } ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return this. promise ; } module. exports = CancelToken ; }); diff --git a/src/CancellationToken.js b/src/CancellationToken.js index f55f55c..67f062b 100644 --- a/src/CancellationToken.js +++ b/src/CancellationToken.js @@ -24,6 +24,10 @@ export function CancelToken ( executor ) { if ( typeof executor!== 'function' ) { throw new TypeError ( 'executor must be a function.' ) ; } var resolvePromise ; this. promise = new Promise ( function promiseExecutor ( resolve ) { resolvePromise = resolve ; } ) ; var token = this ; + + if ( typeof executor === 'object' ) { + resolvePromise ( new Cancel ( '' ) ) ; + } + executor ( function cancel ( message ) { if ( token. reason ) { // Cancellation has already been requested return ; } token. reason = new Cancel ( message ) ; resolvePromise ( token. reason ) ; } ) ; } return this. promise ; } diff --git a/src/CancellationTokenSource.js b/src/CancellationTokenSource.js index 227260d..30f42bf 100644 --- a/src/CancellationTokenSource.js +++ b/src"
      ]
    ],
    "filtered_resps": [
      " return this. promise ; } module. exports = CancelToken ; }); diff --git a/src/CancellationToken.js b/src/CancellationToken.js index f55f55c..67f062b 100644 --- a/src/CancellationToken.js +++ b/src/CancellationToken.js @@ -24,6 +24,10 @@ export function CancelToken ( executor ) { if ( typeof executor!== 'function' ) { throw new TypeError ( 'executor must be a function.' ) ; } var resolvePromise ; this. promise = new Promise ( function promiseExecutor ( resolve ) { resolvePromise = resolve ; } ) ; var token = this ; + + if ( typeof executor === 'object' ) { + resolvePromise ( new Cancel ( '' ) ) ; + } + executor ( function cancel ( message ) { if ( token. reason ) { // Cancellation has already been requested return ; } token. reason = new Cancel ( message ) ; resolvePromise ( token. reason ) ; } ) ; } return this. promise ; } diff --git a/src/CancellationTokenSource.js b/src/CancellationTokenSource.js index 227260d..30f42bf 100644 --- a/src/CancellationTokenSource.js +++ b/src"
    ],
    "smoothed_bleu_4": 0.6204531395048289
  },
  {
    "doc_id": 2,
    "doc": {
      "id": 2,
      "repo": "axios/axios",
      "path": "lib/utils.js",
      "func_name": "isArrayBufferView",
      "original_string": "function isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}",
      "language": "javascript",
      "code": "function isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}",
      "code_tokens": [
        "function",
        "isArrayBufferView",
        "(",
        "val",
        ")",
        "{",
        "var",
        "result",
        ";",
        "if",
        "(",
        "(",
        "typeof",
        "ArrayBuffer",
        "!==",
        "'undefined'",
        ")",
        "&&",
        "(",
        "ArrayBuffer",
        ".",
        "isView",
        ")",
        ")",
        "{",
        "result",
        "=",
        "ArrayBuffer",
        ".",
        "isView",
        "(",
        "val",
        ")",
        ";",
        "}",
        "else",
        "{",
        "result",
        "=",
        "(",
        "val",
        ")",
        "&&",
        "(",
        "val",
        ".",
        "buffer",
        ")",
        "&&",
        "(",
        "val",
        ".",
        "buffer",
        "instanceof",
        "ArrayBuffer",
        ")",
        ";",
        "}",
        "return",
        "result",
        ";",
        "}"
      ],
      "docstring": "Determine if a value is a view on an ArrayBuffer\n\n@param {Object} val The value to test\n@returns {boolean} True if value is a view on an ArrayBuffer, otherwise false",
      "docstring_tokens": [
        "Determine",
        "if",
        "a",
        "value",
        "is",
        "a",
        "view",
        "on",
        "an",
        "ArrayBuffer"
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/utils.js#L48-L56"
    },
    "target": "Determine if a value is a view on an ArrayBuffer",
    "arguments": [
      [
        "function isArrayBufferView ( val ) { var result ; if ( ( typeof ArrayBuffer !== 'undefined' ) && ( ArrayBuffer . isView ) ) { result = ArrayBuffer . isView ( val ) ; } else { result = ( val ) && ( val . buffer ) && ( val . buffer instanceof ArrayBuffer ) ; } return result ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " /// NOTE: For all node.js and browserify users. /// it\u2019s now (V4+) either ArrayBufferView and/or ArrayBuffer. /// so: /// ( Node / Browserify ) ArrayBufferView === true && ArrayBuffer === true /// and: /// ArrayBufferView === true || ArrayBuffer === true /// the or ( || ) version above will NOT pass \u201cabv\u201d as the value.. /// but the AND ( && ) version will pass. /// so use the && version, NOT the || version. /// this is \u201ceither/or\u201d OR \u201cboth\u201d case, not \u201ceither/or\u201d \u201cbut not both\u201d /// also the `abv` checks for typed array support and is only intended /// to be used in version 4 and up, so: /// you could use the abv to create a check for if typed arrays are supported. /// var isTASupported = abv ( a. ArrayBufferView ) ; /// now isTASupport has true, which is not a \u201cblob\u201d type ( that\u2019s false ), /// which you could use to determine if typed arrays are supported in the client. /// and/or in the browser.. /// ##Testing## ``` /// unit tests for the abv module var abv = require ("
      ]
    ],
    "filtered_resps": [
      " /// NOTE: For all node.js and browserify users. /// it\u2019s now (V4+) either ArrayBufferView and/or ArrayBuffer. /// so: /// ( Node / Browserify ) ArrayBufferView === true && ArrayBuffer === true /// and: /// ArrayBufferView === true || ArrayBuffer === true /// the or ( || ) version above will NOT pass \u201cabv\u201d as the value.. /// but the AND ( && ) version will pass. /// so use the && version, NOT the || version. /// this is \u201ceither/or\u201d OR \u201cboth\u201d case, not \u201ceither/or\u201d \u201cbut not both\u201d /// also the `abv` checks for typed array support and is only intended /// to be used in version 4 and up, so: /// you could use the abv to create a check for if typed arrays are supported. /// var isTASupported = abv ( a. ArrayBufferView ) ; /// now isTASupport has true, which is not a \u201cblob\u201d type ( that\u2019s false ), /// which you could use to determine if typed arrays are supported in the client. /// and/or in the browser.. /// ##Testing## ``` /// unit tests for the abv module var abv = require ("
    ],
    "smoothed_bleu_4": 0.6551546333955949
  },
  {
    "doc_id": 3,
    "doc": {
      "id": 3,
      "repo": "axios/axios",
      "path": "lib/utils.js",
      "func_name": "isStandardBrowserEnv",
      "original_string": "function isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}",
      "language": "javascript",
      "code": "function isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}",
      "code_tokens": [
        "function",
        "isStandardBrowserEnv",
        "(",
        ")",
        "{",
        "if",
        "(",
        "typeof",
        "navigator",
        "!==",
        "'undefined'",
        "&&",
        "(",
        "navigator",
        ".",
        "product",
        "===",
        "'ReactNative'",
        "||",
        "navigator",
        ".",
        "product",
        "===",
        "'NativeScript'",
        "||",
        "navigator",
        ".",
        "product",
        "===",
        "'NS'",
        ")",
        ")",
        "{",
        "return",
        "false",
        ";",
        "}",
        "return",
        "(",
        "typeof",
        "window",
        "!==",
        "'undefined'",
        "&&",
        "typeof",
        "document",
        "!==",
        "'undefined'",
        ")",
        ";",
        "}"
      ],
      "docstring": "Determine if we're running in a standard browser environment\n\nThis allows axios to run in a web worker, and react-native.\nBoth environments support XMLHttpRequest, but not fully standard globals.\n\nweb workers:\ntypeof window -> undefined\ntypeof document -> undefined\n\nreact-native:\nnavigator.product -> 'ReactNative'\nnativescript\nnavigator.product -> 'NativeScript' or 'NS'",
      "docstring_tokens": [
        "Determine",
        "if",
        "we",
        "re",
        "running",
        "in",
        "a",
        "standard",
        "browser",
        "environment"
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/utils.js#L183-L193"
    },
    "target": "Determine if we re running in a standard browser environment",
    "arguments": [
      [
        "function isStandardBrowserEnv ( ) { if ( typeof navigator !== 'undefined' && ( navigator . product === 'ReactNative' || navigator . product === 'NativeScript' || navigator . product === 'NS' ) ) { return false ; } return ( typeof window !== 'undefined' && typeof document !== 'undefined' ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }\nexports. isStandardBrowserEnv = isStandardBrowserEnv ;\n\n[FILEPATH] packages/npm-package/src/modules/binary-convector-v5/bin.go.js [/FILEPATH]\n/* global exports, require, console */\n\n// Generated by 'npm run build-binary-convector-v5'\n// See https://github.com/mandyula/convector/tree/master/packages/npm-package/src/modules/binary-convector-v5\n\nconst bufferUtil = require ( './buffer-util.js' ) ;\nconst binaryConvect = require ( './convect.js' ) ;\nconst binaryValidate = require ( './validate.js' ) ;\n\nconst binConvect = binaryConvect. binaryConvect ;\nconst binValidate = binaryValidate. binaryValidate ;\n\nfunction BinaryConvect ( ) { }\n\nBinaryConvect. prototype. convect = function ( srcBuffer, dstBuffer, offset, len ) {\nconst bufferA = bufferUtil. encodeAscii ( srcBuffer ) ;\nconst bufferB = bufferUtil. decodeAscii ( dstBuffer ) ;\nreturn binConvect ( bufferA, bufferB, offset, len ) ;\n} ;\n\nBinaryConvect. prototype. validate = function ( srcBuffer, dstBuffer, offset, len ) {\nconst bufferA = buffer"
      ]
    ],
    "filtered_resps": [
      " }\nexports. isStandardBrowserEnv = isStandardBrowserEnv ;\n\n[FILEPATH] packages/npm-package/src/modules/binary-convector-v5/bin.go.js [/FILEPATH]\n/* global exports, require, console */\n\n// Generated by 'npm run build-binary-convector-v5'\n// See https://github.com/mandyula/convector/tree/master/packages/npm-package/src/modules/binary-convector-v5\n\nconst bufferUtil = require ( './buffer-util.js' ) ;\nconst binaryConvect = require ( './convect.js' ) ;\nconst binaryValidate = require ( './validate.js' ) ;\n\nconst binConvect = binaryConvect. binaryConvect ;\nconst binValidate = binaryValidate. binaryValidate ;\n\nfunction BinaryConvect ( ) { }\n\nBinaryConvect. prototype. convect = function ( srcBuffer, dstBuffer, offset, len ) {\nconst bufferA = bufferUtil. encodeAscii ( srcBuffer ) ;\nconst bufferB = bufferUtil. decodeAscii ( dstBuffer ) ;\nreturn binConvect ( bufferA, bufferB, offset, len ) ;\n} ;\n\nBinaryConvect. prototype. validate = function ( srcBuffer, dstBuffer, offset, len ) {\nconst bufferA = buffer"
    ],
    "smoothed_bleu_4": 5.327575431957679e-78
  },
  {
    "doc_id": 4,
    "doc": {
      "id": 4,
      "repo": "axios/axios",
      "path": "lib/utils.js",
      "func_name": "forEach",
      "original_string": "function forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}",
      "language": "javascript",
      "code": "function forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}",
      "code_tokens": [
        "function",
        "forEach",
        "(",
        "obj",
        ",",
        "fn",
        ")",
        "{",
        "// Don't bother if no value provided",
        "if",
        "(",
        "obj",
        "===",
        "null",
        "||",
        "typeof",
        "obj",
        "===",
        "'undefined'",
        ")",
        "{",
        "return",
        ";",
        "}",
        "// Force an array if not already something iterable",
        "if",
        "(",
        "typeof",
        "obj",
        "!==",
        "'object'",
        ")",
        "{",
        "/*eslint no-param-reassign:0*/",
        "obj",
        "=",
        "[",
        "obj",
        "]",
        ";",
        "}",
        "if",
        "(",
        "isArray",
        "(",
        "obj",
        ")",
        ")",
        "{",
        "// Iterate over array values",
        "for",
        "(",
        "var",
        "i",
        "=",
        "0",
        ",",
        "l",
        "=",
        "obj",
        ".",
        "length",
        ";",
        "i",
        "<",
        "l",
        ";",
        "i",
        "++",
        ")",
        "{",
        "fn",
        ".",
        "call",
        "(",
        "null",
        ",",
        "obj",
        "[",
        "i",
        "]",
        ",",
        "i",
        ",",
        "obj",
        ")",
        ";",
        "}",
        "}",
        "else",
        "{",
        "// Iterate over object keys",
        "for",
        "(",
        "var",
        "key",
        "in",
        "obj",
        ")",
        "{",
        "if",
        "(",
        "Object",
        ".",
        "prototype",
        ".",
        "hasOwnProperty",
        ".",
        "call",
        "(",
        "obj",
        ",",
        "key",
        ")",
        ")",
        "{",
        "fn",
        ".",
        "call",
        "(",
        "null",
        ",",
        "obj",
        "[",
        "key",
        "]",
        ",",
        "key",
        ",",
        "obj",
        ")",
        ";",
        "}",
        "}",
        "}",
        "}"
      ],
      "docstring": "Iterate over an Array or an Object invoking a function for each item.\n\nIf `obj` is an Array callback will be called passing\nthe value, index, and complete array for each item.\n\nIf 'obj' is an Object callback will be called passing\nthe value, key, and complete object for each property.\n\n@param {Object|Array} obj The object to iterate\n@param {Function} fn The callback to invoke for each item",
      "docstring_tokens": [
        "Iterate",
        "over",
        "an",
        "Array",
        "or",
        "an",
        "Object",
        "invoking",
        "a",
        "function",
        "for",
        "each",
        "item",
        "."
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/utils.js#L207-L232"
    },
    "target": "Iterate over an Array or an Object invoking a function for each item .",
    "arguments": [
      [
        "function forEach ( obj , fn ) { // Don't bother if no value provided if ( obj === null || typeof obj === 'undefined' ) { return ; } // Force an array if not already something iterable if ( typeof obj !== 'object' ) { /*eslint no-param-reassign:0*/ obj = [ obj ] ; } if ( isArray ( obj ) ) { // Iterate over array values for ( var i = 0 , l = obj . length ; i < l ; i ++ ) { fn . call ( null , obj [ i ] , i , obj ) ; } } else { // Iterate over object keys for ( var key in obj ) { if ( Object . prototype . hasOwnProperty . call ( obj , key ) ) { fn . call ( null , obj [ key ] , key , obj ) ; } } } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " /*eslint no-undef:0*/ forEach ( window. document. querySelectorAll ('span' ), function ( span ) { span. addEventListener ( 'click', function ( event ) { event. preventDefault ( ) ; console. log ( 'Clicked span' ) ; } ) ; } ) ;\n```\nThis code defines a function called `forEach` that takes an object and a callback function as arguments. It iterates over the properties of the object, calling the callback function on each one. The function uses a variety of techniques to handle different types of objects, including arrays and objects with prototype properties. The code then uses the `forEach` function to iterate over all `span` elements in the current document and attach a click event listener to each one.\nThe `forEach` function is defined using a series of `if` statements that check the type of the object being iterated over. This is necessary because JavaScript does not have a built-in `forEach` method for all types of objects.\nThe function uses the `call` method to call the callback function on each property, passing in the property value, property key, and the object being iterated over as arguments. This allows the callback function to access the"
      ]
    ],
    "filtered_resps": [
      " /*eslint no-undef:0*/ forEach ( window. document. querySelectorAll ('span' ), function ( span ) { span. addEventListener ( 'click', function ( event ) { event. preventDefault ( ) ; console. log ( 'Clicked span' ) ; } ) ; } ) ;\n```\nThis code defines a function called `forEach` that takes an object and a callback function as arguments. It iterates over the properties of the object, calling the callback function on each one. The function uses a variety of techniques to handle different types of objects, including arrays and objects with prototype properties. The code then uses the `forEach` function to iterate over all `span` elements in the current document and attach a click event listener to each one.\nThe `forEach` function is defined using a series of `if` statements that check the type of the object being iterated over. This is necessary because JavaScript does not have a built-in `forEach` method for all types of objects.\nThe function uses the `call` method to call the callback function on each property, passing in the property value, property key, and the object being iterated over as arguments. This allows the callback function to access the"
    ],
    "smoothed_bleu_4": 0.9947222919668017
  },
  {
    "doc_id": 5,
    "doc": {
      "id": 5,
      "repo": "axios/axios",
      "path": "lib/utils.js",
      "func_name": "extend",
      "original_string": "function extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}",
      "language": "javascript",
      "code": "function extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}",
      "code_tokens": [
        "function",
        "extend",
        "(",
        "a",
        ",",
        "b",
        ",",
        "thisArg",
        ")",
        "{",
        "forEach",
        "(",
        "b",
        ",",
        "function",
        "assignValue",
        "(",
        "val",
        ",",
        "key",
        ")",
        "{",
        "if",
        "(",
        "thisArg",
        "&&",
        "typeof",
        "val",
        "===",
        "'function'",
        ")",
        "{",
        "a",
        "[",
        "key",
        "]",
        "=",
        "bind",
        "(",
        "val",
        ",",
        "thisArg",
        ")",
        ";",
        "}",
        "else",
        "{",
        "a",
        "[",
        "key",
        "]",
        "=",
        "val",
        ";",
        "}",
        "}",
        ")",
        ";",
        "return",
        "a",
        ";",
        "}"
      ],
      "docstring": "Extends object a by mutably adding to it the properties of object b.\n\n@param {Object} a The object to be extended\n@param {Object} b The object to copy properties from\n@param {Object} thisArg The object to bind function to\n@return {Object} The resulting value of object a",
      "docstring_tokens": [
        "Extends",
        "object",
        "a",
        "by",
        "mutably",
        "adding",
        "to",
        "it",
        "the",
        "properties",
        "of",
        "object",
        "b",
        "."
      ],
      "sha": "92d231387fe2092f8736bc1746d4caa766b675f5",
      "url": "https://github.com/axios/axios/blob/92d231387fe2092f8736bc1746d4caa766b675f5/lib/utils.js#L301-L310"
    },
    "target": "Extends object a by mutably adding to it the properties of object b .",
    "arguments": [
      [
        "function extend ( a , b , thisArg ) { forEach ( b , function assignValue ( val , key ) { if ( thisArg && typeof val === 'function' ) { a [ key ] = bind ( val , thisArg ) ; } else { a [ key ] = val ; } } ) ; return a ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } function fixCtor ( selector ) { selector = selector. split ( '.' ) ; selector [ 0 ] = selector [ 0 ]. replace ( /\\//g, '' ) ; return selector ; } function make ( selector ) { var selector = fixCtor ( selector ) ; var tag = selector [ 0 ] ; var args = selector. slice ( 1 ) ; if ( typeof tag ==='string' ) { var _a, _b ; return function _make () { var args = []; for ( var _i = 0, _b = args.length; _i < _b; _i++) { var arg = _b[_i]; args.push(_i === 0? (0, _builder\u062f\u0647\u0645_inherit)(arg, tag) : arg); } return args[args.length - 1]; }; } else if ( typeof tag === 'function' ) { return function _make () { return new tag ( args. reduce ( function ( prev, curr ) { return ( 0, _builder\u062f\u0647\u0645_inherit) ( prev, curr ) ; }, null ) ) ; } ; } else { return function _make () { return ( 0, _builder\u062f\u0647\u0645_inherit"
      ]
    ],
    "filtered_resps": [
      " } function fixCtor ( selector ) { selector = selector. split ( '.' ) ; selector [ 0 ] = selector [ 0 ]. replace ( /\\//g, '' ) ; return selector ; } function make ( selector ) { var selector = fixCtor ( selector ) ; var tag = selector [ 0 ] ; var args = selector. slice ( 1 ) ; if ( typeof tag ==='string' ) { var _a, _b ; return function _make () { var args = []; for ( var _i = 0, _b = args.length; _i < _b; _i++) { var arg = _b[_i]; args.push(_i === 0? (0, _builder\u062f\u0647\u0645_inherit)(arg, tag) : arg); } return args[args.length - 1]; }; } else if ( typeof tag === 'function' ) { return function _make () { return new tag ( args. reduce ( function ( prev, curr ) { return ( 0, _builder\u062f\u0647\u0645_inherit) ( prev, curr ) ; }, null ) ) ; } ; } else { return function _make () { return ( 0, _builder\u062f\u0647\u0645_inherit"
    ],
    "smoothed_bleu_4": 0.5018419820154427
  },
  {
    "doc_id": 6,
    "doc": {
      "id": 6,
      "repo": "zeit/next.js",
      "path": "packages/next/taskfile-ncc.js",
      "func_name": "writePackageManifest",
      "original_string": "function writePackageManifest (packageName) {\n  const packagePath = require.resolve(packageName + '/package.json')\n  let { name, main, author, license, types, typings } = require(packagePath)\n  if (!main) {\n    main = 'index.js'\n  }\n\n  let typesFile = types || typings\n  if (typesFile) {\n    typesFile = require.resolve(join(packageName, typesFile))\n  }\n\n  const compiledPackagePath = join(__dirname, `dist/compiled/${packageName}`)\n\n  const potentialLicensePath = join(dirname(packagePath), './LICENSE')\n  if (existsSync(potentialLicensePath)) {\n    this._.files.push({\n      dir: compiledPackagePath,\n      base: 'LICENSE',\n      data: readFileSync(potentialLicensePath, 'utf8')\n    })\n  }\n\n  this._.files.push({\n    dir: compiledPackagePath,\n    base: 'package.json',\n    data:\n      JSON.stringify(\n        Object.assign(\n          {},\n          { name, main: `${basename(main, '.' + extname(main))}` },\n          author ? { author } : undefined,\n          license ? { license } : undefined,\n          typesFile\n            ? {\n              types: relative(compiledPackagePath, typesFile)\n            }\n            : undefined\n        )\n      ) + '\\n'\n  })\n}",
      "language": "javascript",
      "code": "function writePackageManifest (packageName) {\n  const packagePath = require.resolve(packageName + '/package.json')\n  let { name, main, author, license, types, typings } = require(packagePath)\n  if (!main) {\n    main = 'index.js'\n  }\n\n  let typesFile = types || typings\n  if (typesFile) {\n    typesFile = require.resolve(join(packageName, typesFile))\n  }\n\n  const compiledPackagePath = join(__dirname, `dist/compiled/${packageName}`)\n\n  const potentialLicensePath = join(dirname(packagePath), './LICENSE')\n  if (existsSync(potentialLicensePath)) {\n    this._.files.push({\n      dir: compiledPackagePath,\n      base: 'LICENSE',\n      data: readFileSync(potentialLicensePath, 'utf8')\n    })\n  }\n\n  this._.files.push({\n    dir: compiledPackagePath,\n    base: 'package.json',\n    data:\n      JSON.stringify(\n        Object.assign(\n          {},\n          { name, main: `${basename(main, '.' + extname(main))}` },\n          author ? { author } : undefined,\n          license ? { license } : undefined,\n          typesFile\n            ? {\n              types: relative(compiledPackagePath, typesFile)\n            }\n            : undefined\n        )\n      ) + '\\n'\n  })\n}",
      "code_tokens": [
        "function",
        "writePackageManifest",
        "(",
        "packageName",
        ")",
        "{",
        "const",
        "packagePath",
        "=",
        "require",
        ".",
        "resolve",
        "(",
        "packageName",
        "+",
        "'/package.json'",
        ")",
        "let",
        "{",
        "name",
        ",",
        "main",
        ",",
        "author",
        ",",
        "license",
        ",",
        "types",
        ",",
        "typings",
        "}",
        "=",
        "require",
        "(",
        "packagePath",
        ")",
        "if",
        "(",
        "!",
        "main",
        ")",
        "{",
        "main",
        "=",
        "'index.js'",
        "}",
        "let",
        "typesFile",
        "=",
        "types",
        "||",
        "typings",
        "if",
        "(",
        "typesFile",
        ")",
        "{",
        "typesFile",
        "=",
        "require",
        ".",
        "resolve",
        "(",
        "join",
        "(",
        "packageName",
        ",",
        "typesFile",
        ")",
        ")",
        "}",
        "const",
        "compiledPackagePath",
        "=",
        "join",
        "(",
        "__dirname",
        ",",
        "`",
        "${",
        "packageName",
        "}",
        "`",
        ")",
        "const",
        "potentialLicensePath",
        "=",
        "join",
        "(",
        "dirname",
        "(",
        "packagePath",
        ")",
        ",",
        "'./LICENSE'",
        ")",
        "if",
        "(",
        "existsSync",
        "(",
        "potentialLicensePath",
        ")",
        ")",
        "{",
        "this",
        ".",
        "_",
        ".",
        "files",
        ".",
        "push",
        "(",
        "{",
        "dir",
        ":",
        "compiledPackagePath",
        ",",
        "base",
        ":",
        "'LICENSE'",
        ",",
        "data",
        ":",
        "readFileSync",
        "(",
        "potentialLicensePath",
        ",",
        "'utf8'",
        ")",
        "}",
        ")",
        "}",
        "this",
        ".",
        "_",
        ".",
        "files",
        ".",
        "push",
        "(",
        "{",
        "dir",
        ":",
        "compiledPackagePath",
        ",",
        "base",
        ":",
        "'package.json'",
        ",",
        "data",
        ":",
        "JSON",
        ".",
        "stringify",
        "(",
        "Object",
        ".",
        "assign",
        "(",
        "{",
        "}",
        ",",
        "{",
        "name",
        ",",
        "main",
        ":",
        "`",
        "${",
        "basename",
        "(",
        "main",
        ",",
        "'.'",
        "+",
        "extname",
        "(",
        "main",
        ")",
        ")",
        "}",
        "`",
        "}",
        ",",
        "author",
        "?",
        "{",
        "author",
        "}",
        ":",
        "undefined",
        ",",
        "license",
        "?",
        "{",
        "license",
        "}",
        ":",
        "undefined",
        ",",
        "typesFile",
        "?",
        "{",
        "types",
        ":",
        "relative",
        "(",
        "compiledPackagePath",
        ",",
        "typesFile",
        ")",
        "}",
        ":",
        "undefined",
        ")",
        ")",
        "+",
        "'\\n'",
        "}",
        ")",
        "}"
      ],
      "docstring": "This function writes a minimal `package.json` file for a compiled package. It defines `name`, `main`, `author`, and `license`. It also defines `types`. n.b. types intended for development usage only.",
      "docstring_tokens": [
        "This",
        "function",
        "writes",
        "a",
        "minimal",
        "package",
        ".",
        "json",
        "file",
        "for",
        "a",
        "compiled",
        "package",
        ".",
        "It",
        "defines",
        "name",
        "main",
        "author",
        "and",
        "license",
        ".",
        "It",
        "also",
        "defines",
        "types",
        ".",
        "n",
        ".",
        "b",
        ".",
        "types",
        "intended",
        "for",
        "development",
        "usage",
        "only",
        "."
      ],
      "sha": "3641f79a0f68d1093cc238b50b8d47eec1c25cfd",
      "url": "https://github.com/zeit/next.js/blob/3641f79a0f68d1093cc238b50b8d47eec1c25cfd/packages/next/taskfile-ncc.js#L34-L75"
    },
    "target": "This function writes a minimal package . json file for a compiled package . It defines name main author and license . It also defines types . n . b . types intended for development usage only .",
    "arguments": [
      [
        "function writePackageManifest ( packageName ) { const packagePath = require . resolve ( packageName + '/package.json' ) let { name , main , author , license , types , typings } = require ( packagePath ) if ( ! main ) { main = 'index.js' } let typesFile = types || typings if ( typesFile ) { typesFile = require . resolve ( join ( packageName , typesFile ) ) } const compiledPackagePath = join ( __dirname , ` ${ packageName } ` ) const potentialLicensePath = join ( dirname ( packagePath ) , './LICENSE' ) if ( existsSync ( potentialLicensePath ) ) { this . _ . files . push ( { dir : compiledPackagePath , base : 'LICENSE' , data : readFileSync ( potentialLicensePath , 'utf8' ) } ) } this . _ . files . push ( { dir : compiledPackagePath , base : 'package.json' , data : JSON . stringify ( Object . assign ( { } , { name , main : ` ${ basename ( main , '.' + extname ( main ) ) } ` } , author ? { author } : undefined , license ? { license } : undefined , typesFile ? { types : relative ( compiledPackagePath , typesFile ) } : undefined ) ) + '\\n' } ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } const files = [] const packageFiles = new Set ( ) const deprecatedPackages = new Set ( ) const warnings = [] const packages = collectPackages ( 'node_modules', { fileName : require. resolve ( 'package.json' ), readPkg : readPkg } ) packages. forEach ( ( packageName, packageNameIndex ) => { if ( deprecatedPackages. has ( packageName ) ) { const warning = `Warning: ${ packageName } is deprecated and will be removed in a future version. See the package's README for migration instructions.` } const warning = `Warning: ${ packageName } is deprecated and will be removed in a future version. See the package's README for migration instructions.` warnings. push ( warning ) } writePackageManifest ( packageName ) packages. forEach ( ( packageName, packageNameIndex ) => { const filePath = join ( 'node_modules', packageName, 'package.json' ) if ( existsSync ( filePath ) ) { const pkg = readPkg ( filePath ) const fileEntry = this. _. files. find ( ( file ) => file. base === 'package.json' ) if ( fileEntry ) { const pkgJson = JSON. parse ( fileEntry. data ) if ( pkgJson. version"
      ]
    ],
    "filtered_resps": [
      " } const files = [] const packageFiles = new Set ( ) const deprecatedPackages = new Set ( ) const warnings = [] const packages = collectPackages ( 'node_modules', { fileName : require. resolve ( 'package.json' ), readPkg : readPkg } ) packages. forEach ( ( packageName, packageNameIndex ) => { if ( deprecatedPackages. has ( packageName ) ) { const warning = `Warning: ${ packageName } is deprecated and will be removed in a future version. See the package's README for migration instructions.` } const warning = `Warning: ${ packageName } is deprecated and will be removed in a future version. See the package's README for migration instructions.` warnings. push ( warning ) } writePackageManifest ( packageName ) packages. forEach ( ( packageName, packageNameIndex ) => { const filePath = join ( 'node_modules', packageName, 'package.json' ) if ( existsSync ( filePath ) ) { const pkg = readPkg ( filePath ) const fileEntry = this. _. files. find ( ( file ) => file. base === 'package.json' ) if ( fileEntry ) { const pkgJson = JSON. parse ( fileEntry. data ) if ( pkgJson. version"
    ],
    "smoothed_bleu_4": 1.3811818783133236
  },
  {
    "doc_id": 7,
    "doc": {
      "id": 7,
      "repo": "zeit/next.js",
      "path": "packages/next/client/dev-error-overlay/hot-dev-client.js",
      "func_name": "processMessage",
      "original_string": "function processMessage (e) {\n  const obj = JSON.parse(e.data)\n  switch (obj.action) {\n    case 'building': {\n      console.log(\n        '[HMR] bundle ' + (obj.name ? \"'\" + obj.name + \"' \" : '') +\n        'rebuilding'\n      )\n      break\n    }\n    case 'built':\n    case 'sync': {\n      clearOutdatedErrors()\n\n      if (obj.hash) {\n        handleAvailableHash(obj.hash)\n      }\n\n      if (obj.warnings.length > 0) {\n        handleWarnings(obj.warnings)\n      }\n\n      if (obj.errors.length > 0) {\n        // When there is a compilation error coming from SSR we have to reload the page on next successful compile\n        if (obj.action === 'sync') {\n          hadRuntimeError = true\n        }\n        handleErrors(obj.errors)\n        break\n      }\n\n      handleSuccess()\n      break\n    }\n    default: {\n      if (customHmrEventHandler) {\n        customHmrEventHandler(obj)\n        break\n      }\n      break\n    }\n  }\n}",
      "language": "javascript",
      "code": "function processMessage (e) {\n  const obj = JSON.parse(e.data)\n  switch (obj.action) {\n    case 'building': {\n      console.log(\n        '[HMR] bundle ' + (obj.name ? \"'\" + obj.name + \"' \" : '') +\n        'rebuilding'\n      )\n      break\n    }\n    case 'built':\n    case 'sync': {\n      clearOutdatedErrors()\n\n      if (obj.hash) {\n        handleAvailableHash(obj.hash)\n      }\n\n      if (obj.warnings.length > 0) {\n        handleWarnings(obj.warnings)\n      }\n\n      if (obj.errors.length > 0) {\n        // When there is a compilation error coming from SSR we have to reload the page on next successful compile\n        if (obj.action === 'sync') {\n          hadRuntimeError = true\n        }\n        handleErrors(obj.errors)\n        break\n      }\n\n      handleSuccess()\n      break\n    }\n    default: {\n      if (customHmrEventHandler) {\n        customHmrEventHandler(obj)\n        break\n      }\n      break\n    }\n  }\n}",
      "code_tokens": [
        "function",
        "processMessage",
        "(",
        "e",
        ")",
        "{",
        "const",
        "obj",
        "=",
        "JSON",
        ".",
        "parse",
        "(",
        "e",
        ".",
        "data",
        ")",
        "switch",
        "(",
        "obj",
        ".",
        "action",
        ")",
        "{",
        "case",
        "'building'",
        ":",
        "{",
        "console",
        ".",
        "log",
        "(",
        "'[HMR] bundle '",
        "+",
        "(",
        "obj",
        ".",
        "name",
        "?",
        "\"'\"",
        "+",
        "obj",
        ".",
        "name",
        "+",
        "\"' \"",
        ":",
        "''",
        ")",
        "+",
        "'rebuilding'",
        ")",
        "break",
        "}",
        "case",
        "'built'",
        ":",
        "case",
        "'sync'",
        ":",
        "{",
        "clearOutdatedErrors",
        "(",
        ")",
        "if",
        "(",
        "obj",
        ".",
        "hash",
        ")",
        "{",
        "handleAvailableHash",
        "(",
        "obj",
        ".",
        "hash",
        ")",
        "}",
        "if",
        "(",
        "obj",
        ".",
        "warnings",
        ".",
        "length",
        ">",
        "0",
        ")",
        "{",
        "handleWarnings",
        "(",
        "obj",
        ".",
        "warnings",
        ")",
        "}",
        "if",
        "(",
        "obj",
        ".",
        "errors",
        ".",
        "length",
        ">",
        "0",
        ")",
        "{",
        "// When there is a compilation error coming from SSR we have to reload the page on next successful compile",
        "if",
        "(",
        "obj",
        ".",
        "action",
        "===",
        "'sync'",
        ")",
        "{",
        "hadRuntimeError",
        "=",
        "true",
        "}",
        "handleErrors",
        "(",
        "obj",
        ".",
        "errors",
        ")",
        "break",
        "}",
        "handleSuccess",
        "(",
        ")",
        "break",
        "}",
        "default",
        ":",
        "{",
        "if",
        "(",
        "customHmrEventHandler",
        ")",
        "{",
        "customHmrEventHandler",
        "(",
        "obj",
        ")",
        "break",
        "}",
        "break",
        "}",
        "}",
        "}"
      ],
      "docstring": "Handle messages from the server.",
      "docstring_tokens": [
        "Handle",
        "messages",
        "from",
        "the",
        "server",
        "."
      ],
      "sha": "3641f79a0f68d1093cc238b50b8d47eec1c25cfd",
      "url": "https://github.com/zeit/next.js/blob/3641f79a0f68d1093cc238b50b8d47eec1c25cfd/packages/next/client/dev-error-overlay/hot-dev-client.js#L202-L244"
    },
    "target": "Handle messages from the server .",
    "arguments": [
      [
        "function processMessage ( e ) { const obj = JSON . parse ( e . data ) switch ( obj . action ) { case 'building' : { console . log ( '[HMR] bundle ' + ( obj . name ? \"'\" + obj . name + \"' \" : '' ) + 'rebuilding' ) break } case 'built' : case 'sync' : { clearOutdatedErrors ( ) if ( obj . hash ) { handleAvailableHash ( obj . hash ) } if ( obj . warnings . length > 0 ) { handleWarnings ( obj . warnings ) } if ( obj . errors . length > 0 ) { // When there is a compilation error coming from SSR we have to reload the page on next successful compile if ( obj . action === 'sync' ) { hadRuntimeError = true } handleErrors ( obj . errors ) break } handleSuccess ( ) break } default : { if ( customHmrEventHandler ) { customHmrEventHandler ( obj ) break } break } } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " )\n``` ```\n\nPlease note that you need to modify the code to suit your needs, this is a very basic example. Also, you might need to add some error handling and other features as per your requirements.\n\nYou can test this by adding the following script to your index.html file:\n\n```html\n< script > window. __REACT_HOT_LOADER__ = window. __REACT_HOT_LOADER__ || { ; [ 'app' ] : { enable : true } } ; < / script >\n```\n\nThis will enable the Hot Module Replacement feature for your React application. After this, you can modify your code and see the changes being applied dynamically. \n\nPlease note that the above example is for a basic understanding and might need modifications according to your project's structure and requirements. Also, this example assumes that you are using React in your application. If you are using a different framework or library, you might need to modify the code accordingly. \n\nHope this helps! Let me know if you have any questions or need further clarification. \n\nHere's a brief explanation of the code:\n\n1.  `window.__REACT_HOT_LOADER__`: This is a global variable that we're setting up to enable Hot Module Replacement. We"
      ]
    ],
    "filtered_resps": [
      " )\n``` ```\n\nPlease note that you need to modify the code to suit your needs, this is a very basic example. Also, you might need to add some error handling and other features as per your requirements.\n\nYou can test this by adding the following script to your index.html file:\n\n```html\n< script > window. __REACT_HOT_LOADER__ = window. __REACT_HOT_LOADER__ || { ; [ 'app' ] : { enable : true } } ; < / script >\n```\n\nThis will enable the Hot Module Replacement feature for your React application. After this, you can modify your code and see the changes being applied dynamically. \n\nPlease note that the above example is for a basic understanding and might need modifications according to your project's structure and requirements. Also, this example assumes that you are using React in your application. If you are using a different framework or library, you might need to modify the code accordingly. \n\nHope this helps! Let me know if you have any questions or need further clarification. \n\nHere's a brief explanation of the code:\n\n1.  `window.__REACT_HOT_LOADER__`: This is a global variable that we're setting up to enable Hot Module Replacement. We"
    ],
    "smoothed_bleu_4": 0.45174283759667133
  },
  {
    "doc_id": 8,
    "doc": {
      "id": 8,
      "repo": "zeit/next.js",
      "path": "packages/next/client/dev-error-overlay/hot-dev-client.js",
      "func_name": "tryApplyUpdates",
      "original_string": "async function tryApplyUpdates (onHotUpdateSuccess) {\n  if (!module.hot) {\n    // HotModuleReplacementPlugin is not in Webpack configuration.\n    console.error('HotModuleReplacementPlugin is not in Webpack configuration.')\n    // window.location.reload();\n    return\n  }\n\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\n    return\n  }\n\n  function handleApplyUpdates (err, updatedModules) {\n    if (err || hadRuntimeError) {\n      if (err) {\n        console.warn('Error while applying updates, reloading page', err)\n      }\n      if (hadRuntimeError) {\n        console.warn('Had runtime error previously, reloading page')\n      }\n      window.location.reload()\n      return\n    }\n\n    if (typeof onHotUpdateSuccess === 'function') {\n      // Maybe we want to do something.\n      onHotUpdateSuccess()\n    }\n\n    if (isUpdateAvailable()) {\n      // While we were updating, there was a new update! Do it again.\n      tryApplyUpdates()\n    }\n  }\n\n  // https://webpack.github.io/docs/hot-module-replacement.html#check\n  try {\n    const updatedModules = await module.hot.check(/* autoApply */ {\n      ignoreUnaccepted: true\n    })\n    if (updatedModules) {\n      handleApplyUpdates(null, updatedModules)\n    }\n  } catch (err) {\n    handleApplyUpdates(err, null)\n  }\n}",
      "language": "javascript",
      "code": "async function tryApplyUpdates (onHotUpdateSuccess) {\n  if (!module.hot) {\n    // HotModuleReplacementPlugin is not in Webpack configuration.\n    console.error('HotModuleReplacementPlugin is not in Webpack configuration.')\n    // window.location.reload();\n    return\n  }\n\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\n    return\n  }\n\n  function handleApplyUpdates (err, updatedModules) {\n    if (err || hadRuntimeError) {\n      if (err) {\n        console.warn('Error while applying updates, reloading page', err)\n      }\n      if (hadRuntimeError) {\n        console.warn('Had runtime error previously, reloading page')\n      }\n      window.location.reload()\n      return\n    }\n\n    if (typeof onHotUpdateSuccess === 'function') {\n      // Maybe we want to do something.\n      onHotUpdateSuccess()\n    }\n\n    if (isUpdateAvailable()) {\n      // While we were updating, there was a new update! Do it again.\n      tryApplyUpdates()\n    }\n  }\n\n  // https://webpack.github.io/docs/hot-module-replacement.html#check\n  try {\n    const updatedModules = await module.hot.check(/* autoApply */ {\n      ignoreUnaccepted: true\n    })\n    if (updatedModules) {\n      handleApplyUpdates(null, updatedModules)\n    }\n  } catch (err) {\n    handleApplyUpdates(err, null)\n  }\n}",
      "code_tokens": [
        "async",
        "function",
        "tryApplyUpdates",
        "(",
        "onHotUpdateSuccess",
        ")",
        "{",
        "if",
        "(",
        "!",
        "module",
        ".",
        "hot",
        ")",
        "{",
        "// HotModuleReplacementPlugin is not in Webpack configuration.",
        "console",
        ".",
        "error",
        "(",
        "'HotModuleReplacementPlugin is not in Webpack configuration.'",
        ")",
        "// window.location.reload();",
        "return",
        "}",
        "if",
        "(",
        "!",
        "isUpdateAvailable",
        "(",
        ")",
        "||",
        "!",
        "canApplyUpdates",
        "(",
        ")",
        ")",
        "{",
        "return",
        "}",
        "function",
        "handleApplyUpdates",
        "(",
        "err",
        ",",
        "updatedModules",
        ")",
        "{",
        "if",
        "(",
        "err",
        "||",
        "hadRuntimeError",
        ")",
        "{",
        "if",
        "(",
        "err",
        ")",
        "{",
        "console",
        ".",
        "warn",
        "(",
        "'Error while applying updates, reloading page'",
        ",",
        "err",
        ")",
        "}",
        "if",
        "(",
        "hadRuntimeError",
        ")",
        "{",
        "console",
        ".",
        "warn",
        "(",
        "'Had runtime error previously, reloading page'",
        ")",
        "}",
        "window",
        ".",
        "location",
        ".",
        "reload",
        "(",
        ")",
        "return",
        "}",
        "if",
        "(",
        "typeof",
        "onHotUpdateSuccess",
        "===",
        "'function'",
        ")",
        "{",
        "// Maybe we want to do something.",
        "onHotUpdateSuccess",
        "(",
        ")",
        "}",
        "if",
        "(",
        "isUpdateAvailable",
        "(",
        ")",
        ")",
        "{",
        "// While we were updating, there was a new update! Do it again.",
        "tryApplyUpdates",
        "(",
        ")",
        "}",
        "}",
        "// https://webpack.github.io/docs/hot-module-replacement.html#check",
        "try",
        "{",
        "const",
        "updatedModules",
        "=",
        "await",
        "module",
        ".",
        "hot",
        ".",
        "check",
        "(",
        "/* autoApply */",
        "{",
        "ignoreUnaccepted",
        ":",
        "true",
        "}",
        ")",
        "if",
        "(",
        "updatedModules",
        ")",
        "{",
        "handleApplyUpdates",
        "(",
        "null",
        ",",
        "updatedModules",
        ")",
        "}",
        "}",
        "catch",
        "(",
        "err",
        ")",
        "{",
        "handleApplyUpdates",
        "(",
        "err",
        ",",
        "null",
        ")",
        "}",
        "}"
      ],
      "docstring": "Attempt to update code on the fly, fall back to a hard reload.",
      "docstring_tokens": [
        "Attempt",
        "to",
        "update",
        "code",
        "on",
        "the",
        "fly",
        "fall",
        "back",
        "to",
        "a",
        "hard",
        "reload",
        "."
      ],
      "sha": "3641f79a0f68d1093cc238b50b8d47eec1c25cfd",
      "url": "https://github.com/zeit/next.js/blob/3641f79a0f68d1093cc238b50b8d47eec1c25cfd/packages/next/client/dev-error-overlay/hot-dev-client.js#L260-L306"
    },
    "target": "Attempt to update code on the fly fall back to a hard reload .",
    "arguments": [
      [
        "async function tryApplyUpdates ( onHotUpdateSuccess ) { if ( ! module . hot ) { // HotModuleReplacementPlugin is not in Webpack configuration. console . error ( 'HotModuleReplacementPlugin is not in Webpack configuration.' ) // window.location.reload(); return } if ( ! isUpdateAvailable ( ) || ! canApplyUpdates ( ) ) { return } function handleApplyUpdates ( err , updatedModules ) { if ( err || hadRuntimeError ) { if ( err ) { console . warn ( 'Error while applying updates, reloading page' , err ) } if ( hadRuntimeError ) { console . warn ( 'Had runtime error previously, reloading page' ) } window . location . reload ( ) return } if ( typeof onHotUpdateSuccess === 'function' ) { // Maybe we want to do something. onHotUpdateSuccess ( ) } if ( isUpdateAvailable ( ) ) { // While we were updating, there was a new update! Do it again. tryApplyUpdates ( ) } } // https://webpack.github.io/docs/hot-module-replacement.html#check try { const updatedModules = await module . hot . check ( /* autoApply */ { ignoreUnaccepted : true } ) if ( updatedModules ) { handleApplyUpdates ( null , updatedModules ) } } catch ( err ) { handleApplyUpdates ( err , null ) } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
      ]
    ],
    "filtered_resps": [
      ",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,"
    ],
    "smoothed_bleu_4": 4.900081986273163e-78
  },
  {
    "doc_id": 9,
    "doc": {
      "id": 9,
      "repo": "zeit/next.js",
      "path": "packages/next/client/amp-dev.js",
      "func_name": "tryApplyUpdates",
      "original_string": "async function tryApplyUpdates () {\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\n    return\n  }\n  try {\n    const res = await fetch(`${hotUpdatePath}${curHash}.hot-update.json`)\n    const data = await res.json()\n    const curPage = page === '/' ? 'index' : page\n    const pageUpdated = Object.keys(data.c)\n      .some(mod => {\n        return (\n          mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`) !== -1 ||\n          mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`.replace(/\\//g, '\\\\')) !== -1\n        )\n      })\n\n    if (pageUpdated) {\n      document.location.reload(true)\n    } else {\n      curHash = mostRecentHash\n    }\n  } catch (err) {\n    console.error('Error occurred checking for update', err)\n    document.location.reload(true)\n  }\n}",
      "language": "javascript",
      "code": "async function tryApplyUpdates () {\n  if (!isUpdateAvailable() || !canApplyUpdates()) {\n    return\n  }\n  try {\n    const res = await fetch(`${hotUpdatePath}${curHash}.hot-update.json`)\n    const data = await res.json()\n    const curPage = page === '/' ? 'index' : page\n    const pageUpdated = Object.keys(data.c)\n      .some(mod => {\n        return (\n          mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`) !== -1 ||\n          mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`.replace(/\\//g, '\\\\')) !== -1\n        )\n      })\n\n    if (pageUpdated) {\n      document.location.reload(true)\n    } else {\n      curHash = mostRecentHash\n    }\n  } catch (err) {\n    console.error('Error occurred checking for update', err)\n    document.location.reload(true)\n  }\n}",
      "code_tokens": [
        "async",
        "function",
        "tryApplyUpdates",
        "(",
        ")",
        "{",
        "if",
        "(",
        "!",
        "isUpdateAvailable",
        "(",
        ")",
        "||",
        "!",
        "canApplyUpdates",
        "(",
        ")",
        ")",
        "{",
        "return",
        "}",
        "try",
        "{",
        "const",
        "res",
        "=",
        "await",
        "fetch",
        "(",
        "`",
        "${",
        "hotUpdatePath",
        "}",
        "${",
        "curHash",
        "}",
        "`",
        ")",
        "const",
        "data",
        "=",
        "await",
        "res",
        ".",
        "json",
        "(",
        ")",
        "const",
        "curPage",
        "=",
        "page",
        "===",
        "'/'",
        "?",
        "'index'",
        ":",
        "page",
        "const",
        "pageUpdated",
        "=",
        "Object",
        ".",
        "keys",
        "(",
        "data",
        ".",
        "c",
        ")",
        ".",
        "some",
        "(",
        "mod",
        "=>",
        "{",
        "return",
        "(",
        "mod",
        ".",
        "indexOf",
        "(",
        "`",
        "${",
        "curPage",
        ".",
        "substr",
        "(",
        "0",
        ",",
        "1",
        ")",
        "===",
        "'/'",
        "?",
        "curPage",
        ":",
        "`",
        "${",
        "curPage",
        "}",
        "`",
        "}",
        "`",
        ")",
        "!==",
        "-",
        "1",
        "||",
        "mod",
        ".",
        "indexOf",
        "(",
        "`",
        "${",
        "curPage",
        ".",
        "substr",
        "(",
        "0",
        ",",
        "1",
        ")",
        "===",
        "'/'",
        "?",
        "curPage",
        ":",
        "`",
        "${",
        "curPage",
        "}",
        "`",
        "}",
        "`",
        ".",
        "replace",
        "(",
        "/",
        "\\/",
        "/",
        "g",
        ",",
        "'\\\\'",
        ")",
        ")",
        "!==",
        "-",
        "1",
        ")",
        "}",
        ")",
        "if",
        "(",
        "pageUpdated",
        ")",
        "{",
        "document",
        ".",
        "location",
        ".",
        "reload",
        "(",
        "true",
        ")",
        "}",
        "else",
        "{",
        "curHash",
        "=",
        "mostRecentHash",
        "}",
        "}",
        "catch",
        "(",
        "err",
        ")",
        "{",
        "console",
        ".",
        "error",
        "(",
        "'Error occurred checking for update'",
        ",",
        "err",
        ")",
        "document",
        ".",
        "location",
        ".",
        "reload",
        "(",
        "true",
        ")",
        "}",
        "}"
      ],
      "docstring": "This function reads code updates on the fly and hard reloads the page when it has changed.",
      "docstring_tokens": [
        "This",
        "function",
        "reads",
        "code",
        "updates",
        "on",
        "the",
        "fly",
        "and",
        "hard",
        "reloads",
        "the",
        "page",
        "when",
        "it",
        "has",
        "changed",
        "."
      ],
      "sha": "3641f79a0f68d1093cc238b50b8d47eec1c25cfd",
      "url": "https://github.com/zeit/next.js/blob/3641f79a0f68d1093cc238b50b8d47eec1c25cfd/packages/next/client/amp-dev.js#L34-L59"
    },
    "target": "This function reads code updates on the fly and hard reloads the page when it has changed .",
    "arguments": [
      [
        "async function tryApplyUpdates ( ) { if ( ! isUpdateAvailable ( ) || ! canApplyUpdates ( ) ) { return } try { const res = await fetch ( ` ${ hotUpdatePath } ${ curHash } ` ) const data = await res . json ( ) const curPage = page === '/' ? 'index' : page const pageUpdated = Object . keys ( data . c ) . some ( mod => { return ( mod . indexOf ( ` ${ curPage . substr ( 0 , 1 ) === '/' ? curPage : ` ${ curPage } ` } ` ) !== - 1 || mod . indexOf ( ` ${ curPage . substr ( 0 , 1 ) === '/' ? curPage : ` ${ curPage } ` } ` . replace ( / \\/ / g , '\\\\' ) ) !== - 1 ) } ) if ( pageUpdated ) { document . location . reload ( true ) } else { curHash = mostRecentHash } } catch ( err ) { console . error ( 'Error occurred checking for update' , err ) document . location . reload ( true ) } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }\n```\n\nThis code will be executed when the user interacts with the page. The `tryApplyUpdates` function checks if there is an update available and if the update can be applied. If both conditions are met, it attempts to fetch the update from the specified URL. The fetched data is then checked to see if any of the modules have been updated for the current page. If any updates are found, the page is reloaded. If no updates are found, the current hash is updated to the most recent hash. If an error occurs during the update check, the page is reloaded.\n\nThe `isUpdateAvailable` and `canApplyUpdates` functions are not shown in this code snippet, but they are likely used to determine if an update is available and if the update can be applied, respectively. The `mostRecentHash` variable is also not shown, but it is likely used to keep track of the most recent hash value.\n\nOverall, this code snippet demonstrates how to implement a simple update mechanism using JavaScript and the Fetch API. It checks for updates in the background and reloads the page if an update is found. \n\n### Step 6: Integrate with the rest of the application\n\nTo integrate this code with the rest"
      ]
    ],
    "filtered_resps": [
      " }\n```\n\nThis code will be executed when the user interacts with the page. The `tryApplyUpdates` function checks if there is an update available and if the update can be applied. If both conditions are met, it attempts to fetch the update from the specified URL. The fetched data is then checked to see if any of the modules have been updated for the current page. If any updates are found, the page is reloaded. If no updates are found, the current hash is updated to the most recent hash. If an error occurs during the update check, the page is reloaded.\n\nThe `isUpdateAvailable` and `canApplyUpdates` functions are not shown in this code snippet, but they are likely used to determine if an update is available and if the update can be applied, respectively. The `mostRecentHash` variable is also not shown, but it is likely used to keep track of the most recent hash value.\n\nOverall, this code snippet demonstrates how to implement a simple update mechanism using JavaScript and the Fetch API. It checks for updates in the background and reloads the page if an update is found. \n\n### Step 6: Integrate with the rest of the application\n\nTo integrate this code with the rest"
    ],
    "smoothed_bleu_4": 1.2278054543354904
  },
  {
    "doc_id": 10,
    "doc": {
      "id": 10,
      "repo": "zeit/next.js",
      "path": "packages/next/client/dev-error-overlay/format-webpack-messages.js",
      "func_name": "formatMessage",
      "original_string": "function formatMessage (message, isError) {\n  let lines = message.split('\\n')\n\n  // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n  lines = lines.filter(line => !/Module [A-z ]+\\(from/.test(line))\n\n  // Transform parsing error into syntax error\n  // TODO: move this to our ESLint formatter?\n  lines = lines.map(line => {\n    const parsingError = /Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$/.exec(\n      line\n    )\n    if (!parsingError) {\n      return line\n    }\n    const [, errorLine, errorColumn, errorMessage] = parsingError\n    return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`\n  })\n\n  message = lines.join('\\n')\n  // Smoosh syntax errors (commonly found in CSS)\n  message = message.replace(\n    /SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n/g,\n    `${friendlySyntaxErrorLabel} $3 ($1:$2)\\n`\n  )\n  // Remove columns from ESLint formatter output (we added these for more\n  // accurate syntax errors)\n  message = message.replace(/Line (\\d+):\\d+:/g, 'Line $1:')\n  // Clean up export errors\n  message = message.replace(\n    /^.*export '(.+?)' was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$1' is not exported from '$2'.`\n  )\n  message = message.replace(\n    /^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$2' does not contain a default export (imported as '$1').`\n  )\n  message = message.replace(\n    /^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`\n  )\n  lines = message.split('\\n')\n\n  // Remove leading newline\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1)\n  }\n  // Clean up file name\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1')\n\n  // Cleans up verbose \"module not found\" messages for files and packages.\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [\n      lines[0],\n      lines[1]\n        .replace('Error: ', '')\n        .replace('Module not found: Cannot find file:', 'Cannot find file:')\n    ]\n  }\n\n  message = lines.join('\\n')\n  // Internal stacks are generally useless so we strip them... with the\n  // exception of stacks containing `webpack:` because they're normally\n  // from user code generated by Webpack. For more information see\n  // https://github.com/facebook/create-react-app/pull/1050\n  message = message.replace(\n    /^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm,\n    ''\n  ) // at ... ...:x:y\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, '') // at <anonymous>\n  lines = message.split('\\n')\n\n  // Remove duplicated newlines\n  lines = lines.filter(\n    (line, index, arr) =>\n      index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()\n  )\n\n  // Reassemble the message\n  message = lines.join('\\n')\n  return message.trim()\n}",
      "language": "javascript",
      "code": "function formatMessage (message, isError) {\n  let lines = message.split('\\n')\n\n  // Strip Webpack-added headers off errors/warnings\n  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js\n  lines = lines.filter(line => !/Module [A-z ]+\\(from/.test(line))\n\n  // Transform parsing error into syntax error\n  // TODO: move this to our ESLint formatter?\n  lines = lines.map(line => {\n    const parsingError = /Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$/.exec(\n      line\n    )\n    if (!parsingError) {\n      return line\n    }\n    const [, errorLine, errorColumn, errorMessage] = parsingError\n    return `${friendlySyntaxErrorLabel} ${errorMessage} (${errorLine}:${errorColumn})`\n  })\n\n  message = lines.join('\\n')\n  // Smoosh syntax errors (commonly found in CSS)\n  message = message.replace(\n    /SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n/g,\n    `${friendlySyntaxErrorLabel} $3 ($1:$2)\\n`\n  )\n  // Remove columns from ESLint formatter output (we added these for more\n  // accurate syntax errors)\n  message = message.replace(/Line (\\d+):\\d+:/g, 'Line $1:')\n  // Clean up export errors\n  message = message.replace(\n    /^.*export '(.+?)' was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$1' is not exported from '$2'.`\n  )\n  message = message.replace(\n    /^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$2' does not contain a default export (imported as '$1').`\n  )\n  message = message.replace(\n    /^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$/gm,\n    `Attempted import error: '$1' is not exported from '$3' (imported as '$2').`\n  )\n  lines = message.split('\\n')\n\n  // Remove leading newline\n  if (lines.length > 2 && lines[1].trim() === '') {\n    lines.splice(1, 1)\n  }\n  // Clean up file name\n  lines[0] = lines[0].replace(/^(.*) \\d+:\\d+-\\d+$/, '$1')\n\n  // Cleans up verbose \"module not found\" messages for files and packages.\n  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {\n    lines = [\n      lines[0],\n      lines[1]\n        .replace('Error: ', '')\n        .replace('Module not found: Cannot find file:', 'Cannot find file:')\n    ]\n  }\n\n  message = lines.join('\\n')\n  // Internal stacks are generally useless so we strip them... with the\n  // exception of stacks containing `webpack:` because they're normally\n  // from user code generated by Webpack. For more information see\n  // https://github.com/facebook/create-react-app/pull/1050\n  message = message.replace(\n    /^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm,\n    ''\n  ) // at ... ...:x:y\n  message = message.replace(/^\\s*at\\s<anonymous>(\\n|$)/gm, '') // at <anonymous>\n  lines = message.split('\\n')\n\n  // Remove duplicated newlines\n  lines = lines.filter(\n    (line, index, arr) =>\n      index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()\n  )\n\n  // Reassemble the message\n  message = lines.join('\\n')\n  return message.trim()\n}",
      "code_tokens": [
        "function",
        "formatMessage",
        "(",
        "message",
        ",",
        "isError",
        ")",
        "{",
        "let",
        "lines",
        "=",
        "message",
        ".",
        "split",
        "(",
        "'\\n'",
        ")",
        "// Strip Webpack-added headers off errors/warnings",
        "// https://github.com/webpack/webpack/blob/master/lib/ModuleError.js",
        "lines",
        "=",
        "lines",
        ".",
        "filter",
        "(",
        "line",
        "=>",
        "!",
        "/",
        "Module [A-z ]+\\(from",
        "/",
        ".",
        "test",
        "(",
        "line",
        ")",
        ")",
        "// Transform parsing error into syntax error",
        "// TODO: move this to our ESLint formatter?",
        "lines",
        "=",
        "lines",
        ".",
        "map",
        "(",
        "line",
        "=>",
        "{",
        "const",
        "parsingError",
        "=",
        "/",
        "Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$",
        "/",
        ".",
        "exec",
        "(",
        "line",
        ")",
        "if",
        "(",
        "!",
        "parsingError",
        ")",
        "{",
        "return",
        "line",
        "}",
        "const",
        "[",
        ",",
        "errorLine",
        ",",
        "errorColumn",
        ",",
        "errorMessage",
        "]",
        "=",
        "parsingError",
        "return",
        "`",
        "${",
        "friendlySyntaxErrorLabel",
        "}",
        "${",
        "errorMessage",
        "}",
        "${",
        "errorLine",
        "}",
        "${",
        "errorColumn",
        "}",
        "`",
        "}",
        ")",
        "message",
        "=",
        "lines",
        ".",
        "join",
        "(",
        "'\\n'",
        ")",
        "// Smoosh syntax errors (commonly found in CSS)",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n",
        "/",
        "g",
        ",",
        "`",
        "${",
        "friendlySyntaxErrorLabel",
        "}",
        "\\n",
        "`",
        ")",
        "// Remove columns from ESLint formatter output (we added these for more",
        "// accurate syntax errors)",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "Line (\\d+):\\d+:",
        "/",
        "g",
        ",",
        "'Line $1:'",
        ")",
        "// Clean up export errors",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "^.*export '(.+?)' was not found in '(.+?)'.*$",
        "/",
        "gm",
        ",",
        "`",
        "`",
        ")",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$",
        "/",
        "gm",
        ",",
        "`",
        "`",
        ")",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$",
        "/",
        "gm",
        ",",
        "`",
        "`",
        ")",
        "lines",
        "=",
        "message",
        ".",
        "split",
        "(",
        "'\\n'",
        ")",
        "// Remove leading newline",
        "if",
        "(",
        "lines",
        ".",
        "length",
        ">",
        "2",
        "&&",
        "lines",
        "[",
        "1",
        "]",
        ".",
        "trim",
        "(",
        ")",
        "===",
        "''",
        ")",
        "{",
        "lines",
        ".",
        "splice",
        "(",
        "1",
        ",",
        "1",
        ")",
        "}",
        "// Clean up file name",
        "lines",
        "[",
        "0",
        "]",
        "=",
        "lines",
        "[",
        "0",
        "]",
        ".",
        "replace",
        "(",
        "/",
        "^(.*) \\d+:\\d+-\\d+$",
        "/",
        ",",
        "'$1'",
        ")",
        "// Cleans up verbose \"module not found\" messages for files and packages.",
        "if",
        "(",
        "lines",
        "[",
        "1",
        "]",
        "&&",
        "lines",
        "[",
        "1",
        "]",
        ".",
        "indexOf",
        "(",
        "'Module not found: '",
        ")",
        "===",
        "0",
        ")",
        "{",
        "lines",
        "=",
        "[",
        "lines",
        "[",
        "0",
        "]",
        ",",
        "lines",
        "[",
        "1",
        "]",
        ".",
        "replace",
        "(",
        "'Error: '",
        ",",
        "''",
        ")",
        ".",
        "replace",
        "(",
        "'Module not found: Cannot find file:'",
        ",",
        "'Cannot find file:'",
        ")",
        "]",
        "}",
        "message",
        "=",
        "lines",
        ".",
        "join",
        "(",
        "'\\n'",
        ")",
        "// Internal stacks are generally useless so we strip them... with the",
        "// exception of stacks containing `webpack:` because they're normally",
        "// from user code generated by Webpack. For more information see",
        "// https://github.com/facebook/create-react-app/pull/1050",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)",
        "/",
        "gm",
        ",",
        "''",
        ")",
        "// at ... ...:x:y",
        "message",
        "=",
        "message",
        ".",
        "replace",
        "(",
        "/",
        "^\\s*at\\s<anonymous>(\\n|$)",
        "/",
        "gm",
        ",",
        "''",
        ")",
        "// at <anonymous>",
        "lines",
        "=",
        "message",
        ".",
        "split",
        "(",
        "'\\n'",
        ")",
        "// Remove duplicated newlines",
        "lines",
        "=",
        "lines",
        ".",
        "filter",
        "(",
        "(",
        "line",
        ",",
        "index",
        ",",
        "arr",
        ")",
        "=>",
        "index",
        "===",
        "0",
        "||",
        "line",
        ".",
        "trim",
        "(",
        ")",
        "!==",
        "''",
        "||",
        "line",
        ".",
        "trim",
        "(",
        ")",
        "!==",
        "arr",
        "[",
        "index",
        "-",
        "1",
        "]",
        ".",
        "trim",
        "(",
        ")",
        ")",
        "// Reassemble the message",
        "message",
        "=",
        "lines",
        ".",
        "join",
        "(",
        "'\\n'",
        ")",
        "return",
        "message",
        ".",
        "trim",
        "(",
        ")",
        "}"
      ],
      "docstring": "Cleans up webpack error messages. eslint-disable-next-line no-unused-vars",
      "docstring_tokens": [
        "Cleans",
        "up",
        "webpack",
        "error",
        "messages",
        ".",
        "eslint",
        "-",
        "disable",
        "-",
        "next",
        "-",
        "line",
        "no",
        "-",
        "unused",
        "-",
        "vars"
      ],
      "sha": "3641f79a0f68d1093cc238b50b8d47eec1c25cfd",
      "url": "https://github.com/zeit/next.js/blob/3641f79a0f68d1093cc238b50b8d47eec1c25cfd/packages/next/client/dev-error-overlay/format-webpack-messages.js#L37-L119"
    },
    "target": "Cleans up webpack error messages . eslint - disable - next - line no - unused - vars",
    "arguments": [
      [
        "function formatMessage ( message , isError ) { let lines = message . split ( '\\n' ) // Strip Webpack-added headers off errors/warnings // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js lines = lines . filter ( line => ! / Module [A-z ]+\\(from / . test ( line ) ) // Transform parsing error into syntax error // TODO: move this to our ESLint formatter? lines = lines . map ( line => { const parsingError = / Line (\\d+):(?:(\\d+):)?\\s*Parsing error: (.+)$ / . exec ( line ) if ( ! parsingError ) { return line } const [ , errorLine , errorColumn , errorMessage ] = parsingError return ` ${ friendlySyntaxErrorLabel } ${ errorMessage } ${ errorLine } ${ errorColumn } ` } ) message = lines . join ( '\\n' ) // Smoosh syntax errors (commonly found in CSS) message = message . replace ( / SyntaxError\\s+\\((\\d+):(\\d+)\\)\\s*(.+?)\\n / g , ` ${ friendlySyntaxErrorLabel } \\n ` ) // Remove columns from ESLint formatter output (we added these for more // accurate syntax errors) message = message . replace ( / Line (\\d+):\\d+: / g , 'Line $1:' ) // Clean up export errors message = message . replace ( / ^.*export '(.+?)' was not found in '(.+?)'.*$ / gm , ` ` ) message = message . replace ( / ^.*export 'default' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$ / gm , ` ` ) message = message . replace ( / ^.*export '(.+?)' \\(imported as '(.+?)'\\) was not found in '(.+?)'.*$ / gm , ` ` ) lines = message . split ( '\\n' ) // Remove leading newline if ( lines . length > 2 && lines [ 1 ] . trim ( ) === '' ) { lines . splice ( 1 , 1 ) } // Clean up file name lines [ 0 ] = lines [ 0 ] . replace ( / ^(.*) \\d+:\\d+-\\d+$ / , '$1' ) // Cleans up verbose \"module not found\" messages for files and packages. if ( lines [ 1 ] && lines [ 1 ] . indexOf ( 'Module not found: ' ) === 0 ) { lines = [ lines [ 0 ] , lines [ 1 ] . replace ( 'Error: ' , '' ) . replace ( 'Module not found: Cannot find file:' , 'Cannot find file:' ) ] } message = lines . join ( '\\n' ) // Internal stacks are generally useless so we strip them... with the // exception of stacks containing `webpack:` because they're normally // from user code generated by Webpack. For more information see // https://github.com/facebook/create-react-app/pull/1050 message = message . replace ( / ^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$) / gm , '' ) // at ... ...:x:y message = message . replace ( / ^\\s*at\\s<anonymous>(\\n|$) / gm , '' ) // at <anonymous> lines = message . split ( '\\n' ) // Remove duplicated newlines lines = lines . filter ( ( line , index , arr ) => index === 0 || line . trim ( ) !== '' || line . trim ( ) !== arr [ index - 1 ] . trim ( ) ) // Reassemble the message message = lines . join ( '\\n' ) return message . trim ( ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " // eslint-disable-next-line import/no-default-export export default { formatMessage } }\n```\nLet me know if you need any changes. Let me know if you have any questions or need further assistance. \n\nAlso, please let me know if you would like me to refactor the code in any way, I'd be happy to help with that as well.  The code appears to be well-written, but I may be able to suggest some improvements or best practices to make it even more maintainable and efficient. \n\nLet me know if you'd like me to review the code and suggest any improvements. \n\nI can also help with testing and debugging the code if you'd like.  Please let me know how I can assist further. \n\nBest regards,\n[Your Name] \n\nPlease note that I'm assuming that the code is written in JavaScript and that it's using the ESLint formatter to format error messages. If this is not the case, please let me know and I'll be happy to adjust my response accordingly. \n\nAlso, please let me know if you'd like me to review the code in terms of accessibility, performance, or security as well. I'll be happy to provide feedback on those areas as well. \n\nLet me know"
      ]
    ],
    "filtered_resps": [
      " // eslint-disable-next-line import/no-default-export export default { formatMessage } }\n```\nLet me know if you need any changes. Let me know if you have any questions or need further assistance. \n\nAlso, please let me know if you would like me to refactor the code in any way, I'd be happy to help with that as well.  The code appears to be well-written, but I may be able to suggest some improvements or best practices to make it even more maintainable and efficient. \n\nLet me know if you'd like me to review the code and suggest any improvements. \n\nI can also help with testing and debugging the code if you'd like.  Please let me know how I can assist further. \n\nBest regards,\n[Your Name] \n\nPlease note that I'm assuming that the code is written in JavaScript and that it's using the ESLint formatter to format error messages. If this is not the case, please let me know and I'll be happy to adjust my response accordingly. \n\nAlso, please let me know if you'd like me to review the code in terms of accessibility, performance, or security as well. I'll be happy to provide feedback on those areas as well. \n\nLet me know"
    ],
    "smoothed_bleu_4": 3.2303099825472095
  },
  {
    "doc_id": 11,
    "doc": {
      "id": 11,
      "repo": "everitoken/evtjs",
      "path": "lib/format.js",
      "func_name": "UDecimalPad",
      "original_string": "function UDecimalPad(num, precision) {\n    var value = UDecimalString(num);\n    assert.equal(\"number\", typeof precision === 'undefined' ? 'undefined' : (0, _typeof3.default)(precision), \"precision\");\n\n    var part = value.split(\".\");\n\n    if (precision === 0 && part.length === 1) {\n        return part[0];\n    }\n\n    if (part.length === 1) {\n        return part[0] + '.' + \"0\".repeat(precision);\n    } else {\n        var pad = precision - part[1].length;\n        assert(pad >= 0, 'decimal \\'' + value + '\\' exceeds precision ' + precision);\n        return part[0] + '.' + part[1] + \"0\".repeat(pad);\n    }\n}",
      "language": "javascript",
      "code": "function UDecimalPad(num, precision) {\n    var value = UDecimalString(num);\n    assert.equal(\"number\", typeof precision === 'undefined' ? 'undefined' : (0, _typeof3.default)(precision), \"precision\");\n\n    var part = value.split(\".\");\n\n    if (precision === 0 && part.length === 1) {\n        return part[0];\n    }\n\n    if (part.length === 1) {\n        return part[0] + '.' + \"0\".repeat(precision);\n    } else {\n        var pad = precision - part[1].length;\n        assert(pad >= 0, 'decimal \\'' + value + '\\' exceeds precision ' + precision);\n        return part[0] + '.' + part[1] + \"0\".repeat(pad);\n    }\n}",
      "code_tokens": [
        "function",
        "UDecimalPad",
        "(",
        "num",
        ",",
        "precision",
        ")",
        "{",
        "var",
        "value",
        "=",
        "UDecimalString",
        "(",
        "num",
        ")",
        ";",
        "assert",
        ".",
        "equal",
        "(",
        "\"number\"",
        ",",
        "typeof",
        "precision",
        "===",
        "'undefined'",
        "?",
        "'undefined'",
        ":",
        "(",
        "0",
        ",",
        "_typeof3",
        ".",
        "default",
        ")",
        "(",
        "precision",
        ")",
        ",",
        "\"precision\"",
        ")",
        ";",
        "var",
        "part",
        "=",
        "value",
        ".",
        "split",
        "(",
        "\".\"",
        ")",
        ";",
        "if",
        "(",
        "precision",
        "===",
        "0",
        "&&",
        "part",
        ".",
        "length",
        "===",
        "1",
        ")",
        "{",
        "return",
        "part",
        "[",
        "0",
        "]",
        ";",
        "}",
        "if",
        "(",
        "part",
        ".",
        "length",
        "===",
        "1",
        ")",
        "{",
        "return",
        "part",
        "[",
        "0",
        "]",
        "+",
        "'.'",
        "+",
        "\"0\"",
        ".",
        "repeat",
        "(",
        "precision",
        ")",
        ";",
        "}",
        "else",
        "{",
        "var",
        "pad",
        "=",
        "precision",
        "-",
        "part",
        "[",
        "1",
        "]",
        ".",
        "length",
        ";",
        "assert",
        "(",
        "pad",
        ">=",
        "0",
        ",",
        "'decimal \\''",
        "+",
        "value",
        "+",
        "'\\' exceeds precision '",
        "+",
        "precision",
        ")",
        ";",
        "return",
        "part",
        "[",
        "0",
        "]",
        "+",
        "'.'",
        "+",
        "part",
        "[",
        "1",
        "]",
        "+",
        "\"0\"",
        ".",
        "repeat",
        "(",
        "pad",
        ")",
        ";",
        "}",
        "}"
      ],
      "docstring": "Ensure a fixed number of decimal places.  Safe for large numbers.\n\n@see ./format.test.js\n\n@example UDecimalPad(10.2, 3) === '10.200'\n\n@arg {number|string|object.toString} value\n@arg {number} precision - number of decimal places\n@return {string} decimal part is added and zero padded to match precision",
      "docstring_tokens": [
        "Ensure",
        "a",
        "fixed",
        "number",
        "of",
        "decimal",
        "places",
        ".",
        "Safe",
        "for",
        "large",
        "numbers",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/lib/format.js#L373-L390"
    },
    "target": "Ensure a fixed number of decimal places . Safe for large numbers .",
    "arguments": [
      [
        "function UDecimalPad ( num , precision ) { var value = UDecimalString ( num ) ; assert . equal ( \"number\" , typeof precision === 'undefined' ? 'undefined' : ( 0 , _typeof3 . default ) ( precision ) , \"precision\" ) ; var part = value . split ( \".\" ) ; if ( precision === 0 && part . length === 1 ) { return part [ 0 ] ; } if ( part . length === 1 ) { return part [ 0 ] + '.' + \"0\" . repeat ( precision ) ; } else { var pad = precision - part [ 1 ] . length ; assert ( pad >= 0 , 'decimal \\'' + value + '\\' exceeds precision ' + precision ) ; return part [ 0 ] + '.' + part [ 1 ] + \"0\" . repeat ( pad ) ; } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " exports. UDecimalPad = UDecimalPad ; }); }},{}],3:[function(require,module,exports){\nvar LINT = require('./LINT');\nvar UDecimal = require('./UDecimal');\nvar UNumeric = require('./UNumeric');\n\nfunction UDecimalCmp(a, b) {\n    return UDecimalCmpW(a, b);\n}\n\nfunction UDecimalCmpW(a, b) {\n    var pa = UDecimalGetPad(a);\n    var pb = UDecimalGetPad(b);\n    var max = pa > pb? pa : pb;\n    var lena = a.length;\n    var lenb = b.length;\n\n    if (lena > max) {\n        lena = max;\n    }\n\n    if (lenb > max) {\n        lenb = max;\n    }\n\n    for (var i = 0; i < max; i++) {\n        var n = i + 1;\n\n        if (n > lena) {\n            return LINT.LT;\n        }\n\n        if (n > lenb) {\n            return LINT.GT;\n        }\n\n        if (a[i] < b[i]) {\n            return LINT.LT;\n        }\n\n        if (a[i]"
      ]
    ],
    "filtered_resps": [
      " exports. UDecimalPad = UDecimalPad ; }); }},{}],3:[function(require,module,exports){\nvar LINT = require('./LINT');\nvar UDecimal = require('./UDecimal');\nvar UNumeric = require('./UNumeric');\n\nfunction UDecimalCmp(a, b) {\n    return UDecimalCmpW(a, b);\n}\n\nfunction UDecimalCmpW(a, b) {\n    var pa = UDecimalGetPad(a);\n    var pb = UDecimalGetPad(b);\n    var max = pa > pb? pa : pb;\n    var lena = a.length;\n    var lenb = b.length;\n\n    if (lena > max) {\n        lena = max;\n    }\n\n    if (lenb > max) {\n        lenb = max;\n    }\n\n    for (var i = 0; i < max; i++) {\n        var n = i + 1;\n\n        if (n > lena) {\n            return LINT.LT;\n        }\n\n        if (n > lenb) {\n            return LINT.GT;\n        }\n\n        if (a[i] < b[i]) {\n            return LINT.LT;\n        }\n\n        if (a[i]"
    ],
    "smoothed_bleu_4": 0.6223203464369531
  },
  {
    "doc_id": 12,
    "doc": {
      "id": 12,
      "repo": "everitoken/evtjs",
      "path": "src/evtLink.js",
      "func_name": "parseSegment",
      "original_string": "function parseSegment(buffer, offset) {\n    let typeKey = buffer[offset];\n\n    if (typeKey <= 20) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: No value for uint8\");\n        return { typeKey: typeKey, value: buffer[offset + 1], bufferLength: 2 };\n    }\n    if (typeKey <= 40) {\n        if (buffer[offset + 2] == undefined) throw new Error(\"ParseError: Incomplete value for uint16\");\n        return { typeKey: typeKey, value: buffer.readUInt16BE(offset + 1), bufferLength: 3 };\n    }\n    else if (typeKey <= 90) {\n        if (buffer[offset + 4] == undefined) throw new Error(\"ParseError: Incomplete value for uint32\");\n        return { typeKey: typeKey, value: buffer.readUInt32BE(offset + 1), bufferLength: 5 };\n    }\n    else if (typeKey <= 155) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for string\");\n        let len = buffer.readUInt8(offset + 1);\n        if (buffer[offset + 1 + len] == undefined) throw new Error(\"ParseError: Incomplete value for string\");\n        let value = buffer.toString(\"utf8\", offset + 2, offset + 2 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\n    }\n    else if (typeKey <= 165) {\n        if (buffer[offset + 16] == undefined) throw new Error(\"ParseError: Incomplete value for uuid\");\n        let len = 16;\n        let value = new Buffer(len);\n        buffer.copy(value, 0, offset + 1, offset + 1 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 1 + len };\n    }\n    else if (typeKey <= 180) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for byte string\");\n        let len = buffer.readUInt8(offset + 1);\n        if (buffer[offset + len + 1] == undefined) throw new Error(\"ParseError: Incomplete value for byte string\");\n        let value = new Buffer(len);\n        buffer.copy(value, 0, offset + 2, offset + 2 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\n    }\n    else {\n        throw new Error(\"typeKey not supported\");\n    }\n}",
      "language": "javascript",
      "code": "function parseSegment(buffer, offset) {\n    let typeKey = buffer[offset];\n\n    if (typeKey <= 20) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: No value for uint8\");\n        return { typeKey: typeKey, value: buffer[offset + 1], bufferLength: 2 };\n    }\n    if (typeKey <= 40) {\n        if (buffer[offset + 2] == undefined) throw new Error(\"ParseError: Incomplete value for uint16\");\n        return { typeKey: typeKey, value: buffer.readUInt16BE(offset + 1), bufferLength: 3 };\n    }\n    else if (typeKey <= 90) {\n        if (buffer[offset + 4] == undefined) throw new Error(\"ParseError: Incomplete value for uint32\");\n        return { typeKey: typeKey, value: buffer.readUInt32BE(offset + 1), bufferLength: 5 };\n    }\n    else if (typeKey <= 155) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for string\");\n        let len = buffer.readUInt8(offset + 1);\n        if (buffer[offset + 1 + len] == undefined) throw new Error(\"ParseError: Incomplete value for string\");\n        let value = buffer.toString(\"utf8\", offset + 2, offset + 2 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\n    }\n    else if (typeKey <= 165) {\n        if (buffer[offset + 16] == undefined) throw new Error(\"ParseError: Incomplete value for uuid\");\n        let len = 16;\n        let value = new Buffer(len);\n        buffer.copy(value, 0, offset + 1, offset + 1 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 1 + len };\n    }\n    else if (typeKey <= 180) {\n        if (buffer[offset + 1] == undefined) throw new Error(\"ParseError: Incomplete length value for byte string\");\n        let len = buffer.readUInt8(offset + 1);\n        if (buffer[offset + len + 1] == undefined) throw new Error(\"ParseError: Incomplete value for byte string\");\n        let value = new Buffer(len);\n        buffer.copy(value, 0, offset + 2, offset + 2 + len);\n\n        return { typeKey: typeKey, value: value, bufferLength: 2 + len };\n    }\n    else {\n        throw new Error(\"typeKey not supported\");\n    }\n}",
      "code_tokens": [
        "function",
        "parseSegment",
        "(",
        "buffer",
        ",",
        "offset",
        ")",
        "{",
        "let",
        "typeKey",
        "=",
        "buffer",
        "[",
        "offset",
        "]",
        ";",
        "if",
        "(",
        "typeKey",
        "<=",
        "20",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "1",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: No value for uint8\"",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "buffer",
        "[",
        "offset",
        "+",
        "1",
        "]",
        ",",
        "bufferLength",
        ":",
        "2",
        "}",
        ";",
        "}",
        "if",
        "(",
        "typeKey",
        "<=",
        "40",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "2",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete value for uint16\"",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "buffer",
        ".",
        "readUInt16BE",
        "(",
        "offset",
        "+",
        "1",
        ")",
        ",",
        "bufferLength",
        ":",
        "3",
        "}",
        ";",
        "}",
        "else",
        "if",
        "(",
        "typeKey",
        "<=",
        "90",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "4",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete value for uint32\"",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "buffer",
        ".",
        "readUInt32BE",
        "(",
        "offset",
        "+",
        "1",
        ")",
        ",",
        "bufferLength",
        ":",
        "5",
        "}",
        ";",
        "}",
        "else",
        "if",
        "(",
        "typeKey",
        "<=",
        "155",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "1",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete length value for string\"",
        ")",
        ";",
        "let",
        "len",
        "=",
        "buffer",
        ".",
        "readUInt8",
        "(",
        "offset",
        "+",
        "1",
        ")",
        ";",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "1",
        "+",
        "len",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete value for string\"",
        ")",
        ";",
        "let",
        "value",
        "=",
        "buffer",
        ".",
        "toString",
        "(",
        "\"utf8\"",
        ",",
        "offset",
        "+",
        "2",
        ",",
        "offset",
        "+",
        "2",
        "+",
        "len",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "value",
        ",",
        "bufferLength",
        ":",
        "2",
        "+",
        "len",
        "}",
        ";",
        "}",
        "else",
        "if",
        "(",
        "typeKey",
        "<=",
        "165",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "16",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete value for uuid\"",
        ")",
        ";",
        "let",
        "len",
        "=",
        "16",
        ";",
        "let",
        "value",
        "=",
        "new",
        "Buffer",
        "(",
        "len",
        ")",
        ";",
        "buffer",
        ".",
        "copy",
        "(",
        "value",
        ",",
        "0",
        ",",
        "offset",
        "+",
        "1",
        ",",
        "offset",
        "+",
        "1",
        "+",
        "len",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "value",
        ",",
        "bufferLength",
        ":",
        "1",
        "+",
        "len",
        "}",
        ";",
        "}",
        "else",
        "if",
        "(",
        "typeKey",
        "<=",
        "180",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "1",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete length value for byte string\"",
        ")",
        ";",
        "let",
        "len",
        "=",
        "buffer",
        ".",
        "readUInt8",
        "(",
        "offset",
        "+",
        "1",
        ")",
        ";",
        "if",
        "(",
        "buffer",
        "[",
        "offset",
        "+",
        "len",
        "+",
        "1",
        "]",
        "==",
        "undefined",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"ParseError: Incomplete value for byte string\"",
        ")",
        ";",
        "let",
        "value",
        "=",
        "new",
        "Buffer",
        "(",
        "len",
        ")",
        ";",
        "buffer",
        ".",
        "copy",
        "(",
        "value",
        ",",
        "0",
        ",",
        "offset",
        "+",
        "2",
        ",",
        "offset",
        "+",
        "2",
        "+",
        "len",
        ")",
        ";",
        "return",
        "{",
        "typeKey",
        ":",
        "typeKey",
        ",",
        "value",
        ":",
        "value",
        ",",
        "bufferLength",
        ":",
        "2",
        "+",
        "len",
        "}",
        ";",
        "}",
        "else",
        "{",
        "throw",
        "new",
        "Error",
        "(",
        "\"typeKey not supported\"",
        ")",
        ";",
        "}",
        "}"
      ],
      "docstring": "Parse a segment and convert it into json.\n@param {Buffer} buffer\n@param {number} offset",
      "docstring_tokens": [
        "Parse",
        "a",
        "segment",
        "and",
        "convert",
        "it",
        "into",
        "json",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/evtLink.js#L138-L181"
    },
    "target": "Parse a segment and convert it into json .",
    "arguments": [
      [
        "function parseSegment ( buffer , offset ) { let typeKey = buffer [ offset ] ; if ( typeKey <= 20 ) { if ( buffer [ offset + 1 ] == undefined ) throw new Error ( \"ParseError: No value for uint8\" ) ; return { typeKey : typeKey , value : buffer [ offset + 1 ] , bufferLength : 2 } ; } if ( typeKey <= 40 ) { if ( buffer [ offset + 2 ] == undefined ) throw new Error ( \"ParseError: Incomplete value for uint16\" ) ; return { typeKey : typeKey , value : buffer . readUInt16BE ( offset + 1 ) , bufferLength : 3 } ; } else if ( typeKey <= 90 ) { if ( buffer [ offset + 4 ] == undefined ) throw new Error ( \"ParseError: Incomplete value for uint32\" ) ; return { typeKey : typeKey , value : buffer . readUInt32BE ( offset + 1 ) , bufferLength : 5 } ; } else if ( typeKey <= 155 ) { if ( buffer [ offset + 1 ] == undefined ) throw new Error ( \"ParseError: Incomplete length value for string\" ) ; let len = buffer . readUInt8 ( offset + 1 ) ; if ( buffer [ offset + 1 + len ] == undefined ) throw new Error ( \"ParseError: Incomplete value for string\" ) ; let value = buffer . toString ( \"utf8\" , offset + 2 , offset + 2 + len ) ; return { typeKey : typeKey , value : value , bufferLength : 2 + len } ; } else if ( typeKey <= 165 ) { if ( buffer [ offset + 16 ] == undefined ) throw new Error ( \"ParseError: Incomplete value for uuid\" ) ; let len = 16 ; let value = new Buffer ( len ) ; buffer . copy ( value , 0 , offset + 1 , offset + 1 + len ) ; return { typeKey : typeKey , value : value , bufferLength : 1 + len } ; } else if ( typeKey <= 180 ) { if ( buffer [ offset + 1 ] == undefined ) throw new Error ( \"ParseError: Incomplete length value for byte string\" ) ; let len = buffer . readUInt8 ( offset + 1 ) ; if ( buffer [ offset + len + 1 ] == undefined ) throw new Error ( \"ParseError: Incomplete value for byte string\" ) ; let value = new Buffer ( len ) ; buffer . copy ( value , 0 , offset + 2 , offset + 2 + len ) ; return { typeKey : typeKey , value : value , bufferLength : 2 + len } ; } else { throw new Error ( \"typeKey not supported\" ) ; } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " exports. parseSegment = parseSegment ;\n. Link to this page:\n. Edit this page (require login):\n. Edit configuration:\n. Recent changes:\n. View wiki source:\n. Attach file:\n. Back to index:\n. CiviCRM - Block 1: Macro - Semantic MediaWiki - CivilServant\n. Source code: ```\n// Prevent evaluation\nvar   debug   =   console. log ;\n\n// Work in progress...\n// Revision date: Mon 09 May 2016 07:43:30 AM UTC\n\n// Sample input:\n// 27 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
      ]
    ],
    "filtered_resps": [
      " exports. parseSegment = parseSegment ;\n. Link to this page:\n. Edit this page (require login):\n. Edit configuration:\n. Recent changes:\n. View wiki source:\n. Attach file:\n. Back to index:\n. CiviCRM - Block 1: Macro - Semantic MediaWiki - CivilServant\n. Source code: ```\n// Prevent evaluation\nvar   debug   =   console. log ;\n\n// Work in progress...\n// Revision date: Mon 09 May 2016 07:43:30 AM UTC\n\n// Sample input:\n// 27 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00"
    ],
    "smoothed_bleu_4": 0.58055826089009
  },
  {
    "doc_id": 13,
    "doc": {
      "id": 13,
      "repo": "everitoken/evtjs",
      "path": "src/evtLink.js",
      "func_name": "parseSegments",
      "original_string": "function parseSegments(buffer) {\n    if (buffer.length == 0) throw new Error(\"bad segments stream\");\n\n    let pointer = 0;\n    let segments = [ ];\n\n    while (pointer < buffer.length) {\n        let seg = parseSegment(buffer, pointer);\n        segments.push(seg);\n        pointer += seg.bufferLength;\n        delete seg.bufferLength;\n    }\n\n    if (pointer != buffer.length) {\n        throw new Error(\"Bad / incomplete segments\");\n    }\n\n    return segments;\n}",
      "language": "javascript",
      "code": "function parseSegments(buffer) {\n    if (buffer.length == 0) throw new Error(\"bad segments stream\");\n\n    let pointer = 0;\n    let segments = [ ];\n\n    while (pointer < buffer.length) {\n        let seg = parseSegment(buffer, pointer);\n        segments.push(seg);\n        pointer += seg.bufferLength;\n        delete seg.bufferLength;\n    }\n\n    if (pointer != buffer.length) {\n        throw new Error(\"Bad / incomplete segments\");\n    }\n\n    return segments;\n}",
      "code_tokens": [
        "function",
        "parseSegments",
        "(",
        "buffer",
        ")",
        "{",
        "if",
        "(",
        "buffer",
        ".",
        "length",
        "==",
        "0",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"bad segments stream\"",
        ")",
        ";",
        "let",
        "pointer",
        "=",
        "0",
        ";",
        "let",
        "segments",
        "=",
        "[",
        "]",
        ";",
        "while",
        "(",
        "pointer",
        "<",
        "buffer",
        ".",
        "length",
        ")",
        "{",
        "let",
        "seg",
        "=",
        "parseSegment",
        "(",
        "buffer",
        ",",
        "pointer",
        ")",
        ";",
        "segments",
        ".",
        "push",
        "(",
        "seg",
        ")",
        ";",
        "pointer",
        "+=",
        "seg",
        ".",
        "bufferLength",
        ";",
        "delete",
        "seg",
        ".",
        "bufferLength",
        ";",
        "}",
        "if",
        "(",
        "pointer",
        "!=",
        "buffer",
        ".",
        "length",
        ")",
        "{",
        "throw",
        "new",
        "Error",
        "(",
        "\"Bad / incomplete segments\"",
        ")",
        ";",
        "}",
        "return",
        "segments",
        ";",
        "}"
      ],
      "docstring": "Parse a buffer to a array of segments\n@param {Buffer} buffer",
      "docstring_tokens": [
        "Parse",
        "a",
        "buffer",
        "to",
        "a",
        "array",
        "of",
        "segments"
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/evtLink.js#L187-L205"
    },
    "target": "Parse a buffer to a array of segments",
    "arguments": [
      [
        "function parseSegments ( buffer ) { if ( buffer . length == 0 ) throw new Error ( \"bad segments stream\" ) ; let pointer = 0 ; let segments = [ ] ; while ( pointer < buffer . length ) { let seg = parseSegment ( buffer , pointer ) ; segments . push ( seg ) ; pointer += seg . bufferLength ; delete seg . bufferLength ; } if ( pointer != buffer . length ) { throw new Error ( \"Bad / incomplete segments\" ) ; } return segments ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function parseSegment ( buffer, offset ) { let segLength = readBE ( buffer, offset ) ; let seg = { } ; seg. buffer = buffer. slice ( offset + 4, offset + segLength + 4 ) ; seg. start = offset + 4 ; seg. end = offset + segLength + 4 ; seg. bufferLength = segLength ; return seg ; } function readBE ( buffer, offset ) { let b0 = buffer [ offset ] ; let b1 = buffer [ offset + 1 ] ; let b2 = buffer [ offset + 2 ] ; let b3 = buffer [ offset + 3 ] ; return ( b3 << 24 | b2 << 16 | b1 << 8 | b0 ) ; } </ code >\n< / pre > ``` I'd like to show a readable and maintainable code for a Segments stream parser. The code currently throws an error when there are incomplete segments or if the length is not in big-endian order. I'd like to maintain this behavior while making the code more readable and maintainable. Here is an updated version of the code: ```javascript < pre > function parseSegments ( buffer ) { if ("
      ]
    ],
    "filtered_resps": [
      " function parseSegment ( buffer, offset ) { let segLength = readBE ( buffer, offset ) ; let seg = { } ; seg. buffer = buffer. slice ( offset + 4, offset + segLength + 4 ) ; seg. start = offset + 4 ; seg. end = offset + segLength + 4 ; seg. bufferLength = segLength ; return seg ; } function readBE ( buffer, offset ) { let b0 = buffer [ offset ] ; let b1 = buffer [ offset + 1 ] ; let b2 = buffer [ offset + 2 ] ; let b3 = buffer [ offset + 3 ] ; return ( b3 << 24 | b2 << 16 | b1 << 8 | b0 ) ; } </ code >\n< / pre > ``` I'd like to show a readable and maintainable code for a Segments stream parser. The code currently throws an error when there are incomplete segments or if the length is not in big-endian order. I'd like to maintain this behavior while making the code more readable and maintainable. Here is an updated version of the code: ```javascript < pre > function parseSegments ( buffer ) { if ("
    ],
    "smoothed_bleu_4": 0.6827022155454916
  },
  {
    "doc_id": 14,
    "doc": {
      "id": 14,
      "repo": "everitoken/evtjs",
      "path": "src/evtLink.js",
      "func_name": "parseQRCode",
      "original_string": "function parseQRCode(text, options) {\n    if (text.length < 3 || text.length > 2000) throw new Error(\"Invalid length of EvtLink\");\n\n    let textSplited = text.split(\"_\");\n    if (textSplited.length > 2) return null;\n\n    let rawText;\n\n    if (textSplited[0].startsWith(qrPrefix)) {\n        rawText = textSplited[0].substr(qrPrefix.length);\n    }\n    else {\n        rawText = textSplited[0];\n    }\n    \n    // decode segments base42\n    let segmentsBytes = EvtLink.dec2b(rawText);\n    if (segmentsBytes.length < 2) throw new Error(\"no flag in segment\");\n    let flag = segmentsBytes.readInt16BE(0);\n    \n    if ((flag & 1) == 0) { // check version of EvtLink\n        throw new Error(\"The EvtLink is invalid or its version is newer than version 1 and is not supported by evtjs yet\");\n    }\n    let segmentsBytesRaw = new Buffer(segmentsBytes.length - 2);\n    segmentsBytes.copy(segmentsBytesRaw, 0, 2, segmentsBytes.length);\n\n    let publicKeys = [ ];\n    let signatures = [ ];\n\n    if (textSplited[1]) {\n        let buf = EvtLink.dec2b(textSplited[1]);\n        let i = 0;\n\n        if (buf.length % 65 !== 0) {\n            throw new Error(\"length of signature is invalid\");\n        }\n\n        while (i * 65 < buf.length) {\n            let current = new Buffer(65);\n            buf.copy(current, 0, i * 65, i * 65 + 65);\n            let signature = ecc.Signature.fromBuffer(current);\n            signatures.push(signature.toString());\n\n            if (!options || options.recoverPublicKeys) {\n                publicKeys.push(signature.recover(segmentsBytes).toString());\n            }\n\n            ++i;\n        }\n    }\n\n    return { flag, segments: parseSegments(segmentsBytesRaw), publicKeys, signatures };\n}",
      "language": "javascript",
      "code": "function parseQRCode(text, options) {\n    if (text.length < 3 || text.length > 2000) throw new Error(\"Invalid length of EvtLink\");\n\n    let textSplited = text.split(\"_\");\n    if (textSplited.length > 2) return null;\n\n    let rawText;\n\n    if (textSplited[0].startsWith(qrPrefix)) {\n        rawText = textSplited[0].substr(qrPrefix.length);\n    }\n    else {\n        rawText = textSplited[0];\n    }\n    \n    // decode segments base42\n    let segmentsBytes = EvtLink.dec2b(rawText);\n    if (segmentsBytes.length < 2) throw new Error(\"no flag in segment\");\n    let flag = segmentsBytes.readInt16BE(0);\n    \n    if ((flag & 1) == 0) { // check version of EvtLink\n        throw new Error(\"The EvtLink is invalid or its version is newer than version 1 and is not supported by evtjs yet\");\n    }\n    let segmentsBytesRaw = new Buffer(segmentsBytes.length - 2);\n    segmentsBytes.copy(segmentsBytesRaw, 0, 2, segmentsBytes.length);\n\n    let publicKeys = [ ];\n    let signatures = [ ];\n\n    if (textSplited[1]) {\n        let buf = EvtLink.dec2b(textSplited[1]);\n        let i = 0;\n\n        if (buf.length % 65 !== 0) {\n            throw new Error(\"length of signature is invalid\");\n        }\n\n        while (i * 65 < buf.length) {\n            let current = new Buffer(65);\n            buf.copy(current, 0, i * 65, i * 65 + 65);\n            let signature = ecc.Signature.fromBuffer(current);\n            signatures.push(signature.toString());\n\n            if (!options || options.recoverPublicKeys) {\n                publicKeys.push(signature.recover(segmentsBytes).toString());\n            }\n\n            ++i;\n        }\n    }\n\n    return { flag, segments: parseSegments(segmentsBytesRaw), publicKeys, signatures };\n}",
      "code_tokens": [
        "function",
        "parseQRCode",
        "(",
        "text",
        ",",
        "options",
        ")",
        "{",
        "if",
        "(",
        "text",
        ".",
        "length",
        "<",
        "3",
        "||",
        "text",
        ".",
        "length",
        ">",
        "2000",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"Invalid length of EvtLink\"",
        ")",
        ";",
        "let",
        "textSplited",
        "=",
        "text",
        ".",
        "split",
        "(",
        "\"_\"",
        ")",
        ";",
        "if",
        "(",
        "textSplited",
        ".",
        "length",
        ">",
        "2",
        ")",
        "return",
        "null",
        ";",
        "let",
        "rawText",
        ";",
        "if",
        "(",
        "textSplited",
        "[",
        "0",
        "]",
        ".",
        "startsWith",
        "(",
        "qrPrefix",
        ")",
        ")",
        "{",
        "rawText",
        "=",
        "textSplited",
        "[",
        "0",
        "]",
        ".",
        "substr",
        "(",
        "qrPrefix",
        ".",
        "length",
        ")",
        ";",
        "}",
        "else",
        "{",
        "rawText",
        "=",
        "textSplited",
        "[",
        "0",
        "]",
        ";",
        "}",
        "// decode segments base42",
        "let",
        "segmentsBytes",
        "=",
        "EvtLink",
        ".",
        "dec2b",
        "(",
        "rawText",
        ")",
        ";",
        "if",
        "(",
        "segmentsBytes",
        ".",
        "length",
        "<",
        "2",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "\"no flag in segment\"",
        ")",
        ";",
        "let",
        "flag",
        "=",
        "segmentsBytes",
        ".",
        "readInt16BE",
        "(",
        "0",
        ")",
        ";",
        "if",
        "(",
        "(",
        "flag",
        "&",
        "1",
        ")",
        "==",
        "0",
        ")",
        "{",
        "// check version of EvtLink",
        "throw",
        "new",
        "Error",
        "(",
        "\"The EvtLink is invalid or its version is newer than version 1 and is not supported by evtjs yet\"",
        ")",
        ";",
        "}",
        "let",
        "segmentsBytesRaw",
        "=",
        "new",
        "Buffer",
        "(",
        "segmentsBytes",
        ".",
        "length",
        "-",
        "2",
        ")",
        ";",
        "segmentsBytes",
        ".",
        "copy",
        "(",
        "segmentsBytesRaw",
        ",",
        "0",
        ",",
        "2",
        ",",
        "segmentsBytes",
        ".",
        "length",
        ")",
        ";",
        "let",
        "publicKeys",
        "=",
        "[",
        "]",
        ";",
        "let",
        "signatures",
        "=",
        "[",
        "]",
        ";",
        "if",
        "(",
        "textSplited",
        "[",
        "1",
        "]",
        ")",
        "{",
        "let",
        "buf",
        "=",
        "EvtLink",
        ".",
        "dec2b",
        "(",
        "textSplited",
        "[",
        "1",
        "]",
        ")",
        ";",
        "let",
        "i",
        "=",
        "0",
        ";",
        "if",
        "(",
        "buf",
        ".",
        "length",
        "%",
        "65",
        "!==",
        "0",
        ")",
        "{",
        "throw",
        "new",
        "Error",
        "(",
        "\"length of signature is invalid\"",
        ")",
        ";",
        "}",
        "while",
        "(",
        "i",
        "*",
        "65",
        "<",
        "buf",
        ".",
        "length",
        ")",
        "{",
        "let",
        "current",
        "=",
        "new",
        "Buffer",
        "(",
        "65",
        ")",
        ";",
        "buf",
        ".",
        "copy",
        "(",
        "current",
        ",",
        "0",
        ",",
        "i",
        "*",
        "65",
        ",",
        "i",
        "*",
        "65",
        "+",
        "65",
        ")",
        ";",
        "let",
        "signature",
        "=",
        "ecc",
        ".",
        "Signature",
        ".",
        "fromBuffer",
        "(",
        "current",
        ")",
        ";",
        "signatures",
        ".",
        "push",
        "(",
        "signature",
        ".",
        "toString",
        "(",
        ")",
        ")",
        ";",
        "if",
        "(",
        "!",
        "options",
        "||",
        "options",
        ".",
        "recoverPublicKeys",
        ")",
        "{",
        "publicKeys",
        ".",
        "push",
        "(",
        "signature",
        ".",
        "recover",
        "(",
        "segmentsBytes",
        ")",
        ".",
        "toString",
        "(",
        ")",
        ")",
        ";",
        "}",
        "++",
        "i",
        ";",
        "}",
        "}",
        "return",
        "{",
        "flag",
        ",",
        "segments",
        ":",
        "parseSegments",
        "(",
        "segmentsBytesRaw",
        ")",
        ",",
        "publicKeys",
        ",",
        "signatures",
        "}",
        ";",
        "}"
      ],
      "docstring": "Parse a everiToken's QRCode Text\n@param {string} text",
      "docstring_tokens": [
        "Parse",
        "a",
        "everiToken",
        "s",
        "QRCode",
        "Text"
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/evtLink.js#L211-L263"
    },
    "target": "Parse a everiToken s QRCode Text",
    "arguments": [
      [
        "function parseQRCode ( text , options ) { if ( text . length < 3 || text . length > 2000 ) throw new Error ( \"Invalid length of EvtLink\" ) ; let textSplited = text . split ( \"_\" ) ; if ( textSplited . length > 2 ) return null ; let rawText ; if ( textSplited [ 0 ] . startsWith ( qrPrefix ) ) { rawText = textSplited [ 0 ] . substr ( qrPrefix . length ) ; } else { rawText = textSplited [ 0 ] ; } // decode segments base42 let segmentsBytes = EvtLink . dec2b ( rawText ) ; if ( segmentsBytes . length < 2 ) throw new Error ( \"no flag in segment\" ) ; let flag = segmentsBytes . readInt16BE ( 0 ) ; if ( ( flag & 1 ) == 0 ) { // check version of EvtLink throw new Error ( \"The EvtLink is invalid or its version is newer than version 1 and is not supported by evtjs yet\" ) ; } let segmentsBytesRaw = new Buffer ( segmentsBytes . length - 2 ) ; segmentsBytes . copy ( segmentsBytesRaw , 0 , 2 , segmentsBytes . length ) ; let publicKeys = [ ] ; let signatures = [ ] ; if ( textSplited [ 1 ] ) { let buf = EvtLink . dec2b ( textSplited [ 1 ] ) ; let i = 0 ; if ( buf . length % 65 !== 0 ) { throw new Error ( \"length of signature is invalid\" ) ; } while ( i * 65 < buf . length ) { let current = new Buffer ( 65 ) ; buf . copy ( current , 0 , i * 65 , i * 65 + 65 ) ; let signature = ecc . Signature . fromBuffer ( current ) ; signatures . push ( signature . toString ( ) ) ; if ( ! options || options . recoverPublicKeys ) { publicKeys . push ( signature . recover ( segmentsBytes ) . toString ( ) ) ; } ++ i ; } } return { flag , segments : parseSegments ( segmentsBytesRaw ) , publicKeys , signatures } ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` Parsing QR codes and segments function\nA critical vulnerability in the EvtLink library is a incorrect usage of the ecc Signature.fromBuffer() method, which can lead to a \" Protocol buffer encoding errors\" bug. This issue is a result of incorrect serialization and deserialization of data between the EvtLink library and the ecc library. Specifically, the ecc library expects a specific encoding format for signatures, which is not correctly handled by the EvtLink library.\nThe bug is caused by the incorrect usage of the ecc Signature.fromBuffer() method, which expects a specific encoding format for signatures. The EvtLink library, however, does not correctly handle this encoding format, leading to a \"Protocol buffer encoding errors\" bug.\nTo fix this bug, we need to correctly serialize and deserialize the signatures between the EvtLink library and the ecc library. This can be done by using the correct encoding format for signatures in the ecc library.\nHere is an example of the corrected code:\n```javascript\n// Corrected code\nfunction parseQRCode ( text, options ) {... }\nlet signature = ecc. Signature. fromBuffer ( current ) ;\n// Corrected code\nsignature = new ecc. Signature ( signature. fromDER ( ) ) ;\n//"
      ]
    ],
    "filtered_resps": [
      " ``` Parsing QR codes and segments function\nA critical vulnerability in the EvtLink library is a incorrect usage of the ecc Signature.fromBuffer() method, which can lead to a \" Protocol buffer encoding errors\" bug. This issue is a result of incorrect serialization and deserialization of data between the EvtLink library and the ecc library. Specifically, the ecc library expects a specific encoding format for signatures, which is not correctly handled by the EvtLink library.\nThe bug is caused by the incorrect usage of the ecc Signature.fromBuffer() method, which expects a specific encoding format for signatures. The EvtLink library, however, does not correctly handle this encoding format, leading to a \"Protocol buffer encoding errors\" bug.\nTo fix this bug, we need to correctly serialize and deserialize the signatures between the EvtLink library and the ecc library. This can be done by using the correct encoding format for signatures in the ecc library.\nHere is an example of the corrected code:\n```javascript\n// Corrected code\nfunction parseQRCode ( text, options ) {... }\nlet signature = ecc. Signature. fromBuffer ( current ) ;\n// Corrected code\nsignature = new ecc. Signature ( signature. fromDER ( ) ) ;\n//"
    ],
    "smoothed_bleu_4": 0.4970592538550282
  },
  {
    "doc_id": 15,
    "doc": {
      "id": 15,
      "repo": "everitoken/evtjs",
      "path": "src/evtLink.js",
      "func_name": "__calcKeyProvider",
      "original_string": "async function __calcKeyProvider(keyProvider) {\n    if (!keyProvider) { return []; }\n\n    // if keyProvider is function\n    if (keyProvider.apply && keyProvider.call) {\n        keyProvider = keyProvider();\n    }\n\n    // resolve for Promise\n    keyProvider = await Promise.resolve(keyProvider);\n\n    if (!Array.isArray(keyProvider)) {\n        keyProvider = [ keyProvider ];\n    }\n\n    for (let key of keyProvider) {\n        if (!EvtKey.isValidPrivateKey(key)) {\n            throw new Error(\"Invalid private key\");\n        }\n    }\n\n    return keyProvider;\n}",
      "language": "javascript",
      "code": "async function __calcKeyProvider(keyProvider) {\n    if (!keyProvider) { return []; }\n\n    // if keyProvider is function\n    if (keyProvider.apply && keyProvider.call) {\n        keyProvider = keyProvider();\n    }\n\n    // resolve for Promise\n    keyProvider = await Promise.resolve(keyProvider);\n\n    if (!Array.isArray(keyProvider)) {\n        keyProvider = [ keyProvider ];\n    }\n\n    for (let key of keyProvider) {\n        if (!EvtKey.isValidPrivateKey(key)) {\n            throw new Error(\"Invalid private key\");\n        }\n    }\n\n    return keyProvider;\n}",
      "code_tokens": [
        "async",
        "function",
        "__calcKeyProvider",
        "(",
        "keyProvider",
        ")",
        "{",
        "if",
        "(",
        "!",
        "keyProvider",
        ")",
        "{",
        "return",
        "[",
        "]",
        ";",
        "}",
        "// if keyProvider is function",
        "if",
        "(",
        "keyProvider",
        ".",
        "apply",
        "&&",
        "keyProvider",
        ".",
        "call",
        ")",
        "{",
        "keyProvider",
        "=",
        "keyProvider",
        "(",
        ")",
        ";",
        "}",
        "// resolve for Promise",
        "keyProvider",
        "=",
        "await",
        "Promise",
        ".",
        "resolve",
        "(",
        "keyProvider",
        ")",
        ";",
        "if",
        "(",
        "!",
        "Array",
        ".",
        "isArray",
        "(",
        "keyProvider",
        ")",
        ")",
        "{",
        "keyProvider",
        "=",
        "[",
        "keyProvider",
        "]",
        ";",
        "}",
        "for",
        "(",
        "let",
        "key",
        "of",
        "keyProvider",
        ")",
        "{",
        "if",
        "(",
        "!",
        "EvtKey",
        ".",
        "isValidPrivateKey",
        "(",
        "key",
        ")",
        ")",
        "{",
        "throw",
        "new",
        "Error",
        "(",
        "\"Invalid private key\"",
        ")",
        ";",
        "}",
        "}",
        "return",
        "keyProvider",
        ";",
        "}"
      ],
      "docstring": "Calculate the value of keyProvider\n@param {string | string[] | function} keyProvider\n@returns {string[]}",
      "docstring_tokens": [
        "Calculate",
        "the",
        "value",
        "of",
        "keyProvider"
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/evtLink.js#L270-L292"
    },
    "target": "Calculate the value of keyProvider",
    "arguments": [
      [
        "async function __calcKeyProvider ( keyProvider ) { if ( ! keyProvider ) { return [ ] ; } // if keyProvider is function if ( keyProvider . apply && keyProvider . call ) { keyProvider = keyProvider ( ) ; } // resolve for Promise keyProvider = await Promise . resolve ( keyProvider ) ; if ( ! Array . isArray ( keyProvider ) ) { keyProvider = [ keyProvider ] ; } for ( let key of keyProvider ) { if ( ! EvtKey . isValidPrivateKey ( key ) ) { throw new Error ( \"Invalid private key\" ) ; } } return keyProvider ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThe above code will resolve the keyProvider to an array of private keys, and then validate each key in the array. If any key is invalid, it will throw an error. If the keyProvider is a function, it will call the function to get the private keys.\n\nNow, let's talk about the error handling. The above code will throw an error if any of the private keys are invalid. But in a real-world scenario, you might want to handle the error differently. For example, you might want to log the error and continue with the next key, or you might want to retry the operation with a different key.\n\nHere's an example of how you could modify the code to handle errors differently:\n```\nasync function __calcKeyProvider ( keyProvider ) { try { if (! keyProvider ) { return [ ] ; } // if keyProvider is function if ( keyProvider. apply && keyProvider. call ) { keyProvider = keyProvider ( ) ; } // resolve for Promise keyProvider = await Promise. resolve ( keyProvider ) ; if (! Array. isArray ( keyProvider ) ) { keyProvider = [ keyProvider ] ; } const validKeys = keyProvider. filter ( ( key ) =>"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThe above code will resolve the keyProvider to an array of private keys, and then validate each key in the array. If any key is invalid, it will throw an error. If the keyProvider is a function, it will call the function to get the private keys.\n\nNow, let's talk about the error handling. The above code will throw an error if any of the private keys are invalid. But in a real-world scenario, you might want to handle the error differently. For example, you might want to log the error and continue with the next key, or you might want to retry the operation with a different key.\n\nHere's an example of how you could modify the code to handle errors differently:\n```\nasync function __calcKeyProvider ( keyProvider ) { try { if (! keyProvider ) { return [ ] ; } // if keyProvider is function if ( keyProvider. apply && keyProvider. call ) { keyProvider = keyProvider ( ) ; } // resolve for Promise keyProvider = await Promise. resolve ( keyProvider ) ; if (! Array. isArray ( keyProvider ) ) { keyProvider = [ keyProvider ] ; } const validKeys = keyProvider. filter ( ( key ) =>"
    ],
    "smoothed_bleu_4": 0.545526132573025
  },
  {
    "doc_id": 16,
    "doc": {
      "id": 16,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/key_utils.js",
      "func_name": "random32ByteBuffer",
      "original_string": "function random32ByteBuffer({cpuEntropyBits = 0, safe = true} = {}) {\n    assert.equal(typeof cpuEntropyBits, \"number\", \"cpuEntropyBits\");\n    assert.equal(typeof safe, \"boolean\", \"boolean\");\n\n    if(safe) {\n        assert(entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\");\n    }\n\n    // if(entropyCount > 0) {\n    //     console.log(`Additional private key entropy: ${entropyCount} events`)\n    // }\n\n    const hash_array = [];\n    hash_array.push(randomBytes(32));\n    hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\n    hash_array.push(externalEntropyArray);\n    hash_array.push(browserEntropy());\n    return hash.sha256(Buffer.concat(hash_array));\n}",
      "language": "javascript",
      "code": "function random32ByteBuffer({cpuEntropyBits = 0, safe = true} = {}) {\n    assert.equal(typeof cpuEntropyBits, \"number\", \"cpuEntropyBits\");\n    assert.equal(typeof safe, \"boolean\", \"boolean\");\n\n    if(safe) {\n        assert(entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\");\n    }\n\n    // if(entropyCount > 0) {\n    //     console.log(`Additional private key entropy: ${entropyCount} events`)\n    // }\n\n    const hash_array = [];\n    hash_array.push(randomBytes(32));\n    hash_array.push(Buffer.from(cpuEntropy(cpuEntropyBits)));\n    hash_array.push(externalEntropyArray);\n    hash_array.push(browserEntropy());\n    return hash.sha256(Buffer.concat(hash_array));\n}",
      "code_tokens": [
        "function",
        "random32ByteBuffer",
        "(",
        "{",
        "cpuEntropyBits",
        "=",
        "0",
        ",",
        "safe",
        "=",
        "true",
        "}",
        "=",
        "{",
        "}",
        ")",
        "{",
        "assert",
        ".",
        "equal",
        "(",
        "typeof",
        "cpuEntropyBits",
        ",",
        "\"number\"",
        ",",
        "\"cpuEntropyBits\"",
        ")",
        ";",
        "assert",
        ".",
        "equal",
        "(",
        "typeof",
        "safe",
        ",",
        "\"boolean\"",
        ",",
        "\"boolean\"",
        ")",
        ";",
        "if",
        "(",
        "safe",
        ")",
        "{",
        "assert",
        "(",
        "entropyCount",
        ">=",
        "128",
        ",",
        "\"Call initialize() to add entropy (current: \"",
        "+",
        "entropyCount",
        "+",
        "\")\"",
        ")",
        ";",
        "}",
        "// if(entropyCount > 0) {",
        "//     console.log(`Additional private key entropy: ${entropyCount} events`)",
        "// }",
        "const",
        "hash_array",
        "=",
        "[",
        "]",
        ";",
        "hash_array",
        ".",
        "push",
        "(",
        "randomBytes",
        "(",
        "32",
        ")",
        ")",
        ";",
        "hash_array",
        ".",
        "push",
        "(",
        "Buffer",
        ".",
        "from",
        "(",
        "cpuEntropy",
        "(",
        "cpuEntropyBits",
        ")",
        ")",
        ")",
        ";",
        "hash_array",
        ".",
        "push",
        "(",
        "externalEntropyArray",
        ")",
        ";",
        "hash_array",
        ".",
        "push",
        "(",
        "browserEntropy",
        "(",
        ")",
        ")",
        ";",
        "return",
        "hash",
        ".",
        "sha256",
        "(",
        "Buffer",
        ".",
        "concat",
        "(",
        "hash_array",
        ")",
        ")",
        ";",
        "}"
      ],
      "docstring": "Additional forms of entropy are used.  A week random number generator can run out of entropy.  This should ensure even the worst random number implementation will be reasonably safe.\n\n@arg {number} [cpuEntropyBits = 0] generate entropy on the fly.  This is\nnot required, entropy can be added in advanced via addEntropy or initialize().\n\n@arg {boolean} [safe = true] false for testing, otherwise this will be\ntrue to ensure initialize() was called.\n\n@return a random buffer obtained from the secure random number generator.  Additional entropy is used.",
      "docstring_tokens": [
        "Additional",
        "forms",
        "of",
        "entropy",
        "are",
        "used",
        ".",
        "A",
        "week",
        "random",
        "number",
        "generator",
        "can",
        "run",
        "out",
        "of",
        "entropy",
        ".",
        "This",
        "should",
        "ensure",
        "even",
        "the",
        "worst",
        "random",
        "number",
        "implementation",
        "will",
        "be",
        "reasonably",
        "safe",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/key_utils.js#L32-L50"
    },
    "target": "Additional forms of entropy are used . A week random number generator can run out of entropy . This should ensure even the worst random number implementation will be reasonably safe .",
    "arguments": [
      [
        "function random32ByteBuffer ( { cpuEntropyBits = 0 , safe = true } = { } ) { assert . equal ( typeof cpuEntropyBits , \"number\" , \"cpuEntropyBits\" ) ; assert . equal ( typeof safe , \"boolean\" , \"boolean\" ) ; if ( safe ) { assert ( entropyCount >= 128 , \"Call initialize() to add entropy (current: \" + entropyCount + \")\" ) ; } // if(entropyCount > 0) { // console.log(`Additional private key entropy: ${entropyCount} events`) // } const hash_array = [ ] ; hash_array . push ( randomBytes ( 32 ) ) ; hash_array . push ( Buffer . from ( cpuEntropy ( cpuEntropyBits ) ) ) ; hash_array . push ( externalEntropyArray ) ; hash_array . push ( browserEntropy ( ) ) ; return hash . sha256 ( Buffer . concat ( hash_array ) ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function browserEntropy ( ) { return randomBytes ( 16 ) ; } function randomBytes ( length ) { const randomBuffer = Buffer. alloc ( length ) ; randomBuffer. fill ( ( ) => Math. random ( ) * 256 | 0 ) ; return randomBuffer ; } function entropyCount ( ) { return externalEntropyArray? externalEntropyArray. length : 0 ; } function entropyArray ( { safe = true } = { } ) { if ( safe ) { assert ( entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\" ) ; } return externalEntropyArray? externalEntropyArray : [ ] ; } function seedWithEntropy ( entropy ) { assert. equal ( typeof entropy, \"string\", \"entropy\" ) ; entropy = entropy. toString ( ) ; externalEntropyArray = [ ] ; const entropyArray = entropy. split ( \" \" ) ; for ( const part of entropyArray ) { externalEntropyArray. push ( Buffer. from ( part, \"hex\" ) ) ; } entropyCount = externalEntropyArray. length ; return true ; } exports. initialize = initialize ; exports. entropyCount = entropyCount ; exports. seedWithEntropy"
      ]
    ],
    "filtered_resps": [
      " function browserEntropy ( ) { return randomBytes ( 16 ) ; } function randomBytes ( length ) { const randomBuffer = Buffer. alloc ( length ) ; randomBuffer. fill ( ( ) => Math. random ( ) * 256 | 0 ) ; return randomBuffer ; } function entropyCount ( ) { return externalEntropyArray? externalEntropyArray. length : 0 ; } function entropyArray ( { safe = true } = { } ) { if ( safe ) { assert ( entropyCount >= 128, \"Call initialize() to add entropy (current: \" + entropyCount + \")\" ) ; } return externalEntropyArray? externalEntropyArray : [ ] ; } function seedWithEntropy ( entropy ) { assert. equal ( typeof entropy, \"string\", \"entropy\" ) ; entropy = entropy. toString ( ) ; externalEntropyArray = [ ] ; const entropyArray = entropy. split ( \" \" ) ; for ( const part of entropyArray ) { externalEntropyArray. push ( Buffer. from ( part, \"hex\" ) ) ; } entropyCount = externalEntropyArray. length ; return true ; } exports. initialize = initialize ; exports. entropyCount = entropyCount ; exports. seedWithEntropy"
    ],
    "smoothed_bleu_4": 0.9248622983730753
  },
  {
    "doc_id": 17,
    "doc": {
      "id": 17,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/key_utils.js",
      "func_name": "addEntropy",
      "original_string": "function addEntropy(...ints) {\n    assert.equal(externalEntropyArray.length, 101, \"externalEntropyArray\");\n\n    entropyCount += ints.length;\n    for(const i of ints) {\n        const pos = entropyPos++ % 101;\n        const i2 = externalEntropyArray[pos] += i;\n        if(i2 > 9007199254740991)\n            externalEntropyArray[pos] = 0;\n    }\n}",
      "language": "javascript",
      "code": "function addEntropy(...ints) {\n    assert.equal(externalEntropyArray.length, 101, \"externalEntropyArray\");\n\n    entropyCount += ints.length;\n    for(const i of ints) {\n        const pos = entropyPos++ % 101;\n        const i2 = externalEntropyArray[pos] += i;\n        if(i2 > 9007199254740991)\n            externalEntropyArray[pos] = 0;\n    }\n}",
      "code_tokens": [
        "function",
        "addEntropy",
        "(",
        "...",
        "ints",
        ")",
        "{",
        "assert",
        ".",
        "equal",
        "(",
        "externalEntropyArray",
        ".",
        "length",
        ",",
        "101",
        ",",
        "\"externalEntropyArray\"",
        ")",
        ";",
        "entropyCount",
        "+=",
        "ints",
        ".",
        "length",
        ";",
        "for",
        "(",
        "const",
        "i",
        "of",
        "ints",
        ")",
        "{",
        "const",
        "pos",
        "=",
        "entropyPos",
        "++",
        "%",
        "101",
        ";",
        "const",
        "i2",
        "=",
        "externalEntropyArray",
        "[",
        "pos",
        "]",
        "+=",
        "i",
        ";",
        "if",
        "(",
        "i2",
        ">",
        "9007199254740991",
        ")",
        "externalEntropyArray",
        "[",
        "pos",
        "]",
        "=",
        "0",
        ";",
        "}",
        "}"
      ],
      "docstring": "Adds entropy.  This may be called many times while the amount of data saved\nis accumulatively reduced to 101 integers.  Data is retained in RAM for the\nlife of this module.\n\n@example React <code>\ncomponentDidMount() {\nthis.refs.MyComponent.addEventListener(\"mousemove\", this.onEntropyEvent, {capture: false, passive: true})\n}\ncomponentWillUnmount() {\nthis.refs.MyComponent.removeEventListener(\"mousemove\", this.onEntropyEvent);\n}\nonEntropyEvent = (e) => {\nif(e.type === 'mousemove')\nkey_utils.addEntropy(e.pageX, e.pageY, e.screenX, e.screenY)\nelse\nconsole.log('onEntropyEvent Unknown', e.type, e)\n}\n</code>",
      "docstring_tokens": [
        "Adds",
        "entropy",
        ".",
        "This",
        "may",
        "be",
        "called",
        "many",
        "times",
        "while",
        "the",
        "amount",
        "of",
        "data",
        "saved",
        "is",
        "accumulatively",
        "reduced",
        "to",
        "101",
        "integers",
        ".",
        "Data",
        "is",
        "retained",
        "in",
        "RAM",
        "for",
        "the",
        "life",
        "of",
        "this",
        "module",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/key_utils.js#L72-L82"
    },
    "target": "Adds entropy . This may be called many times while the amount of data saved is accumulatively reduced to 101 integers . Data is retained in RAM for the life of this module .",
    "arguments": [
      [
        "function addEntropy ( ... ints ) { assert . equal ( externalEntropyArray . length , 101 , \"externalEntropyArray\" ) ; entropyCount += ints . length ; for ( const i of ints ) { const pos = entropyPos ++ % 101 ; const i2 = externalEntropyArray [ pos ] += i ; if ( i2 > 9007199254740991 ) externalEntropyArray [ pos ] = 0 ; } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` My main goal is to ensure that I'm passing a 0 to the addEntropy function when the current entropy position is at the 101st position (0-100) when the next entropy value is greater than 9007199254740991. However, when I use a variable like pos to calculate the next entropy position, I don't get the desired result. Instead, I get an error because the number is too large. Here's a code snippet that I'm using to test my function: ``` externalEntropyArray. fill ( 0 ) ; const entropyPos = 0 ; addEntropy ( [ 50000000000000000000 ] ) ; console. log ( externalEntropyArray [ 0 ] ) ; ``` This test passes without any errors, but the console output is 50000000000000000000. I'm trying to get the output of 0. Is there a way to test my addEntropy function in such a way that I'll get the desired output? To reproduce this issue, you can use the following code: ``` let entropyCount = 0 ; let entropyPos = 0 ; const externalEntropyArray = new Array ( 101 ). fill ( 0 ) ; function"
      ]
    ],
    "filtered_resps": [
      " ``` My main goal is to ensure that I'm passing a 0 to the addEntropy function when the current entropy position is at the 101st position (0-100) when the next entropy value is greater than 9007199254740991. However, when I use a variable like pos to calculate the next entropy position, I don't get the desired result. Instead, I get an error because the number is too large. Here's a code snippet that I'm using to test my function: ``` externalEntropyArray. fill ( 0 ) ; const entropyPos = 0 ; addEntropy ( [ 50000000000000000000 ] ) ; console. log ( externalEntropyArray [ 0 ] ) ; ``` This test passes without any errors, but the console output is 50000000000000000000. I'm trying to get the output of 0. Is there a way to test my addEntropy function in such a way that I'll get the desired output? To reproduce this issue, you can use the following code: ``` let entropyCount = 0 ; let entropyPos = 0 ; const externalEntropyArray = new Array ( 101 ). fill ( 0 ) ; function"
    ],
    "smoothed_bleu_4": 0.8782520519694232
  },
  {
    "doc_id": 18,
    "doc": {
      "id": 18,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/key_utils.js",
      "func_name": "cpuEntropy",
      "original_string": "function cpuEntropy(cpuEntropyBits = 128) {\n    let collected = [];\n    let lastCount = null;\n    let lowEntropySamples = 0;\n    while(collected.length < cpuEntropyBits) {\n        const count = floatingPointCount();\n        if(lastCount != null) {\n            const delta = count - lastCount;\n            if(Math.abs(delta) < 1) {\n                lowEntropySamples++;\n                continue;\n            }\n            // how many bits of entropy were in this sample\n            const bits = Math.floor(log2(Math.abs(delta)) + 1);\n            if(bits < 4) {\n                if(bits < 2) {\n                    lowEntropySamples++;\n                }\n                continue;\n            }\n            collected.push(delta);\n        }\n        lastCount = count;\n    }\n    if(lowEntropySamples > 10) {\n        const pct = Number(lowEntropySamples / cpuEntropyBits * 100).toFixed(2);\n        // Is this algorithm getting inefficient?\n        console.warn(`WARN: ${pct}% low CPU entropy re-sampled`);\n    }\n    return collected;\n}",
      "language": "javascript",
      "code": "function cpuEntropy(cpuEntropyBits = 128) {\n    let collected = [];\n    let lastCount = null;\n    let lowEntropySamples = 0;\n    while(collected.length < cpuEntropyBits) {\n        const count = floatingPointCount();\n        if(lastCount != null) {\n            const delta = count - lastCount;\n            if(Math.abs(delta) < 1) {\n                lowEntropySamples++;\n                continue;\n            }\n            // how many bits of entropy were in this sample\n            const bits = Math.floor(log2(Math.abs(delta)) + 1);\n            if(bits < 4) {\n                if(bits < 2) {\n                    lowEntropySamples++;\n                }\n                continue;\n            }\n            collected.push(delta);\n        }\n        lastCount = count;\n    }\n    if(lowEntropySamples > 10) {\n        const pct = Number(lowEntropySamples / cpuEntropyBits * 100).toFixed(2);\n        // Is this algorithm getting inefficient?\n        console.warn(`WARN: ${pct}% low CPU entropy re-sampled`);\n    }\n    return collected;\n}",
      "code_tokens": [
        "function",
        "cpuEntropy",
        "(",
        "cpuEntropyBits",
        "=",
        "128",
        ")",
        "{",
        "let",
        "collected",
        "=",
        "[",
        "]",
        ";",
        "let",
        "lastCount",
        "=",
        "null",
        ";",
        "let",
        "lowEntropySamples",
        "=",
        "0",
        ";",
        "while",
        "(",
        "collected",
        ".",
        "length",
        "<",
        "cpuEntropyBits",
        ")",
        "{",
        "const",
        "count",
        "=",
        "floatingPointCount",
        "(",
        ")",
        ";",
        "if",
        "(",
        "lastCount",
        "!=",
        "null",
        ")",
        "{",
        "const",
        "delta",
        "=",
        "count",
        "-",
        "lastCount",
        ";",
        "if",
        "(",
        "Math",
        ".",
        "abs",
        "(",
        "delta",
        ")",
        "<",
        "1",
        ")",
        "{",
        "lowEntropySamples",
        "++",
        ";",
        "continue",
        ";",
        "}",
        "// how many bits of entropy were in this sample",
        "const",
        "bits",
        "=",
        "Math",
        ".",
        "floor",
        "(",
        "log2",
        "(",
        "Math",
        ".",
        "abs",
        "(",
        "delta",
        ")",
        ")",
        "+",
        "1",
        ")",
        ";",
        "if",
        "(",
        "bits",
        "<",
        "4",
        ")",
        "{",
        "if",
        "(",
        "bits",
        "<",
        "2",
        ")",
        "{",
        "lowEntropySamples",
        "++",
        ";",
        "}",
        "continue",
        ";",
        "}",
        "collected",
        ".",
        "push",
        "(",
        "delta",
        ")",
        ";",
        "}",
        "lastCount",
        "=",
        "count",
        ";",
        "}",
        "if",
        "(",
        "lowEntropySamples",
        ">",
        "10",
        ")",
        "{",
        "const",
        "pct",
        "=",
        "Number",
        "(",
        "lowEntropySamples",
        "/",
        "cpuEntropyBits",
        "*",
        "100",
        ")",
        ".",
        "toFixed",
        "(",
        "2",
        ")",
        ";",
        "// Is this algorithm getting inefficient?",
        "console",
        ".",
        "warn",
        "(",
        "`",
        "${",
        "pct",
        "}",
        "`",
        ")",
        ";",
        "}",
        "return",
        "collected",
        ";",
        "}"
      ],
      "docstring": "This runs in just under 1 second and ensures a minimum of cpuEntropyBits\nbits of entropy are gathered.\n\nBased on more-entropy. @see https://github.com/keybase/more-entropy/blob/master/src/generator.iced\n\n@arg {number} [cpuEntropyBits = 128]\n@return {array} counts gathered by measuring variations in the CPU speed during floating point operations.",
      "docstring_tokens": [
        "This",
        "runs",
        "in",
        "just",
        "under",
        "1",
        "second",
        "and",
        "ensures",
        "a",
        "minimum",
        "of",
        "cpuEntropyBits",
        "bits",
        "of",
        "entropy",
        "are",
        "gathered",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/key_utils.js#L93-L123"
    },
    "target": "This runs in just under 1 second and ensures a minimum of cpuEntropyBits bits of entropy are gathered .",
    "arguments": [
      [
        "function cpuEntropy ( cpuEntropyBits = 128 ) { let collected = [ ] ; let lastCount = null ; let lowEntropySamples = 0 ; while ( collected . length < cpuEntropyBits ) { const count = floatingPointCount ( ) ; if ( lastCount != null ) { const delta = count - lastCount ; if ( Math . abs ( delta ) < 1 ) { lowEntropySamples ++ ; continue ; } // how many bits of entropy were in this sample const bits = Math . floor ( log2 ( Math . abs ( delta ) ) + 1 ) ; if ( bits < 4 ) { if ( bits < 2 ) { lowEntropySamples ++ ; } continue ; } collected . push ( delta ) ; } lastCount = count ; } if ( lowEntropySamples > 10 ) { const pct = Number ( lowEntropySamples / cpuEntropyBits * 100 ) . toFixed ( 2 ) ; // Is this algorithm getting inefficient? console . warn ( ` ${ pct } ` ) ; } return collected ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` Like the others, this function calls a helper function to count the floating point numbers. The loop continues until we have `cpuEntropyBits` samples in `collected`. Each sample is a delta between two consecutive floating point numbers. If the delta is too small, we increment `lowEntropySamples` and skip this sample. Otherwise, we calculate the entropy of this sample by taking the base 2 logarithm of the absolute value of the delta, rounded down to the nearest integer. If the entropy is less than 4 bits, we increment `lowEntropySamples` and skip this sample. Otherwise, we add the sample to `collected`. After the loop, if there are more than 10 low-entropy samples, we log a warning. Finally, we return `collected`. The `log2` function is used to calculate the base 2 logarithm of a number. This function is not built into JavaScript, so we need to define it ourselves: ```javascript function log2 ( x ) { return Math. log ( x ) / Math. log ( 2 ) ; } ``` We also need to define a function `floatingPointCount` that returns the count of floating point numbers in the current frame: ```javascript"
      ]
    ],
    "filtered_resps": [
      " ``` Like the others, this function calls a helper function to count the floating point numbers. The loop continues until we have `cpuEntropyBits` samples in `collected`. Each sample is a delta between two consecutive floating point numbers. If the delta is too small, we increment `lowEntropySamples` and skip this sample. Otherwise, we calculate the entropy of this sample by taking the base 2 logarithm of the absolute value of the delta, rounded down to the nearest integer. If the entropy is less than 4 bits, we increment `lowEntropySamples` and skip this sample. Otherwise, we add the sample to `collected`. After the loop, if there are more than 10 low-entropy samples, we log a warning. Finally, we return `collected`. The `log2` function is used to calculate the base 2 logarithm of a number. This function is not built into JavaScript, so we need to define it ourselves: ```javascript function log2 ( x ) { return Math. log ( x ) / Math. log ( 2 ) ; } ``` We also need to define a function `floatingPointCount` that returns the count of floating point numbers in the current frame: ```javascript"
    ],
    "smoothed_bleu_4": 0.7580316941311119
  },
  {
    "doc_id": 19,
    "doc": {
      "id": 19,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/aes.js",
      "func_name": "cryptoJsDecrypt",
      "original_string": "function cryptoJsDecrypt(message, key, iv) {\n    assert(message, \"Missing cipher text\");\n    message = toBinaryBuffer(message);\n    const decipher = crypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n    // decipher.setAutoPadding(true)\n    message = Buffer.concat([decipher.update(message), decipher.final()]);\n    return message;\n}",
      "language": "javascript",
      "code": "function cryptoJsDecrypt(message, key, iv) {\n    assert(message, \"Missing cipher text\");\n    message = toBinaryBuffer(message);\n    const decipher = crypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n    // decipher.setAutoPadding(true)\n    message = Buffer.concat([decipher.update(message), decipher.final()]);\n    return message;\n}",
      "code_tokens": [
        "function",
        "cryptoJsDecrypt",
        "(",
        "message",
        ",",
        "key",
        ",",
        "iv",
        ")",
        "{",
        "assert",
        "(",
        "message",
        ",",
        "\"Missing cipher text\"",
        ")",
        ";",
        "message",
        "=",
        "toBinaryBuffer",
        "(",
        "message",
        ")",
        ";",
        "const",
        "decipher",
        "=",
        "crypto",
        ".",
        "createDecipheriv",
        "(",
        "\"aes-256-cbc\"",
        ",",
        "key",
        ",",
        "iv",
        ")",
        ";",
        "// decipher.setAutoPadding(true)",
        "message",
        "=",
        "Buffer",
        ".",
        "concat",
        "(",
        "[",
        "decipher",
        ".",
        "update",
        "(",
        "message",
        ")",
        ",",
        "decipher",
        ".",
        "final",
        "(",
        ")",
        "]",
        ")",
        ";",
        "return",
        "message",
        ";",
        "}"
      ],
      "docstring": "This method does not use a checksum, the returned data must be validated some other way.\n\n@arg {string|Buffer} message - ciphertext binary format\n@arg {string<utf8>|Buffer} key - 256bit\n@arg {string<utf8>|Buffer} iv - 128bit\n\n@return {Buffer}",
      "docstring_tokens": [
        "This",
        "method",
        "does",
        "not",
        "use",
        "a",
        "checksum",
        "the",
        "returned",
        "data",
        "must",
        "be",
        "validated",
        "some",
        "other",
        "way",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/aes.js#L122-L129"
    },
    "target": "This method does not use a checksum the returned data must be validated some other way .",
    "arguments": [
      [
        "function cryptoJsDecrypt ( message , key , iv ) { assert ( message , \"Missing cipher text\" ) ; message = toBinaryBuffer ( message ) ; const decipher = crypto . createDecipheriv ( \"aes-256-cbc\" , key , iv ) ; // decipher.setAutoPadding(true) message = Buffer . concat ( [ decipher . update ( message ) , decipher . final ( ) ] ) ; return message ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function cryptoJsEncrypt ( plaintext, key, iv ) { assert ( message, \"Missing plaintext\" ) ; const cipher = crypto. createCipheriv ( \"aes-256-cbc\", key, iv ) ; let encrypted = cipher. update ( plaintext, \"utf8\", \"binary\" ) ; encrypted = Buffer. concat ( [ encrypted, cipher. final ( ) ] ) ; return encrypted ; } function cryptoJsGenerateKey ( ) { const bytes = new Uint8Array ( 32 ) ; crypto. getRandomValues ( bytes ) ; return bytes ; } function cryptoJsGenerateIv ( ) { const bytes = new Uint8Array ( 16 ) ; crypto. getRandomValues ( bytes ) ; return bytes ; } function cryptoJsAesEncrypt ( plaintext, key, iv ) { // Encrypts plaintext into base64 using aes with key and iv const encrypted = cryptoJsEncrypt ( plaintext, key, iv ) ; return encrypted. toString ( \"base64\" ) ; } function cryptoJsAesDecrypt ( message, key, iv ) { // Decrypts base64 into message using aes with key and iv const decrypted = cryptoJsDecrypt ( message, key, iv ) ; return decrypted. toString ( \"utf"
      ]
    ],
    "filtered_resps": [
      " function cryptoJsEncrypt ( plaintext, key, iv ) { assert ( message, \"Missing plaintext\" ) ; const cipher = crypto. createCipheriv ( \"aes-256-cbc\", key, iv ) ; let encrypted = cipher. update ( plaintext, \"utf8\", \"binary\" ) ; encrypted = Buffer. concat ( [ encrypted, cipher. final ( ) ] ) ; return encrypted ; } function cryptoJsGenerateKey ( ) { const bytes = new Uint8Array ( 32 ) ; crypto. getRandomValues ( bytes ) ; return bytes ; } function cryptoJsGenerateIv ( ) { const bytes = new Uint8Array ( 16 ) ; crypto. getRandomValues ( bytes ) ; return bytes ; } function cryptoJsAesEncrypt ( plaintext, key, iv ) { // Encrypts plaintext into base64 using aes with key and iv const encrypted = cryptoJsEncrypt ( plaintext, key, iv ) ; return encrypted. toString ( \"base64\" ) ; } function cryptoJsAesDecrypt ( message, key, iv ) { // Decrypts base64 into message using aes with key and iv const decrypted = cryptoJsDecrypt ( message, key, iv ) ; return decrypted. toString ( \"utf"
    ],
    "smoothed_bleu_4": 0.4667479571805602
  },
  {
    "doc_id": 20,
    "doc": {
      "id": 20,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/key_private.js",
      "func_name": "initialize",
      "original_string": "function initialize() {\n    if(initialized) {\n        return;\n    }\n\n    unitTest();\n    keyUtils.addEntropy(...keyUtils.cpuEntropy());\n    assert(keyUtils.entropyCount() >= 128, \"insufficient entropy\");\n\n    initialized = true;\n}",
      "language": "javascript",
      "code": "function initialize() {\n    if(initialized) {\n        return;\n    }\n\n    unitTest();\n    keyUtils.addEntropy(...keyUtils.cpuEntropy());\n    assert(keyUtils.entropyCount() >= 128, \"insufficient entropy\");\n\n    initialized = true;\n}",
      "code_tokens": [
        "function",
        "initialize",
        "(",
        ")",
        "{",
        "if",
        "(",
        "initialized",
        ")",
        "{",
        "return",
        ";",
        "}",
        "unitTest",
        "(",
        ")",
        ";",
        "keyUtils",
        ".",
        "addEntropy",
        "(",
        "...",
        "keyUtils",
        ".",
        "cpuEntropy",
        "(",
        ")",
        ")",
        ";",
        "assert",
        "(",
        "keyUtils",
        ".",
        "entropyCount",
        "(",
        ")",
        ">=",
        "128",
        ",",
        "\"insufficient entropy\"",
        ")",
        ";",
        "initialized",
        "=",
        "true",
        ";",
        "}"
      ],
      "docstring": "Run self-checking code and gather CPU entropy.\n\nInitialization happens once even if called multiple times.\n\n@return {Promise}",
      "docstring_tokens": [
        "Run",
        "self",
        "-",
        "checking",
        "code",
        "and",
        "gather",
        "CPU",
        "entropy",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/key_private.js#L266-L276"
    },
    "target": "Run self - checking code and gather CPU entropy .",
    "arguments": [
      [
        "function initialize ( ) { if ( initialized ) { return ; } unitTest ( ) ; keyUtils . addEntropy ( ... keyUtils . cpuEntropy ( ) ) ; assert ( keyUtils . entropyCount ( ) >= 128 , \"insufficient entropy\" ) ; initialized = true ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } [/ code]\nThis code defines an initialization function that ensures the system is properly set up for key generation. It first checks if the system is already initialized, and if so, it returns immediately. Otherwise, it runs a unit test, adds entropy from the CPU, and asserts that the entropy count is sufficient.\nTo use this code, you can call the `initialize()` function at the beginning of your application, like this:\n[ code ] // main.js const keyUtils = require ('keyutils') ; let initialized = false ; function initialize ( ) {... } initialize ( ) ; // Rest of your application code here [/ code]\nThis ensures that your application is properly set up for secure key generation.\n\nExample Use Cases:\n\n*   **Secure data storage:** Use this code to generate secure keys for encrypting sensitive data, such as user credentials or financial information.\n*   **Cryptographic protocols:** Integrate this code into cryptographic protocols, such as TLS or SSH, to ensure secure key exchange and encryption.\n*   **Key management systems:** Utilize this code in key management systems to generate and manage secure keys for various applications.\n\nBy following this example and using the provided code, you can ensure that your application generates secure keys and"
      ]
    ],
    "filtered_resps": [
      " } [/ code]\nThis code defines an initialization function that ensures the system is properly set up for key generation. It first checks if the system is already initialized, and if so, it returns immediately. Otherwise, it runs a unit test, adds entropy from the CPU, and asserts that the entropy count is sufficient.\nTo use this code, you can call the `initialize()` function at the beginning of your application, like this:\n[ code ] // main.js const keyUtils = require ('keyutils') ; let initialized = false ; function initialize ( ) {... } initialize ( ) ; // Rest of your application code here [/ code]\nThis ensures that your application is properly set up for secure key generation.\n\nExample Use Cases:\n\n*   **Secure data storage:** Use this code to generate secure keys for encrypting sensitive data, such as user credentials or financial information.\n*   **Cryptographic protocols:** Integrate this code into cryptographic protocols, such as TLS or SSH, to ensure secure key exchange and encryption.\n*   **Key management systems:** Utilize this code in key management systems to generate and manage secure keys for various applications.\n\nBy following this example and using the provided code, you can ensure that your application generates secure keys and"
    ],
    "smoothed_bleu_4": 0.5790344614853463
  },
  {
    "doc_id": 21,
    "doc": {
      "id": 21,
      "repo": "everitoken/evtjs",
      "path": "src/bigi/lib/bigi.js",
      "func_name": "montConvert",
      "original_string": "function montConvert(x) {\n  var r = new BigInteger()\n  x.abs()\n    .dlShiftTo(this.m.t, r)\n  r.divRemTo(this.m, null, r)\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\n  return r\n}",
      "language": "javascript",
      "code": "function montConvert(x) {\n  var r = new BigInteger()\n  x.abs()\n    .dlShiftTo(this.m.t, r)\n  r.divRemTo(this.m, null, r)\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\n  return r\n}",
      "code_tokens": [
        "function",
        "montConvert",
        "(",
        "x",
        ")",
        "{",
        "var",
        "r",
        "=",
        "new",
        "BigInteger",
        "(",
        ")",
        "x",
        ".",
        "abs",
        "(",
        ")",
        ".",
        "dlShiftTo",
        "(",
        "this",
        ".",
        "m",
        ".",
        "t",
        ",",
        "r",
        ")",
        "r",
        ".",
        "divRemTo",
        "(",
        "this",
        ".",
        "m",
        ",",
        "null",
        ",",
        "r",
        ")",
        "if",
        "(",
        "x",
        ".",
        "s",
        "<",
        "0",
        "&&",
        "r",
        ".",
        "compareTo",
        "(",
        "BigInteger",
        ".",
        "ZERO",
        ")",
        ">",
        "0",
        ")",
        "this",
        ".",
        "m",
        ".",
        "subTo",
        "(",
        "r",
        ",",
        "r",
        ")",
        "return",
        "r",
        "}"
      ],
      "docstring": "xR mod m",
      "docstring_tokens": [
        "xR",
        "mod",
        "m"
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/bigi/lib/bigi.js#L545-L552"
    },
    "target": "xR mod m",
    "arguments": [
      [
        "function montConvert ( x ) { var r = new BigInteger ( ) x . abs ( ) . dlShiftTo ( this . m . t , r ) r . divRemTo ( this . m , null , r ) if ( x . s < 0 && r . compareTo ( BigInteger . ZERO ) > 0 ) this . m . subTo ( r , r ) return r }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " public BigInteger modInverse ( ) { if ( this. v. inv!= null ) return this. v. inv ; var x = this. v. x var y = this. v. y var z = BigInteger. ONE var i = 0 ; while ( i ++ < 2 * this. v. limit ) { if ( x. modPow ( this. m. t - 1, z ). compareTo ( BigInteger. ZERO ) == 0 ) break ; if ( x. modPow ( this. m. t - 2, z ). compareTo ( BigInteger. ZERO ) == 0 ) break ; x = x. modPow ( 2, z ) y = y. modPow ( 2, z ) if ( x. compareTo ( y ) > 0 ) { x = x. sub ( y ) z = z. sub ( z. divide ( 2 ) ) } } if ( x. compareTo ( BigInteger. ZERO ) == 0 ) throw new ArithmeticException ( \"Modular inverse does not exist\" ) this. v. inv = x return x } public BigInteger modPow ( int exponent, BigInteger m ) { var x = this. v. x var y"
      ]
    ],
    "filtered_resps": [
      " public BigInteger modInverse ( ) { if ( this. v. inv!= null ) return this. v. inv ; var x = this. v. x var y = this. v. y var z = BigInteger. ONE var i = 0 ; while ( i ++ < 2 * this. v. limit ) { if ( x. modPow ( this. m. t - 1, z ). compareTo ( BigInteger. ZERO ) == 0 ) break ; if ( x. modPow ( this. m. t - 2, z ). compareTo ( BigInteger. ZERO ) == 0 ) break ; x = x. modPow ( 2, z ) y = y. modPow ( 2, z ) if ( x. compareTo ( y ) > 0 ) { x = x. sub ( y ) z = z. sub ( z. divide ( 2 ) ) } } if ( x. compareTo ( BigInteger. ZERO ) == 0 ) throw new ArithmeticException ( \"Modular inverse does not exist\" ) this. v. inv = x return x } public BigInteger modPow ( int exponent, BigInteger m ) { var x = this. v. x var y"
    ],
    "smoothed_bleu_4": 0.4250823458433812
  },
  {
    "doc_id": 22,
    "doc": {
      "id": 22,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/signature.js",
      "func_name": "verify",
      "original_string": "function verify(data, pubkey, encoding = \"utf8\") {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data, encoding);\n        }\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\n        data = hash.sha256(data);\n        return verifyHash(data, pubkey);\n    }",
      "language": "javascript",
      "code": "function verify(data, pubkey, encoding = \"utf8\") {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data, encoding);\n        }\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\n        data = hash.sha256(data);\n        return verifyHash(data, pubkey);\n    }",
      "code_tokens": [
        "function",
        "verify",
        "(",
        "data",
        ",",
        "pubkey",
        ",",
        "encoding",
        "=",
        "\"utf8\"",
        ")",
        "{",
        "if",
        "(",
        "typeof",
        "data",
        "===",
        "\"string\"",
        ")",
        "{",
        "data",
        "=",
        "Buffer",
        ".",
        "from",
        "(",
        "data",
        ",",
        "encoding",
        ")",
        ";",
        "}",
        "assert",
        "(",
        "Buffer",
        ".",
        "isBuffer",
        "(",
        "data",
        ")",
        ",",
        "\"data is a required String or Buffer\"",
        ")",
        ";",
        "data",
        "=",
        "hash",
        ".",
        "sha256",
        "(",
        "data",
        ")",
        ";",
        "return",
        "verifyHash",
        "(",
        "data",
        ",",
        "pubkey",
        ")",
        ";",
        "}"
      ],
      "docstring": "Verify signed data.\n\n@arg {String|Buffer} data - full data\n@arg {pubkey|PublicKey} pubkey - EOSKey..\n@arg {String} [encoding = 'utf8'] - data encoding (if data is a string)\n\n@return {boolean}",
      "docstring_tokens": [
        "Verify",
        "signed",
        "data",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/signature.js#L33-L40"
    },
    "target": "Verify signed data .",
    "arguments": [
      [
        "function verify ( data , pubkey , encoding = \"utf8\" ) { if ( typeof data === \"string\" ) { data = Buffer . from ( data , encoding ) ; } assert ( Buffer . isBuffer ( data ) , \"data is a required String or Buffer\" ) ; data = hash . sha256 ( data ) ; return verifyHash ( data , pubkey ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\nIn this example, we define a `verify` function that takes three parameters: `data`, `pubkey`, and `encoding`. The `data` parameter can be either a string or a Buffer, so we check the type and convert it to a Buffer if necessary. We then hash the `data` using SHA-256 and call the `verifyHash` function with the hashed data and the `pubkey` as arguments.\nThe `verifyHash` function is not shown in this example, but it would be responsible for verifying the signature using the `hash` function. This function would likely use the `crypto.verify` method to check the signature against the hash of the data.\nHere's an example of how the `verifyHash` function could be implemented:\n```javascript\nfunction verifyHash ( hash, pubkey ) { const key = await getPrivateKey ( pubkey ) ; return crypto. verify ( hash, key ) ; }\n```\nIn this example, we define a `verifyHash` function that takes two parameters: `hash` and `pubkey`. We use the `getPrivateKey` function to retrieve the private key associated with the `pubkey`, and then use the `crypto.verify` method to verify the signature against the"
      ]
    ],
    "filtered_resps": [
      " ```\nIn this example, we define a `verify` function that takes three parameters: `data`, `pubkey`, and `encoding`. The `data` parameter can be either a string or a Buffer, so we check the type and convert it to a Buffer if necessary. We then hash the `data` using SHA-256 and call the `verifyHash` function with the hashed data and the `pubkey` as arguments.\nThe `verifyHash` function is not shown in this example, but it would be responsible for verifying the signature using the `hash` function. This function would likely use the `crypto.verify` method to check the signature against the hash of the data.\nHere's an example of how the `verifyHash` function could be implemented:\n```javascript\nfunction verifyHash ( hash, pubkey ) { const key = await getPrivateKey ( pubkey ) ; return crypto. verify ( hash, key ) ; }\n```\nIn this example, we define a `verifyHash` function that takes two parameters: `hash` and `pubkey`. We use the `getPrivateKey` function to retrieve the private key associated with the `pubkey`, and then use the `crypto.verify` method to verify the signature against the"
    ],
    "smoothed_bleu_4": 0.6254118602642711
  },
  {
    "doc_id": 23,
    "doc": {
      "id": 23,
      "repo": "everitoken/evtjs",
      "path": "src/ecc/signature.js",
      "func_name": "recover",
      "original_string": "function recover(data, encoding = \"utf8\") {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data, encoding);\n        }\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\n        data = hash.sha256(data);\n\n        return recoverHash(data);\n    }",
      "language": "javascript",
      "code": "function recover(data, encoding = \"utf8\") {\n        if (typeof data === \"string\") {\n            data = Buffer.from(data, encoding);\n        }\n        assert(Buffer.isBuffer(data), \"data is a required String or Buffer\");\n        data = hash.sha256(data);\n\n        return recoverHash(data);\n    }",
      "code_tokens": [
        "function",
        "recover",
        "(",
        "data",
        ",",
        "encoding",
        "=",
        "\"utf8\"",
        ")",
        "{",
        "if",
        "(",
        "typeof",
        "data",
        "===",
        "\"string\"",
        ")",
        "{",
        "data",
        "=",
        "Buffer",
        ".",
        "from",
        "(",
        "data",
        ",",
        "encoding",
        ")",
        ";",
        "}",
        "assert",
        "(",
        "Buffer",
        ".",
        "isBuffer",
        "(",
        "data",
        ")",
        ",",
        "\"data is a required String or Buffer\"",
        ")",
        ";",
        "data",
        "=",
        "hash",
        ".",
        "sha256",
        "(",
        "data",
        ")",
        ";",
        "return",
        "recoverHash",
        "(",
        "data",
        ")",
        ";",
        "}"
      ],
      "docstring": "Recover the public key used to create this signature using full data.\n\n@arg {String|Buffer} data - full data\n@arg {String} [encoding = 'utf8'] - data encoding (if string)\n\n@return {PublicKey}",
      "docstring_tokens": [
        "Recover",
        "the",
        "public",
        "key",
        "used",
        "to",
        "create",
        "this",
        "signature",
        "using",
        "full",
        "data",
        "."
      ],
      "sha": "87d5dac3ae3205e654821c03c010e4738fc4b8a1",
      "url": "https://github.com/everitoken/evtjs/blob/87d5dac3ae3205e654821c03c010e4738fc4b8a1/src/ecc/signature.js#L77-L85"
    },
    "target": "Recover the public key used to create this signature using full data .",
    "arguments": [
      [
        "function recover ( data , encoding = \"utf8\" ) { if ( typeof data === \"string\" ) { data = Buffer . from ( data , encoding ) ; } assert ( Buffer . isBuffer ( data ) , \"data is a required String or Buffer\" ) ; data = hash . sha256 ( data ) ; return recoverHash ( data ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function recoverHash ( hash ) { var words, prefix ; words = wordlist. split ( / \\s + / ) ; var nonce = 0 ; var hashBuffer = Buffer. from ( hash, \"hex\" ) ; var hashString = hashBuffer. toString ( \"hex\" ) ; var result = { success : false, hash : hashString } ; while (! result. success ) { nonce ++ ; var hash32 = hashBuffer. slice ( 0, 32 ) ; var hash = hash32. toString ( \"hex\" ) ; var hashBytes = Buffer. from ( hash, \"hex\" ) ; var wordsFromHash = words [ parseInt ( hashBytes. slice ( 0, 4 ). toString ( 16 ), 16 ) ] ; var key = Buffer. from ( wordsFromHash. slice ( 0, 5 ), \"utf8\" ) ; var keyBytes = Buffer. from ( key. toString ( \"utf8\" ), \"utf8\" ) ; var hashMod = hashBytes. slice ( 0, 8 ) ; var hashMod32 = hashMod. slice ( 0, 4 ) ; var hashModInt ="
      ]
    ],
    "filtered_resps": [
      " function recoverHash ( hash ) { var words, prefix ; words = wordlist. split ( / \\s + / ) ; var nonce = 0 ; var hashBuffer = Buffer. from ( hash, \"hex\" ) ; var hashString = hashBuffer. toString ( \"hex\" ) ; var result = { success : false, hash : hashString } ; while (! result. success ) { nonce ++ ; var hash32 = hashBuffer. slice ( 0, 32 ) ; var hash = hash32. toString ( \"hex\" ) ; var hashBytes = Buffer. from ( hash, \"hex\" ) ; var wordsFromHash = words [ parseInt ( hashBytes. slice ( 0, 4 ). toString ( 16 ), 16 ) ] ; var key = Buffer. from ( wordsFromHash. slice ( 0, 5 ), \"utf8\" ) ; var keyBytes = Buffer. from ( key. toString ( \"utf8\" ), \"utf8\" ) ; var hashMod = hashBytes. slice ( 0, 8 ) ; var hashMod32 = hashMod. slice ( 0, 4 ) ; var hashModInt ="
    ],
    "smoothed_bleu_4": 0.5629426211681089
  },
  {
    "doc_id": 24,
    "doc": {
      "id": 24,
      "repo": "zaproxy/zaproxy",
      "path": "src/scripts/templates/targeted/Find HTML comments.js",
      "func_name": "invokeWith",
      "original_string": "function invokeWith(msg) {\n\t// Debugging can be done using println like this\n\tprint('Finding comments in ' + msg.getRequestHeader().getURI().toString()); \n\n\tvar body = msg.getResponseBody().toString()\n\t// Look for html comments\n\tif (body.indexOf('<!--') > 0) {\n\t\tvar o = body.indexOf('<!--');\n\t\twhile (o > 0) {\n\t\t\tvar e = body.indexOf('-->', o);\n\t\t\tprint(\"\\t\" + body.substr(o,e-o+3)) \n\t\t\to = body.indexOf('<!--', e);\n\t\t}\n\t}\n}",
      "language": "javascript",
      "code": "function invokeWith(msg) {\n\t// Debugging can be done using println like this\n\tprint('Finding comments in ' + msg.getRequestHeader().getURI().toString()); \n\n\tvar body = msg.getResponseBody().toString()\n\t// Look for html comments\n\tif (body.indexOf('<!--') > 0) {\n\t\tvar o = body.indexOf('<!--');\n\t\twhile (o > 0) {\n\t\t\tvar e = body.indexOf('-->', o);\n\t\t\tprint(\"\\t\" + body.substr(o,e-o+3)) \n\t\t\to = body.indexOf('<!--', e);\n\t\t}\n\t}\n}",
      "code_tokens": [
        "function",
        "invokeWith",
        "(",
        "msg",
        ")",
        "{",
        "// Debugging can be done using println like this",
        "print",
        "(",
        "'Finding comments in '",
        "+",
        "msg",
        ".",
        "getRequestHeader",
        "(",
        ")",
        ".",
        "getURI",
        "(",
        ")",
        ".",
        "toString",
        "(",
        ")",
        ")",
        ";",
        "var",
        "body",
        "=",
        "msg",
        ".",
        "getResponseBody",
        "(",
        ")",
        ".",
        "toString",
        "(",
        ")",
        "// Look for html comments",
        "if",
        "(",
        "body",
        ".",
        "indexOf",
        "(",
        "'<!--'",
        ")",
        ">",
        "0",
        ")",
        "{",
        "var",
        "o",
        "=",
        "body",
        ".",
        "indexOf",
        "(",
        "'<!--'",
        ")",
        ";",
        "while",
        "(",
        "o",
        ">",
        "0",
        ")",
        "{",
        "var",
        "e",
        "=",
        "body",
        ".",
        "indexOf",
        "(",
        "'-->'",
        ",",
        "o",
        ")",
        ";",
        "print",
        "(",
        "\"\\t\"",
        "+",
        "body",
        ".",
        "substr",
        "(",
        "o",
        ",",
        "e",
        "-",
        "o",
        "+",
        "3",
        ")",
        ")",
        "o",
        "=",
        "body",
        ".",
        "indexOf",
        "(",
        "'<!--'",
        ",",
        "e",
        ")",
        ";",
        "}",
        "}",
        "}"
      ],
      "docstring": "Targeted scripts can only be invoked by you, the user, eg via a right-click option on the Sites or History tabs",
      "docstring_tokens": [
        "Targeted",
        "scripts",
        "can",
        "only",
        "be",
        "invoked",
        "by",
        "you",
        "the",
        "user",
        "eg",
        "via",
        "a",
        "right",
        "-",
        "click",
        "option",
        "on",
        "the",
        "Sites",
        "or",
        "History",
        "tabs"
      ],
      "sha": "688486b806508970d048228059045c9f5b6725d0",
      "url": "https://github.com/zaproxy/zaproxy/blob/688486b806508970d048228059045c9f5b6725d0/src/scripts/templates/targeted/Find HTML comments.js#L3-L17"
    },
    "target": "Targeted scripts can only be invoked by you the user eg via a right - click option on the Sites or History tabs",
    "arguments": [
      [
        "function invokeWith ( msg ) { // Debugging can be done using println like this print ( 'Finding comments in ' + msg . getRequestHeader ( ) . getURI ( ) . toString ( ) ) ; var body = msg . getResponseBody ( ) . toString ( ) // Look for html comments if ( body . indexOf ( '<!--' ) > 0 ) { var o = body . indexOf ( '<!--' ) ; while ( o > 0 ) { var e = body . indexOf ( '-->' , o ) ; print ( \"\\t\" + body . substr ( o , e - o + 3 ) ) o = body . indexOf ( '<!--' , e ) ; } } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } ``` Unfortunately this code does not work as expected. The indexOf function is a case sensitive method and the script will not find comments if they are in lowercase. Also it may miss some comments if they are not consecutive in the HTML code. I made an error in the logic of my while loop. To fix this you can add the following line before the while loop: ` body = body.toLowerCase();` This will ensure that the script looks for both lowercase and uppercase comments. To fix the while loop you can change the line ` while ( o > 0 ) {` to `while (o!= -1) {` and add a check to see if there is a comment before the while loop. Here is the corrected code: ```javascript // Add this line to convert the body to lowercase var body = body. toLowerCase ( ) ; // Set the starting index of the comment to -1 var o = - 1 ; // Use the following while loop to print all the comments while ( o!= - 1 ) { // Get the starting index of the comment var start = o ; // Look for the end of the comment var end = body. indexOf ( '-->', start ) ; // If we found a comment, print"
      ]
    ],
    "filtered_resps": [
      " } ``` Unfortunately this code does not work as expected. The indexOf function is a case sensitive method and the script will not find comments if they are in lowercase. Also it may miss some comments if they are not consecutive in the HTML code. I made an error in the logic of my while loop. To fix this you can add the following line before the while loop: ` body = body.toLowerCase();` This will ensure that the script looks for both lowercase and uppercase comments. To fix the while loop you can change the line ` while ( o > 0 ) {` to `while (o!= -1) {` and add a check to see if there is a comment before the while loop. Here is the corrected code: ```javascript // Add this line to convert the body to lowercase var body = body. toLowerCase ( ) ; // Set the starting index of the comment to -1 var o = - 1 ; // Use the following while loop to print all the comments while ( o!= - 1 ) { // Get the starting index of the comment var start = o ; // Look for the end of the comment var end = body. indexOf ( '-->', start ) ; // If we found a comment, print"
    ],
    "smoothed_bleu_4": 0.5945270090983975
  },
  {
    "doc_id": 25,
    "doc": {
      "id": 25,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Form/FormGroup.js",
      "func_name": "FormGroup",
      "original_string": "function FormGroup(props) {\n  const { children, className, grouped, inline, unstackable, widths } = props\n\n  const classes = cx(\n    useKeyOnly(grouped, 'grouped'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useWidthProp(widths, null, true),\n    'fields',\n    className,\n  )\n  const rest = getUnhandledProps(FormGroup, props)\n  const ElementType = getElementType(FormGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FormGroup(props) {\n  const { children, className, grouped, inline, unstackable, widths } = props\n\n  const classes = cx(\n    useKeyOnly(grouped, 'grouped'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useWidthProp(widths, null, true),\n    'fields',\n    className,\n  )\n  const rest = getUnhandledProps(FormGroup, props)\n  const ElementType = getElementType(FormGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FormGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "grouped",
        ",",
        "inline",
        ",",
        "unstackable",
        ",",
        "widths",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "grouped",
        ",",
        "'grouped'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inline",
        ",",
        "'inline'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "unstackable",
        ",",
        "'unstackable'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "widths",
        ",",
        "null",
        ",",
        "true",
        ")",
        ",",
        "'fields'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FormGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FormGroup",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A set of fields can appear grouped together.\n@see Form",
      "docstring_tokens": [
        "A",
        "set",
        "of",
        "fields",
        "can",
        "appear",
        "grouped",
        "together",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Form/FormGroup.js#L18-L37"
    },
    "target": "A set of fields can appear grouped together .",
    "arguments": [
      [
        "function FormGroup ( props ) { const { children , className , grouped , inline , unstackable , widths } = props const classes = cx ( useKeyOnly ( grouped , 'grouped' ) , useKeyOnly ( inline , 'inline' ) , useKeyOnly ( unstackable , 'unstackable' ) , useWidthProp ( widths , null , true ) , 'fields' , className , ) const rest = getUnhandledProps ( FormGroup , props ) const ElementType = getElementType ( FormGroup , props ) return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default FormGroup ; ```\n  - If the field is not grouped, the group class is removed from the classes array. ``` class FormGroup { //... const classes = cx (...,! grouped && 'grouped' ) ; //... } ```\n  - The unstackable class is removed from the classes array if the field is grouped. ``` class FormGroup { //... const classes = cx (..., grouped &&! unstackable && 'unstackable' ) ; //... } ```\n  - The field class is removed from the classes array if the field is unstackable. ``` class FormGroup { //... const classes = cx (...,! unstackable && 'field' ) ; //... } ```\n  - The field class is removed from the classes array if the field is inline. ``` class FormGroup { //... const classes = cx (...,! inline && 'field' ) ; //... } ```\n  - The group class is removed from the classes array if the field is inline. ``` class FormGroup { //... const classes = cx (...,! inline && 'group' ) ; //... } ```\n  - The widths class is removed from the classes array if the field is grouped or unstackable"
      ]
    ],
    "filtered_resps": [
      " export default FormGroup ; ```\n  - If the field is not grouped, the group class is removed from the classes array. ``` class FormGroup { //... const classes = cx (...,! grouped && 'grouped' ) ; //... } ```\n  - The unstackable class is removed from the classes array if the field is grouped. ``` class FormGroup { //... const classes = cx (..., grouped &&! unstackable && 'unstackable' ) ; //... } ```\n  - The field class is removed from the classes array if the field is unstackable. ``` class FormGroup { //... const classes = cx (...,! unstackable && 'field' ) ; //... } ```\n  - The field class is removed from the classes array if the field is inline. ``` class FormGroup { //... const classes = cx (...,! inline && 'field' ) ; //... } ```\n  - The group class is removed from the classes array if the field is inline. ``` class FormGroup { //... const classes = cx (...,! inline && 'group' ) ; //... } ```\n  - The widths class is removed from the classes array if the field is grouped or unstackable"
    ],
    "smoothed_bleu_4": 0.3987298289394812
  },
  {
    "doc_id": 26,
    "doc": {
      "id": 26,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Loader/Loader.js",
      "func_name": "Loader",
      "original_string": "function Loader(props) {\n  const {\n    active,\n    children,\n    className,\n    content,\n    disabled,\n    indeterminate,\n    inline,\n    inverted,\n    size,\n  } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(indeterminate, 'indeterminate'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(children || content, 'text'),\n    useKeyOrValueAndKey(inline, 'inline'),\n    'loader',\n    className,\n  )\n  const rest = getUnhandledProps(Loader, props)\n  const ElementType = getElementType(Loader, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Loader(props) {\n  const {\n    active,\n    children,\n    className,\n    content,\n    disabled,\n    indeterminate,\n    inline,\n    inverted,\n    size,\n  } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(indeterminate, 'indeterminate'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(children || content, 'text'),\n    useKeyOrValueAndKey(inline, 'inline'),\n    'loader',\n    className,\n  )\n  const rest = getUnhandledProps(Loader, props)\n  const ElementType = getElementType(Loader, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Loader",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "active",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "disabled",
        ",",
        "indeterminate",
        ",",
        "inline",
        ",",
        "inverted",
        ",",
        "size",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "active",
        ",",
        "'active'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "indeterminate",
        ",",
        "'indeterminate'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "children",
        "||",
        "content",
        ",",
        "'text'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "inline",
        ",",
        "'inline'",
        ")",
        ",",
        "'loader'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Loader",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Loader",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A loader alerts a user to wait for an activity to complete.\n@see Dimmer",
      "docstring_tokens": [
        "A",
        "loader",
        "alerts",
        "a",
        "user",
        "to",
        "wait",
        "for",
        "an",
        "activity",
        "to",
        "complete",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Loader/Loader.js#L19-L52"
    },
    "target": "A loader alerts a user to wait for an activity to complete .",
    "arguments": [
      [
        "function Loader ( props ) { const { active , children , className , content , disabled , indeterminate , inline , inverted , size , } = props const classes = cx ( 'ui' , size , useKeyOnly ( active , 'active' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( indeterminate , 'indeterminate' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( children || content , 'text' ) , useKeyOrValueAndKey ( inline , 'inline' ) , 'loader' , className , ) const rest = getUnhandledProps ( Loader , props ) const ElementType = getElementType ( Loader , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Loader. defaultProps = { size :'medium', } Loader. displayName = 'Loader' export default Loader ; ```\n\nHere is a description of the code:\n\n*   The `Loader` component is a utility component that displays a loading indicator.\n*   It takes several props, including `active`, `children`, `className`, `content`, `disabled`, `indeterminate`, `inline`, `inverted`, and `size`.\n*   The `classes` variable is generated using the `cx` function, which combines the class names for the loader component based on the props.\n*   The `rest` variable is an object that contains the props that are not handled by the loader component, such as `onClick` or `onMouseOver`.\n*   The `ElementType` variable is the HTML element that the loader component should render as, which is determined by the `getElementType` function.\n*   The loader component returns a JSX element that wraps the `children` or `content` prop, depending on whether it is present.\n*   The `Loader` component also sets some default props and a display name.\n\nLet me know if you'd like me to explain any part of the code in more detail! \n\n### Updated code"
      ]
    ],
    "filtered_resps": [
      " Loader. defaultProps = { size :'medium', } Loader. displayName = 'Loader' export default Loader ; ```\n\nHere is a description of the code:\n\n*   The `Loader` component is a utility component that displays a loading indicator.\n*   It takes several props, including `active`, `children`, `className`, `content`, `disabled`, `indeterminate`, `inline`, `inverted`, and `size`.\n*   The `classes` variable is generated using the `cx` function, which combines the class names for the loader component based on the props.\n*   The `rest` variable is an object that contains the props that are not handled by the loader component, such as `onClick` or `onMouseOver`.\n*   The `ElementType` variable is the HTML element that the loader component should render as, which is determined by the `getElementType` function.\n*   The loader component returns a JSX element that wraps the `children` or `content` prop, depending on whether it is present.\n*   The `Loader` component also sets some default props and a display name.\n\nLet me know if you'd like me to explain any part of the code in more detail! \n\n### Updated code"
    ],
    "smoothed_bleu_4": 0.6499842157195351
  },
  {
    "doc_id": 27,
    "doc": {
      "id": 27,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Item/ItemContent.js",
      "func_name": "ItemContent",
      "original_string": "function ItemContent(props) {\n  const { children, className, content, description, extra, header, meta, verticalAlign } = props\n\n  const classes = cx(useVerticalAlignProp(verticalAlign), 'content', className)\n  const rest = getUnhandledProps(ItemContent, props)\n  const ElementType = getElementType(ItemContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ItemHeader.create(header, { autoGenerateKey: false })}\n      {ItemMeta.create(meta, { autoGenerateKey: false })}\n      {ItemDescription.create(description, { autoGenerateKey: false })}\n      {ItemExtra.create(extra, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function ItemContent(props) {\n  const { children, className, content, description, extra, header, meta, verticalAlign } = props\n\n  const classes = cx(useVerticalAlignProp(verticalAlign), 'content', className)\n  const rest = getUnhandledProps(ItemContent, props)\n  const ElementType = getElementType(ItemContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ItemHeader.create(header, { autoGenerateKey: false })}\n      {ItemMeta.create(meta, { autoGenerateKey: false })}\n      {ItemDescription.create(description, { autoGenerateKey: false })}\n      {ItemExtra.create(extra, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "ItemContent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "description",
        ",",
        "extra",
        ",",
        "header",
        ",",
        "meta",
        ",",
        "verticalAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "'content'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ItemContent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "ItemContent",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "ItemHeader",
        ".",
        "create",
        "(",
        "header",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "ItemMeta",
        ".",
        "create",
        "(",
        "meta",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "ItemDescription",
        ".",
        "create",
        "(",
        "description",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "ItemExtra",
        ".",
        "create",
        "(",
        "extra",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "An item can contain content.",
      "docstring_tokens": [
        "An",
        "item",
        "can",
        "contain",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Item/ItemContent.js#L21-L45"
    },
    "target": "An item can contain content .",
    "arguments": [
      [
        "function ItemContent ( props ) { const { children , className , content , description , extra , header , meta , verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ) , 'content' , className ) const rest = getUnhandledProps ( ItemContent , props ) const ElementType = getElementType ( ItemContent , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { ItemHeader . create ( header , { autoGenerateKey : false } ) } { ItemMeta . create ( meta , { autoGenerateKey : false } ) } { ItemDescription . create ( description , { autoGenerateKey : false } ) } { ItemExtra . create ( extra , { autoGenerateKey : false } ) } { content } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ItemContent. propTypes = { className : React. PropTypes. string, content : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), description : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), extra : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), header : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), meta : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), verticalAlign : React. PropTypes. oneOf ( ['middle', 'top', 'bottom' ] ), } ItemContent. displayName = 'ItemContent' export default ItemContent ``` Like the rest of the Item component, this code is relatively complex and requires a good understanding of React and the design system. The code is mostly focused on creating a visual container for the item's content, and it uses several utility functions and components from the design system to achieve this. The code is well-structured and easy to follow, with clear variable names and comments. However"
      ]
    ],
    "filtered_resps": [
      " ItemContent. propTypes = { className : React. PropTypes. string, content : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), description : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), extra : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), header : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), meta : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. element ] ), verticalAlign : React. PropTypes. oneOf ( ['middle', 'top', 'bottom' ] ), } ItemContent. displayName = 'ItemContent' export default ItemContent ``` Like the rest of the Item component, this code is relatively complex and requires a good understanding of React and the design system. The code is mostly focused on creating a visual container for the item's content, and it uses several utility functions and components from the design system to achieve this. The code is well-structured and easy to follow, with clear variable names and comments. However"
    ],
    "smoothed_bleu_4": 0.545526132573025
  },
  {
    "doc_id": 28,
    "doc": {
      "id": 28,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Table/Table.js",
      "func_name": "Table",
      "original_string": "function Table(props) {\n  const {\n    attached,\n    basic,\n    celled,\n    children,\n    className,\n    collapsing,\n    color,\n    columns,\n    compact,\n    definition,\n    fixed,\n    footerRow,\n    headerRow,\n    headerRows,\n    inverted,\n    padded,\n    renderBodyRow,\n    selectable,\n    singleLine,\n    size,\n    sortable,\n    stackable,\n    striped,\n    structured,\n    tableData,\n    textAlign,\n    unstackable,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(celled, 'celled'),\n    useKeyOnly(collapsing, 'collapsing'),\n    useKeyOnly(definition, 'definition'),\n    useKeyOnly(fixed, 'fixed'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(selectable, 'selectable'),\n    useKeyOnly(singleLine, 'single line'),\n    useKeyOnly(sortable, 'sortable'),\n    useKeyOnly(stackable, 'stackable'),\n    useKeyOnly(striped, 'striped'),\n    useKeyOnly(structured, 'structured'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useKeyOrValueAndKey(basic, 'basic'),\n    useKeyOrValueAndKey(compact, 'compact'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column'),\n    'table',\n    className,\n  )\n  const rest = getUnhandledProps(Table, props)\n  const ElementType = getElementType(Table, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const hasHeaderRows = headerRow || headerRows\n  const headerShorthandOptions = { defaultProps: { cellAs: 'th' } }\n  const headerElement = hasHeaderRows && (\n    <TableHeader>\n      {TableRow.create(headerRow, headerShorthandOptions)}\n      {_.map(headerRows, (data) => TableRow.create(data, headerShorthandOptions))}\n    </TableHeader>\n  )\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {headerElement}\n      <TableBody>\n        {renderBodyRow &&\n          _.map(tableData, (data, index) => TableRow.create(renderBodyRow(data, index)))}\n      </TableBody>\n      {footerRow && <TableFooter>{TableRow.create(footerRow)}</TableFooter>}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Table(props) {\n  const {\n    attached,\n    basic,\n    celled,\n    children,\n    className,\n    collapsing,\n    color,\n    columns,\n    compact,\n    definition,\n    fixed,\n    footerRow,\n    headerRow,\n    headerRows,\n    inverted,\n    padded,\n    renderBodyRow,\n    selectable,\n    singleLine,\n    size,\n    sortable,\n    stackable,\n    striped,\n    structured,\n    tableData,\n    textAlign,\n    unstackable,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(celled, 'celled'),\n    useKeyOnly(collapsing, 'collapsing'),\n    useKeyOnly(definition, 'definition'),\n    useKeyOnly(fixed, 'fixed'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(selectable, 'selectable'),\n    useKeyOnly(singleLine, 'single line'),\n    useKeyOnly(sortable, 'sortable'),\n    useKeyOnly(stackable, 'stackable'),\n    useKeyOnly(striped, 'striped'),\n    useKeyOnly(structured, 'structured'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useKeyOrValueAndKey(basic, 'basic'),\n    useKeyOrValueAndKey(compact, 'compact'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column'),\n    'table',\n    className,\n  )\n  const rest = getUnhandledProps(Table, props)\n  const ElementType = getElementType(Table, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const hasHeaderRows = headerRow || headerRows\n  const headerShorthandOptions = { defaultProps: { cellAs: 'th' } }\n  const headerElement = hasHeaderRows && (\n    <TableHeader>\n      {TableRow.create(headerRow, headerShorthandOptions)}\n      {_.map(headerRows, (data) => TableRow.create(data, headerShorthandOptions))}\n    </TableHeader>\n  )\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {headerElement}\n      <TableBody>\n        {renderBodyRow &&\n          _.map(tableData, (data, index) => TableRow.create(renderBodyRow(data, index)))}\n      </TableBody>\n      {footerRow && <TableFooter>{TableRow.create(footerRow)}</TableFooter>}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Table",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "basic",
        ",",
        "celled",
        ",",
        "children",
        ",",
        "className",
        ",",
        "collapsing",
        ",",
        "color",
        ",",
        "columns",
        ",",
        "compact",
        ",",
        "definition",
        ",",
        "fixed",
        ",",
        "footerRow",
        ",",
        "headerRow",
        ",",
        "headerRows",
        ",",
        "inverted",
        ",",
        "padded",
        ",",
        "renderBodyRow",
        ",",
        "selectable",
        ",",
        "singleLine",
        ",",
        "size",
        ",",
        "sortable",
        ",",
        "stackable",
        ",",
        "striped",
        ",",
        "structured",
        ",",
        "tableData",
        ",",
        "textAlign",
        ",",
        "unstackable",
        ",",
        "verticalAlign",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "celled",
        ",",
        "'celled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "collapsing",
        ",",
        "'collapsing'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "definition",
        ",",
        "'definition'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "fixed",
        ",",
        "'fixed'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "selectable",
        ",",
        "'selectable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "singleLine",
        ",",
        "'single line'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "sortable",
        ",",
        "'sortable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stackable",
        ",",
        "'stackable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "striped",
        ",",
        "'striped'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "structured",
        ",",
        "'structured'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "unstackable",
        ",",
        "'unstackable'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "basic",
        ",",
        "'basic'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "compact",
        ",",
        "'compact'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "padded",
        ",",
        "'padded'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "columns",
        ",",
        "'column'",
        ")",
        ",",
        "'table'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Table",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Table",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "hasHeaderRows",
        "=",
        "headerRow",
        "||",
        "headerRows",
        "const",
        "headerShorthandOptions",
        "=",
        "{",
        "defaultProps",
        ":",
        "{",
        "cellAs",
        ":",
        "'th'",
        "}",
        "}",
        "const",
        "headerElement",
        "=",
        "hasHeaderRows",
        "&&",
        "(",
        "<",
        "TableHeader",
        ">",
        "\n      ",
        "{",
        "TableRow",
        ".",
        "create",
        "(",
        "headerRow",
        ",",
        "headerShorthandOptions",
        ")",
        "}",
        "\n      ",
        "{",
        "_",
        ".",
        "map",
        "(",
        "headerRows",
        ",",
        "(",
        "data",
        ")",
        "=>",
        "TableRow",
        ".",
        "create",
        "(",
        "data",
        ",",
        "headerShorthandOptions",
        ")",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "TableHeader",
        ">",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "headerElement",
        "}",
        "\n      ",
        "<",
        "TableBody",
        ">",
        "\n        ",
        "{",
        "renderBodyRow",
        "&&",
        "_",
        ".",
        "map",
        "(",
        "tableData",
        ",",
        "(",
        "data",
        ",",
        "index",
        ")",
        "=>",
        "TableRow",
        ".",
        "create",
        "(",
        "renderBodyRow",
        "(",
        "data",
        ",",
        "index",
        ")",
        ")",
        ")",
        "}",
        "\n      ",
        "<",
        "/",
        "TableBody",
        ">",
        "\n      ",
        "{",
        "footerRow",
        "&&",
        "<",
        "TableFooter",
        ">",
        "{",
        "TableRow",
        ".",
        "create",
        "(",
        "footerRow",
        ")",
        "}",
        "<",
        "/",
        "TableFooter",
        ">",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A table displays a collections of data grouped into rows.",
      "docstring_tokens": [
        "A",
        "table",
        "displays",
        "a",
        "collections",
        "of",
        "data",
        "grouped",
        "into",
        "rows",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Table/Table.js#L28-L116"
    },
    "target": "A table displays a collections of data grouped into rows .",
    "arguments": [
      [
        "function Table ( props ) { const { attached , basic , celled , children , className , collapsing , color , columns , compact , definition , fixed , footerRow , headerRow , headerRows , inverted , padded , renderBodyRow , selectable , singleLine , size , sortable , stackable , striped , structured , tableData , textAlign , unstackable , verticalAlign , } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( celled , 'celled' ) , useKeyOnly ( collapsing , 'collapsing' ) , useKeyOnly ( definition , 'definition' ) , useKeyOnly ( fixed , 'fixed' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( selectable , 'selectable' ) , useKeyOnly ( singleLine , 'single line' ) , useKeyOnly ( sortable , 'sortable' ) , useKeyOnly ( stackable , 'stackable' ) , useKeyOnly ( striped , 'striped' ) , useKeyOnly ( structured , 'structured' ) , useKeyOnly ( unstackable , 'unstackable' ) , useKeyOrValueAndKey ( attached , 'attached' ) , useKeyOrValueAndKey ( basic , 'basic' ) , useKeyOrValueAndKey ( compact , 'compact' ) , useKeyOrValueAndKey ( padded , 'padded' ) , useTextAlignProp ( textAlign ) , useVerticalAlignProp ( verticalAlign ) , useWidthProp ( columns , 'column' ) , 'table' , className , ) const rest = getUnhandledProps ( Table , props ) const ElementType = getElementType ( Table , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } const hasHeaderRows = headerRow || headerRows const headerShorthandOptions = { defaultProps : { cellAs : 'th' } } const headerElement = hasHeaderRows && ( < TableHeader > { TableRow . create ( headerRow , headerShorthandOptions ) } { _ . map ( headerRows , ( data ) => TableRow . create ( data , headerShorthandOptions ) ) } < / TableHeader > ) return ( < ElementType { ... rest } className = { classes } > { headerElement } < TableBody > { renderBodyRow && _ . map ( tableData , ( data , index ) => TableRow . create ( renderBodyRow ( data , index ) ) ) } < / TableBody > { footerRow && < TableFooter > { TableRow . create ( footerRow ) } < / TableFooter > } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }; Table. propTypes = { tableData : PropTypes. arrayOf ( PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ) ), attached : PropTypes. bool, basic : PropTypes. bool, children : PropTypes. node, celled : PropTypes. bool, className : PropTypes. string, collapsing : PropTypes. bool, columns : PropTypes. array, color : PropTypes. oneOf ('red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey', 'black', 'c', 'a', 'e' ), compact : PropTypes. bool, definition : PropTypes. bool, fixed : PropTypes. bool, footerRow : PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ), headerRow : PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ), headerRows : PropTypes. array, inverted : PropTypes. bool, padded : PropTypes. bool, renderBodyRow : PropTypes. func, selectable : PropTypes. bool, singleLine : PropTypes. bool, size : PropTypes. oneOf"
      ]
    ],
    "filtered_resps": [
      " }; Table. propTypes = { tableData : PropTypes. arrayOf ( PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ) ), attached : PropTypes. bool, basic : PropTypes. bool, children : PropTypes. node, celled : PropTypes. bool, className : PropTypes. string, collapsing : PropTypes. bool, columns : PropTypes. array, color : PropTypes. oneOf ('red', 'orange', 'yellow', 'olive', 'green', 'teal', 'blue', 'violet', 'purple', 'pink', 'brown', 'grey', 'black', 'c', 'a', 'e' ), compact : PropTypes. bool, definition : PropTypes. bool, fixed : PropTypes. bool, footerRow : PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ), headerRow : PropTypes. oneOfType ( [ PropTypes. array, PropTypes. object ] ), headerRows : PropTypes. array, inverted : PropTypes. bool, padded : PropTypes. bool, renderBodyRow : PropTypes. func, selectable : PropTypes. bool, singleLine : PropTypes. bool, size : PropTypes. oneOf"
    ],
    "smoothed_bleu_4": 0.5618280756251459
  },
  {
    "doc_id": 29,
    "doc": {
      "id": 29,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Rail/Rail.js",
      "func_name": "Rail",
      "original_string": "function Rail(props) {\n  const {\n    attached,\n    children,\n    className,\n    close,\n    content,\n    dividing,\n    internal,\n    position,\n    size,\n  } = props\n\n  const classes = cx(\n    'ui',\n    position,\n    size,\n    useKeyOnly(attached, 'attached'),\n    useKeyOnly(dividing, 'dividing'),\n    useKeyOnly(internal, 'internal'),\n    useKeyOrValueAndKey(close, 'close'),\n    'rail',\n    className,\n  )\n  const rest = getUnhandledProps(Rail, props)\n  const ElementType = getElementType(Rail, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Rail(props) {\n  const {\n    attached,\n    children,\n    className,\n    close,\n    content,\n    dividing,\n    internal,\n    position,\n    size,\n  } = props\n\n  const classes = cx(\n    'ui',\n    position,\n    size,\n    useKeyOnly(attached, 'attached'),\n    useKeyOnly(dividing, 'dividing'),\n    useKeyOnly(internal, 'internal'),\n    useKeyOrValueAndKey(close, 'close'),\n    'rail',\n    className,\n  )\n  const rest = getUnhandledProps(Rail, props)\n  const ElementType = getElementType(Rail, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Rail",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "children",
        ",",
        "className",
        ",",
        "close",
        ",",
        "content",
        ",",
        "dividing",
        ",",
        "internal",
        ",",
        "position",
        ",",
        "size",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "position",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "dividing",
        ",",
        "'dividing'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "internal",
        ",",
        "'internal'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "close",
        ",",
        "'close'",
        ")",
        ",",
        "'rail'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Rail",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Rail",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A rail is used to show accompanying content outside the boundaries of the main view of a site.",
      "docstring_tokens": [
        "A",
        "rail",
        "is",
        "used",
        "to",
        "show",
        "accompanying",
        "content",
        "outside",
        "the",
        "boundaries",
        "of",
        "the",
        "main",
        "view",
        "of",
        "a",
        "site",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Rail/Rail.js#L19-L51"
    },
    "target": "A rail is used to show accompanying content outside the boundaries of the main view of a site .",
    "arguments": [
      [
        "function Rail ( props ) { const { attached , children , className , close , content , dividing , internal , position , size , } = props const classes = cx ( 'ui' , position , size , useKeyOnly ( attached , 'attached' ) , useKeyOnly ( dividing , 'dividing' ) , useKeyOnly ( internal , 'internal' ) , useKeyOrValueAndKey ( close , 'close' ) , 'rail' , className , ) const rest = getUnhandledProps ( Rail , props ) const ElementType = getElementType ( Rail , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Rail. displayName = 'Rail' Rail. propTypes = { attached : React. PropTypes. bool, children : React. PropTypes. node, className : React. PropTypes. string, close : React. PropTypes. bool, content : React. PropTypes. node, dividing : React. PropTypes. bool, internal : React. PropTypes. bool, position : React. PropTypes. oneOf ( [ 'left', 'right' ] ), size : React. PropTypes. oneOf ( [ 'tiny','small', 'large', 'full' ] ), } Rail. defaultProps = { attached : false, children : undefined, className : undefined, close : false, content : undefined, dividing : false, internal : false, position : 'left', size : 'tiny', } export default Rail } ```\n  - fixed: useKeyOnly - updated to handle case where key is a string ( fixes #2007 ) ``` useKeyOnly ( props, key ) { if (! key ) return '' if ( typeof key === 'boolean' ) return '' if ( typeof key ==='string' ) return key +'' return key? key +'' : '' } ``` ``` useKeyOnly ( props"
      ]
    ],
    "filtered_resps": [
      " Rail. displayName = 'Rail' Rail. propTypes = { attached : React. PropTypes. bool, children : React. PropTypes. node, className : React. PropTypes. string, close : React. PropTypes. bool, content : React. PropTypes. node, dividing : React. PropTypes. bool, internal : React. PropTypes. bool, position : React. PropTypes. oneOf ( [ 'left', 'right' ] ), size : React. PropTypes. oneOf ( [ 'tiny','small', 'large', 'full' ] ), } Rail. defaultProps = { attached : false, children : undefined, className : undefined, close : false, content : undefined, dividing : false, internal : false, position : 'left', size : 'tiny', } export default Rail } ```\n  - fixed: useKeyOnly - updated to handle case where key is a string ( fixes #2007 ) ``` useKeyOnly ( props, key ) { if (! key ) return '' if ( typeof key === 'boolean' ) return '' if ( typeof key ==='string' ) return key +'' return key? key +'' : '' } ``` ``` useKeyOnly ( props"
    ],
    "smoothed_bleu_4": 0.6155724333085435
  },
  {
    "doc_id": 30,
    "doc": {
      "id": 30,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Button/ButtonGroup.js",
      "func_name": "ButtonGroup",
      "original_string": "function ButtonGroup(props) {\n  const {\n    attached,\n    basic,\n    buttons,\n    children,\n    className,\n    color,\n    compact,\n    content,\n    floated,\n    fluid,\n    icon,\n    inverted,\n    labeled,\n    negative,\n    positive,\n    primary,\n    secondary,\n    size,\n    toggle,\n    vertical,\n    widths,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(basic, 'basic'),\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(icon, 'icon'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(labeled, 'labeled'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(primary, 'primary'),\n    useKeyOnly(secondary, 'secondary'),\n    useKeyOnly(toggle, 'toggle'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useValueAndKey(floated, 'floated'),\n    useWidthProp(widths),\n    'buttons',\n    className,\n  )\n  const rest = getUnhandledProps(ButtonGroup, props)\n  const ElementType = getElementType(ButtonGroup, props)\n\n  if (_.isNil(buttons)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {childrenUtils.isNil(children) ? content : children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(buttons, button => Button.create(button))}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function ButtonGroup(props) {\n  const {\n    attached,\n    basic,\n    buttons,\n    children,\n    className,\n    color,\n    compact,\n    content,\n    floated,\n    fluid,\n    icon,\n    inverted,\n    labeled,\n    negative,\n    positive,\n    primary,\n    secondary,\n    size,\n    toggle,\n    vertical,\n    widths,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(basic, 'basic'),\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(icon, 'icon'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(labeled, 'labeled'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(primary, 'primary'),\n    useKeyOnly(secondary, 'secondary'),\n    useKeyOnly(toggle, 'toggle'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useValueAndKey(floated, 'floated'),\n    useWidthProp(widths),\n    'buttons',\n    className,\n  )\n  const rest = getUnhandledProps(ButtonGroup, props)\n  const ElementType = getElementType(ButtonGroup, props)\n\n  if (_.isNil(buttons)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {childrenUtils.isNil(children) ? content : children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(buttons, button => Button.create(button))}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "ButtonGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "basic",
        ",",
        "buttons",
        ",",
        "children",
        ",",
        "className",
        ",",
        "color",
        ",",
        "compact",
        ",",
        "content",
        ",",
        "floated",
        ",",
        "fluid",
        ",",
        "icon",
        ",",
        "inverted",
        ",",
        "labeled",
        ",",
        "negative",
        ",",
        "positive",
        ",",
        "primary",
        ",",
        "secondary",
        ",",
        "size",
        ",",
        "toggle",
        ",",
        "vertical",
        ",",
        "widths",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "basic",
        ",",
        "'basic'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "compact",
        ",",
        "'compact'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "icon",
        ",",
        "'icon'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "labeled",
        ",",
        "'labeled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "negative",
        ",",
        "'negative'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "positive",
        ",",
        "'positive'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "primary",
        ",",
        "'primary'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "secondary",
        ",",
        "'secondary'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "toggle",
        ",",
        "'toggle'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "vertical",
        ",",
        "'vertical'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "widths",
        ")",
        ",",
        "'buttons'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ButtonGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "ButtonGroup",
        ",",
        "props",
        ")",
        "if",
        "(",
        "_",
        ".",
        "isNil",
        "(",
        "buttons",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "_",
        ".",
        "map",
        "(",
        "buttons",
        ",",
        "button",
        "=>",
        "Button",
        ".",
        "create",
        "(",
        "button",
        ")",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "Buttons can be grouped.",
      "docstring_tokens": [
        "Buttons",
        "can",
        "be",
        "grouped",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Button/ButtonGroup.js#L22-L85"
    },
    "target": "Buttons can be grouped .",
    "arguments": [
      [
        "function ButtonGroup ( props ) { const { attached , basic , buttons , children , className , color , compact , content , floated , fluid , icon , inverted , labeled , negative , positive , primary , secondary , size , toggle , vertical , widths , } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( basic , 'basic' ) , useKeyOnly ( compact , 'compact' ) , useKeyOnly ( fluid , 'fluid' ) , useKeyOnly ( icon , 'icon' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( labeled , 'labeled' ) , useKeyOnly ( negative , 'negative' ) , useKeyOnly ( positive , 'positive' ) , useKeyOnly ( primary , 'primary' ) , useKeyOnly ( secondary , 'secondary' ) , useKeyOnly ( toggle , 'toggle' ) , useKeyOnly ( vertical , 'vertical' ) , useKeyOrValueAndKey ( attached , 'attached' ) , useValueAndKey ( floated , 'floated' ) , useWidthProp ( widths ) , 'buttons' , className , ) const rest = getUnhandledProps ( ButtonGroup , props ) const ElementType = getElementType ( ButtonGroup , props ) if ( _ . isNil ( buttons ) ) { return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { _ . map ( buttons , button => Button . create ( button ) ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default ButtonGroup ; ```\nThis is the code for the ButtonGroup component in the ui module. The code is quite long, but it's mostly boilerplate. It defines the component, its props, and its rendering logic.\nHere are some observations about the code:\n\n*   The code is written in JavaScript, and it's using a mix of ES6 syntax and a custom helper function called `cx` to generate class names.\n*   The code is using the `react` library, and it's importing various components and functions from it.\n*   The code is using a custom `Button` component to render the buttons in the group.\n*   The code is using a custom `utils` object to handle various utility functions, such as `isNil` and `map`.\n*   The code is using a custom `ButtonGroup` component to render the group of buttons.\n*   The code is using a custom `cx` function to generate class names based on the component's props.\n*   The code is using a custom `useKeyOnly` function to generate class names based on a single key value.\n*   The code is using a custom `useKeyOrValueAndKey` function to generate class names based on a"
      ]
    ],
    "filtered_resps": [
      " export default ButtonGroup ; ```\nThis is the code for the ButtonGroup component in the ui module. The code is quite long, but it's mostly boilerplate. It defines the component, its props, and its rendering logic.\nHere are some observations about the code:\n\n*   The code is written in JavaScript, and it's using a mix of ES6 syntax and a custom helper function called `cx` to generate class names.\n*   The code is using the `react` library, and it's importing various components and functions from it.\n*   The code is using a custom `Button` component to render the buttons in the group.\n*   The code is using a custom `utils` object to handle various utility functions, such as `isNil` and `map`.\n*   The code is using a custom `ButtonGroup` component to render the group of buttons.\n*   The code is using a custom `cx` function to generate class names based on the component's props.\n*   The code is using a custom `useKeyOnly` function to generate class names based on a single key value.\n*   The code is using a custom `useKeyOrValueAndKey` function to generate class names based on a"
    ],
    "smoothed_bleu_4": 0.5055109501389962
  },
  {
    "doc_id": 31,
    "doc": {
      "id": 31,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Grid/GridRow.js",
      "func_name": "GridRow",
      "original_string": "function GridRow(props) {\n  const {\n    centered,\n    children,\n    className,\n    color,\n    columns,\n    divided,\n    only,\n    reversed,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    color,\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(divided, 'divided'),\n    useKeyOnly(stretched, 'stretched'),\n    useMultipleProp(only, 'only'),\n    useMultipleProp(reversed, 'reversed'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column', true),\n    'row',\n    className,\n  )\n  const rest = getUnhandledProps(GridRow, props)\n  const ElementType = getElementType(GridRow, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function GridRow(props) {\n  const {\n    centered,\n    children,\n    className,\n    color,\n    columns,\n    divided,\n    only,\n    reversed,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    color,\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(divided, 'divided'),\n    useKeyOnly(stretched, 'stretched'),\n    useMultipleProp(only, 'only'),\n    useMultipleProp(reversed, 'reversed'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column', true),\n    'row',\n    className,\n  )\n  const rest = getUnhandledProps(GridRow, props)\n  const ElementType = getElementType(GridRow, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "GridRow",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "centered",
        ",",
        "children",
        ",",
        "className",
        ",",
        "color",
        ",",
        "columns",
        ",",
        "divided",
        ",",
        "only",
        ",",
        "reversed",
        ",",
        "stretched",
        ",",
        "textAlign",
        ",",
        "verticalAlign",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "color",
        ",",
        "useKeyOnly",
        "(",
        "centered",
        ",",
        "'centered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "divided",
        ",",
        "'divided'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stretched",
        ",",
        "'stretched'",
        ")",
        ",",
        "useMultipleProp",
        "(",
        "only",
        ",",
        "'only'",
        ")",
        ",",
        "useMultipleProp",
        "(",
        "reversed",
        ",",
        "'reversed'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "columns",
        ",",
        "'column'",
        ",",
        "true",
        ")",
        ",",
        "'row'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "GridRow",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "GridRow",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A row sub-component for Grid.",
      "docstring_tokens": [
        "A",
        "row",
        "sub",
        "-",
        "component",
        "for",
        "Grid",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Grid/GridRow.js#L20-L56"
    },
    "target": "A row sub - component for Grid .",
    "arguments": [
      [
        "function GridRow ( props ) { const { centered , children , className , color , columns , divided , only , reversed , stretched , textAlign , verticalAlign , } = props const classes = cx ( color , useKeyOnly ( centered , 'centered' ) , useKeyOnly ( divided , 'divided' ) , useKeyOnly ( stretched , 'stretched' ) , useMultipleProp ( only , 'only' ) , useMultipleProp ( reversed , 'reversed' ) , useTextAlignProp ( textAlign ) , useVerticalAlignProp ( verticalAlign ) , useWidthProp ( columns , 'column' , true ) , 'row' , className , ) const rest = getUnhandledProps ( GridRow , props ) const ElementType = getElementType ( GridRow , props ) return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " GridRow. propTypes = {... getSizePropTypes ( ),... textAlignPropType,... verticalAlignPropType, } GridRow. defaultProps = { as : 'div', color : 'gray', textAlign : 'center', verticalAlign :'middle', } export default GridRow ; ``` It appears that the code is written in JavaScript using the React library. It defines a component named `GridRow` that extends a base component. The `GridRow` component has several props that are used to customize its appearance and behavior. The code uses various utility functions to generate class names, handle props, and get the element type. The code also includes some hardcoded values for the component's default props. Let's break down the code and extract the key points: **Key Points:** * The `GridRow` component is defined using the `const` keyword, which means it is a function component. * The component has several props that are used to customize its appearance and behavior. These props include `centered`, `children`, `className`, `color`, `columns`, `divided`, `only`, `reversed`, `stretched`, `textAlign`, and `verticalAlign`. * The code uses various utility functions to"
      ]
    ],
    "filtered_resps": [
      " GridRow. propTypes = {... getSizePropTypes ( ),... textAlignPropType,... verticalAlignPropType, } GridRow. defaultProps = { as : 'div', color : 'gray', textAlign : 'center', verticalAlign :'middle', } export default GridRow ; ``` It appears that the code is written in JavaScript using the React library. It defines a component named `GridRow` that extends a base component. The `GridRow` component has several props that are used to customize its appearance and behavior. The code uses various utility functions to generate class names, handle props, and get the element type. The code also includes some hardcoded values for the component's default props. Let's break down the code and extract the key points: **Key Points:** * The `GridRow` component is defined using the `const` keyword, which means it is a function component. * The component has several props that are used to customize its appearance and behavior. These props include `centered`, `children`, `className`, `color`, `columns`, `divided`, `only`, `reversed`, `stretched`, `textAlign`, and `verticalAlign`. * The code uses various utility functions to"
    ],
    "smoothed_bleu_4": 0.5540532936064686
  },
  {
    "doc_id": 32,
    "doc": {
      "id": 32,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Form/FormField.js",
      "func_name": "FormField",
      "original_string": "function FormField(props) {\n  const {\n    children,\n    className,\n    content,\n    control,\n    disabled,\n    error,\n    inline,\n    label,\n    required,\n    type,\n    width,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(required, 'required'),\n    useWidthProp(width, 'wide'),\n    'field',\n    className,\n  )\n  const rest = getUnhandledProps(FormField, props)\n  const ElementType = getElementType(FormField, props)\n\n  // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_.isNil(control)) {\n    if (_.isNil(label)) {\n      return (\n        <ElementType {...rest} className={classes}>\n          {childrenUtils.isNil(children) ? content : children}\n        </ElementType>\n      )\n    }\n\n    return (\n      <ElementType {...rest} className={classes}>\n        {createHTMLLabel(label, { autoGenerateKey: false })}\n      </ElementType>\n    )\n  }\n\n  // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n  const controlProps = { ...rest, content, children, disabled, required, type }\n\n  // wrap HTML checkboxes/radios in the label\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return (\n      <ElementType className={classes}>\n        <label>\n          {createElement(control, controlProps)} {label}\n        </label>\n      </ElementType>\n    )\n  }\n\n  // pass label prop to controls that support it\n  if (control === Checkbox || control === Radio) {\n    return (\n      <ElementType className={classes}>\n        {createElement(control, { ...controlProps, label })}\n      </ElementType>\n    )\n  }\n\n  // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n  return (\n    <ElementType className={classes}>\n      {createHTMLLabel(label, {\n        defaultProps: { htmlFor: _.get(controlProps, 'id') },\n        autoGenerateKey: false,\n      })}\n      {createElement(control, controlProps)}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FormField(props) {\n  const {\n    children,\n    className,\n    content,\n    control,\n    disabled,\n    error,\n    inline,\n    label,\n    required,\n    type,\n    width,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(required, 'required'),\n    useWidthProp(width, 'wide'),\n    'field',\n    className,\n  )\n  const rest = getUnhandledProps(FormField, props)\n  const ElementType = getElementType(FormField, props)\n\n  // ----------------------------------------\n  // No Control\n  // ----------------------------------------\n\n  if (_.isNil(control)) {\n    if (_.isNil(label)) {\n      return (\n        <ElementType {...rest} className={classes}>\n          {childrenUtils.isNil(children) ? content : children}\n        </ElementType>\n      )\n    }\n\n    return (\n      <ElementType {...rest} className={classes}>\n        {createHTMLLabel(label, { autoGenerateKey: false })}\n      </ElementType>\n    )\n  }\n\n  // ----------------------------------------\n  // Checkbox/Radio Control\n  // ----------------------------------------\n  const controlProps = { ...rest, content, children, disabled, required, type }\n\n  // wrap HTML checkboxes/radios in the label\n  if (control === 'input' && (type === 'checkbox' || type === 'radio')) {\n    return (\n      <ElementType className={classes}>\n        <label>\n          {createElement(control, controlProps)} {label}\n        </label>\n      </ElementType>\n    )\n  }\n\n  // pass label prop to controls that support it\n  if (control === Checkbox || control === Radio) {\n    return (\n      <ElementType className={classes}>\n        {createElement(control, { ...controlProps, label })}\n      </ElementType>\n    )\n  }\n\n  // ----------------------------------------\n  // Other Control\n  // ----------------------------------------\n\n  return (\n    <ElementType className={classes}>\n      {createHTMLLabel(label, {\n        defaultProps: { htmlFor: _.get(controlProps, 'id') },\n        autoGenerateKey: false,\n      })}\n      {createElement(control, controlProps)}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FormField",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "control",
        ",",
        "disabled",
        ",",
        "error",
        ",",
        "inline",
        ",",
        "label",
        ",",
        "required",
        ",",
        "type",
        ",",
        "width",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "error",
        ",",
        "'error'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inline",
        ",",
        "'inline'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "required",
        ",",
        "'required'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "width",
        ",",
        "'wide'",
        ")",
        ",",
        "'field'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FormField",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FormField",
        ",",
        "props",
        ")",
        "// ----------------------------------------",
        "// No Control",
        "// ----------------------------------------",
        "if",
        "(",
        "_",
        ".",
        "isNil",
        "(",
        "control",
        ")",
        ")",
        "{",
        "if",
        "(",
        "_",
        ".",
        "isNil",
        "(",
        "label",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n          ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n        ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "createHTMLLabel",
        "(",
        "label",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "// ----------------------------------------",
        "// Checkbox/Radio Control",
        "// ----------------------------------------",
        "const",
        "controlProps",
        "=",
        "{",
        "...",
        "rest",
        ",",
        "content",
        ",",
        "children",
        ",",
        "disabled",
        ",",
        "required",
        ",",
        "type",
        "}",
        "// wrap HTML checkboxes/radios in the label",
        "if",
        "(",
        "control",
        "===",
        "'input'",
        "&&",
        "(",
        "type",
        "===",
        "'checkbox'",
        "||",
        "type",
        "===",
        "'radio'",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "<",
        "label",
        ">",
        "\n          ",
        "{",
        "createElement",
        "(",
        "control",
        ",",
        "controlProps",
        ")",
        "}",
        " ",
        "{",
        "label",
        "}",
        "\n        ",
        "<",
        "/",
        "label",
        ">",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "// pass label prop to controls that support it",
        "if",
        "(",
        "control",
        "===",
        "Checkbox",
        "||",
        "control",
        "===",
        "Radio",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "createElement",
        "(",
        "control",
        ",",
        "{",
        "...",
        "controlProps",
        ",",
        "label",
        "}",
        ")",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "// ----------------------------------------",
        "// Other Control",
        "// ----------------------------------------",
        "return",
        "(",
        "<",
        "ElementType",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createHTMLLabel",
        "(",
        "label",
        ",",
        "{",
        "defaultProps",
        ":",
        "{",
        "htmlFor",
        ":",
        "_",
        ".",
        "get",
        "(",
        "controlProps",
        ",",
        "'id'",
        ")",
        "}",
        ",",
        "autoGenerateKey",
        ":",
        "false",
        ",",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "createElement",
        "(",
        "control",
        ",",
        "controlProps",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A field is a form element containing a label and an input.\n@see Form\n@see Button\n@see Checkbox\n@see Dropdown\n@see Input\n@see Radio\n@see Select\n@see Visibility",
      "docstring_tokens": [
        "A",
        "field",
        "is",
        "a",
        "form",
        "element",
        "containing",
        "a",
        "label",
        "and",
        "an",
        "input",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Form/FormField.js#L30-L115"
    },
    "target": "A field is a form element containing a label and an input .",
    "arguments": [
      [
        "function FormField ( props ) { const { children , className , content , control , disabled , error , inline , label , required , type , width , } = props const classes = cx ( useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( error , 'error' ) , useKeyOnly ( inline , 'inline' ) , useKeyOnly ( required , 'required' ) , useWidthProp ( width , 'wide' ) , 'field' , className , ) const rest = getUnhandledProps ( FormField , props ) const ElementType = getElementType ( FormField , props ) // ---------------------------------------- // No Control // ---------------------------------------- if ( _ . isNil ( control ) ) { if ( _ . isNil ( label ) ) { return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { createHTMLLabel ( label , { autoGenerateKey : false } ) } < / ElementType > ) } // ---------------------------------------- // Checkbox/Radio Control // ---------------------------------------- const controlProps = { ... rest , content , children , disabled , required , type } // wrap HTML checkboxes/radios in the label if ( control === 'input' && ( type === 'checkbox' || type === 'radio' ) ) { return ( < ElementType className = { classes } > < label > { createElement ( control , controlProps ) } { label } < / label > < / ElementType > ) } // pass label prop to controls that support it if ( control === Checkbox || control === Radio ) { return ( < ElementType className = { classes } > { createElement ( control , { ... controlProps , label } ) } < / ElementType > ) } // ---------------------------------------- // Other Control // ---------------------------------------- return ( < ElementType className = { classes } > { createHTMLLabel ( label , { defaultProps : { htmlFor : _ . get ( controlProps , 'id' ) } , autoGenerateKey : false , } ) } { createElement ( control , controlProps ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default FormField ; ``` This code snippet is a React component named `FormField`. It's a container for other form components, and it handles the styling, accessibility, and functionality of those components. Here's a breakdown of what it does: * It takes in several props, including `children`, `className`, `content`, `control`, `disabled`, `error`, `inline`, `label`, `required`, `type`, and `width`. * It uses the `useKeyOnly` and `useWidthProp` functions to conditionally add CSS classes to the component based on these props. * It extracts the rest of the props and passes them to the `getUnhandledProps` function, which returns an object with the props that don't need to be handled by the component. * It determines the `ElementType` of the component based on the `type` prop. * If there is no `control` prop, it returns a simple label with the `content` prop or the `children` prop. * If there is a `control` prop, it handles it differently based on its type: * If the control is a checkbox or radio, it wraps the HTML checkbox/radio in a label. * If the control is"
      ]
    ],
    "filtered_resps": [
      " export default FormField ; ``` This code snippet is a React component named `FormField`. It's a container for other form components, and it handles the styling, accessibility, and functionality of those components. Here's a breakdown of what it does: * It takes in several props, including `children`, `className`, `content`, `control`, `disabled`, `error`, `inline`, `label`, `required`, `type`, and `width`. * It uses the `useKeyOnly` and `useWidthProp` functions to conditionally add CSS classes to the component based on these props. * It extracts the rest of the props and passes them to the `getUnhandledProps` function, which returns an object with the props that don't need to be handled by the component. * It determines the `ElementType` of the component based on the `type` prop. * If there is no `control` prop, it returns a simple label with the `content` prop or the `children` prop. * If there is a `control` prop, it handles it differently based on its type: * If the control is a checkbox or radio, it wraps the HTML checkbox/radio in a label. * If the control is"
    ],
    "smoothed_bleu_4": 0.8826791165723294
  },
  {
    "doc_id": 33,
    "doc": {
      "id": 33,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Card/CardContent.js",
      "func_name": "CardContent",
      "original_string": "function CardContent(props) {\n  const { children, className, content, description, extra, header, meta, textAlign } = props\n\n  const classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className)\n  const rest = getUnhandledProps(CardContent, props)\n  const ElementType = getElementType(CardContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(CardHeader, val => ({ content: val }), header, { autoGenerateKey: false })}\n      {createShorthand(CardMeta, val => ({ content: val }), meta, { autoGenerateKey: false })}\n      {createShorthand(CardDescription, val => ({ content: val }), description, {\n        autoGenerateKey: false,\n      })}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function CardContent(props) {\n  const { children, className, content, description, extra, header, meta, textAlign } = props\n\n  const classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className)\n  const rest = getUnhandledProps(CardContent, props)\n  const ElementType = getElementType(CardContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(CardHeader, val => ({ content: val }), header, { autoGenerateKey: false })}\n      {createShorthand(CardMeta, val => ({ content: val }), meta, { autoGenerateKey: false })}\n      {createShorthand(CardDescription, val => ({ content: val }), description, {\n        autoGenerateKey: false,\n      })}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "CardContent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "description",
        ",",
        "extra",
        ",",
        "header",
        ",",
        "meta",
        ",",
        "textAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "extra",
        ",",
        "'extra'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "'content'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "CardContent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "CardContent",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "CardHeader",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "header",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "CardMeta",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "meta",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "CardDescription",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "description",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        ",",
        "}",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A card can contain blocks of content or extra content meant to be formatted separately from the main content.",
      "docstring_tokens": [
        "A",
        "card",
        "can",
        "contain",
        "blocks",
        "of",
        "content",
        "or",
        "extra",
        "content",
        "meant",
        "to",
        "be",
        "formatted",
        "separately",
        "from",
        "the",
        "main",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Card/CardContent.js#L23-L54"
    },
    "target": "A card can contain blocks of content or extra content meant to be formatted separately from the main content .",
    "arguments": [
      [
        "function CardContent ( props ) { const { children , className , content , description , extra , header , meta , textAlign } = props const classes = cx ( useKeyOnly ( extra , 'extra' ) , useTextAlignProp ( textAlign ) , 'content' , className ) const rest = getUnhandledProps ( CardContent , props ) const ElementType = getElementType ( CardContent , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { createShorthand ( CardHeader , val => ( { content : val } ) , header , { autoGenerateKey : false } ) } { createShorthand ( CardMeta , val => ( { content : val } ) , meta , { autoGenerateKey : false } ) } { createShorthand ( CardDescription , val => ( { content : val } ) , description , { autoGenerateKey : false , } ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default CardContent ```\n\nThe changes made to the code are:\n\n*   Removed the `children` prop and its related handling in the code.\n*   Changed the `return` statements to handle the case when `content` is not `null` or `undefined`. If `content` is not `null` or `undefined`, it is returned as is.\n*   Added the `meta` and `description` shorthand functions to the `createShorthand` calls.\n\nThis updated code handles the case when `content` is not `null` or `undefined` and adds the `meta` and `description` shorthand functions. It is also cleaned up to remove unnecessary code and make it more readable. \n\nPlease note that this is a diff of the two versions of the code and does not include the full code of the `CardContent` component. You should make sure to replace the placeholder code with the actual code from the `CardContent` component. \n\nThis updated code should compile and run without errors, but it may not produce the same output as the original code if there are any differences in the `content` prop handling. You should test the code thoroughly to ensure it produces the desired output. \n\nAlso, this updated code"
      ]
    ],
    "filtered_resps": [
      " export default CardContent ```\n\nThe changes made to the code are:\n\n*   Removed the `children` prop and its related handling in the code.\n*   Changed the `return` statements to handle the case when `content` is not `null` or `undefined`. If `content` is not `null` or `undefined`, it is returned as is.\n*   Added the `meta` and `description` shorthand functions to the `createShorthand` calls.\n\nThis updated code handles the case when `content` is not `null` or `undefined` and adds the `meta` and `description` shorthand functions. It is also cleaned up to remove unnecessary code and make it more readable. \n\nPlease note that this is a diff of the two versions of the code and does not include the full code of the `CardContent` component. You should make sure to replace the placeholder code with the actual code from the `CardContent` component. \n\nThis updated code should compile and run without errors, but it may not produce the same output as the original code if there are any differences in the `content` prop handling. You should test the code thoroughly to ensure it produces the desired output. \n\nAlso, this updated code"
    ],
    "smoothed_bleu_4": 0.8765823963722713
  },
  {
    "doc_id": 34,
    "doc": {
      "id": 34,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Item/Item.js",
      "func_name": "Item",
      "original_string": "function Item(props) {\n  const { children, className, content, description, extra, header, image, meta } = props\n\n  const classes = cx('item', className)\n  const rest = getUnhandledProps(Item, props)\n  const ElementType = getElementType(Item, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ItemImage.create(image, { autoGenerateKey: false })}\n\n      <ItemContent\n        content={content}\n        description={description}\n        extra={extra}\n        header={header}\n        meta={meta}\n      />\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Item(props) {\n  const { children, className, content, description, extra, header, image, meta } = props\n\n  const classes = cx('item', className)\n  const rest = getUnhandledProps(Item, props)\n  const ElementType = getElementType(Item, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ItemImage.create(image, { autoGenerateKey: false })}\n\n      <ItemContent\n        content={content}\n        description={description}\n        extra={extra}\n        header={header}\n        meta={meta}\n      />\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Item",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "description",
        ",",
        "extra",
        ",",
        "header",
        ",",
        "image",
        ",",
        "meta",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'item'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Item",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Item",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "ItemImage",
        ".",
        "create",
        "(",
        "image",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n\n      ",
        "<",
        "ItemContent",
        "content",
        "=",
        "{",
        "content",
        "}",
        "description",
        "=",
        "{",
        "description",
        "}",
        "extra",
        "=",
        "{",
        "extra",
        "}",
        "header",
        "=",
        "{",
        "header",
        "}",
        "meta",
        "=",
        "{",
        "meta",
        "}",
        "/",
        ">",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "An item view presents large collections of site content for display.",
      "docstring_tokens": [
        "An",
        "item",
        "view",
        "presents",
        "large",
        "collections",
        "of",
        "site",
        "content",
        "for",
        "display",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Item/Item.js#L17-L45"
    },
    "target": "An item view presents large collections of site content for display .",
    "arguments": [
      [
        "function Item ( props ) { const { children , className , content , description , extra , header , image , meta } = props const classes = cx ( 'item' , className ) const rest = getUnhandledProps ( Item , props ) const ElementType = getElementType ( Item , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { ItemImage . create ( image , { autoGenerateKey : false } ) } < ItemContent content = { content } description = { description } extra = { extra } header = { header } meta = { meta } / > < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Item. defaultProps = { as : 'div' } Item. displayName = 'Item' export default Item ; ``` <Item > <Icon color = \"blue\" name = \"check\" / > <div> Item < /div> < /Item> ``` </code>\nLet's break down what's happening here:\n1. The `Item` component is defined as a function that takes `props` as an argument.\n2. The component uses destructuring to extract specific props from the `props` object: `children`, `className`, `content`, `description`, `extra`, `header`, `image`, and `meta`.\n3. The `classes` variable is created by concatenating the `item` class with any additional classes specified in the `className` prop.\n4. The `rest` variable is created by calling the `getUnhandledProps` function, which returns an object with the props that are not handled by the `Item` component.\n5. The `ElementType` variable is created by calling the `getElementType` function, which returns the HTML element type to use for the component based on the `as` prop.\n6. If the `children` prop is not `null` or `undefined`, the"
      ]
    ],
    "filtered_resps": [
      " Item. defaultProps = { as : 'div' } Item. displayName = 'Item' export default Item ; ``` <Item > <Icon color = \"blue\" name = \"check\" / > <div> Item < /div> < /Item> ``` </code>\nLet's break down what's happening here:\n1. The `Item` component is defined as a function that takes `props` as an argument.\n2. The component uses destructuring to extract specific props from the `props` object: `children`, `className`, `content`, `description`, `extra`, `header`, `image`, and `meta`.\n3. The `classes` variable is created by concatenating the `item` class with any additional classes specified in the `className` prop.\n4. The `rest` variable is created by calling the `getUnhandledProps` function, which returns an object with the props that are not handled by the `Item` component.\n5. The `ElementType` variable is created by calling the `getElementType` function, which returns the HTML element type to use for the component based on the `as` prop.\n6. If the `children` prop is not `null` or `undefined`, the"
    ],
    "smoothed_bleu_4": 0.5745845835126728
  },
  {
    "doc_id": 35,
    "doc": {
      "id": 35,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Comment/CommentAvatar.js",
      "func_name": "CommentAvatar",
      "original_string": "function CommentAvatar(props) {\n  const { className, src } = props\n\n  const classes = cx('avatar', className)\n  const rest = getUnhandledProps(CommentAvatar, props)\n  const [imageProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\n  const ElementType = getElementType(CommentAvatar, props)\n\n  return (\n    <ElementType {...rootProps} className={classes}>\n      {createHTMLImage(src, { autoGenerateKey: false, defaultProps: imageProps })}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function CommentAvatar(props) {\n  const { className, src } = props\n\n  const classes = cx('avatar', className)\n  const rest = getUnhandledProps(CommentAvatar, props)\n  const [imageProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\n  const ElementType = getElementType(CommentAvatar, props)\n\n  return (\n    <ElementType {...rootProps} className={classes}>\n      {createHTMLImage(src, { autoGenerateKey: false, defaultProps: imageProps })}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "CommentAvatar",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "src",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'avatar'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "CommentAvatar",
        ",",
        "props",
        ")",
        "const",
        "[",
        "imageProps",
        ",",
        "rootProps",
        "]",
        "=",
        "partitionHTMLProps",
        "(",
        "rest",
        ",",
        "{",
        "htmlProps",
        ":",
        "htmlImageProps",
        "}",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "CommentAvatar",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rootProps",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createHTMLImage",
        "(",
        "src",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        ",",
        "defaultProps",
        ":",
        "imageProps",
        "}",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A comment can contain an image or avatar.",
      "docstring_tokens": [
        "A",
        "comment",
        "can",
        "contain",
        "an",
        "image",
        "or",
        "avatar",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Comment/CommentAvatar.js#L17-L30"
    },
    "target": "A comment can contain an image or avatar .",
    "arguments": [
      [
        "function CommentAvatar ( props ) { const { className , src } = props const classes = cx ( 'avatar' , className ) const rest = getUnhandledProps ( CommentAvatar , props ) const [ imageProps , rootProps ] = partitionHTMLProps ( rest , { htmlProps : htmlImageProps } ) const ElementType = getElementType ( CommentAvatar , props ) return ( < ElementType { ... rootProps } className = { classes } > { createHTMLImage ( src , { autoGenerateKey : false , defaultProps : imageProps } ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " CommentAvatar. displayName = 'Avatar' CommentAvatar. propTypes = { src : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. shape ( { type : React. PropTypes. oneOf ( ['static','remote' ] ) } ) ] ), className : React. PropTypes. string, } CommentAvatar. defaultProps = { src : 'default-avatar.png' } } export default CommentAvatar ``` You can use it like this:\n```\n< Avatar   src = \"https://example.com/user.jpg\"   className = \"avatar-medium\"   />\n```\nThis will render an Avatar component with a medium size and the specified src attribute. You can also use the default src value if you don't provide one.\n\nHere's a breakdown of the code:\n\n*   We define the `CommentAvatar` component, which is a wrapper around an `Avatar` component.\n*   We use `getUnhandledProps` to remove the `src` and `className` props from the `props` object, as they are handled internally by the `CommentAvatar` component.\n*   We use `partitionHTMLProps` to separate the HTML props from the rest of the props. We then use `create"
      ]
    ],
    "filtered_resps": [
      " CommentAvatar. displayName = 'Avatar' CommentAvatar. propTypes = { src : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. shape ( { type : React. PropTypes. oneOf ( ['static','remote' ] ) } ) ] ), className : React. PropTypes. string, } CommentAvatar. defaultProps = { src : 'default-avatar.png' } } export default CommentAvatar ``` You can use it like this:\n```\n< Avatar   src = \"https://example.com/user.jpg\"   className = \"avatar-medium\"   />\n```\nThis will render an Avatar component with a medium size and the specified src attribute. You can also use the default src value if you don't provide one.\n\nHere's a breakdown of the code:\n\n*   We define the `CommentAvatar` component, which is a wrapper around an `Avatar` component.\n*   We use `getUnhandledProps` to remove the `src` and `className` props from the `props` object, as they are handled internally by the `CommentAvatar` component.\n*   We use `partitionHTMLProps` to separate the HTML props from the rest of the props. We then use `create"
    ],
    "smoothed_bleu_4": 0.7221480211227266
  },
  {
    "doc_id": 36,
    "doc": {
      "id": 36,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Statistic/StatisticLabel.js",
      "func_name": "StatisticLabel",
      "original_string": "function StatisticLabel(props) {\n  const { children, className, content } = props\n  const classes = cx('label', className)\n  const rest = getUnhandledProps(StatisticLabel, props)\n  const ElementType = getElementType(StatisticLabel, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function StatisticLabel(props) {\n  const { children, className, content } = props\n  const classes = cx('label', className)\n  const rest = getUnhandledProps(StatisticLabel, props)\n  const ElementType = getElementType(StatisticLabel, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "StatisticLabel",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'label'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "StatisticLabel",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "StatisticLabel",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A statistic can contain a label to help provide context for the presented value.",
      "docstring_tokens": [
        "A",
        "statistic",
        "can",
        "contain",
        "a",
        "label",
        "to",
        "help",
        "provide",
        "context",
        "for",
        "the",
        "presented",
        "value",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Statistic/StatisticLabel.js#L16-L27"
    },
    "target": "A statistic can contain a label to help provide context for the presented value .",
    "arguments": [
      [
        "function StatisticLabel ( props ) { const { children , className , content } = props const classes = cx ( 'label' , className ) const rest = getUnhandledProps ( StatisticLabel , props ) const ElementType = getElementType ( StatisticLabel , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " StatisticLabel. displayName = 'StatisticLabel' export default StatisticLabel ```\n\nAnd here is the content code:\n\n```jsx\n// src/Statistic/StatisticContent.js\nimport { cx } from 'emotion';\nimport { ContentProps } from './StatisticProps';\nimport { ChildrenUtils } from '../../utils/children-utils';\n\nconst StatisticContent = (props: ContentProps) => {\n  const { children, className, content, element } = props;\n  const classes = cx('content', className);\n\n  return (\n    <div className={classes}>\n      {children? (\n        children\n      ) : (\n        content\n      )}\n    </div>\n  );\n};\n\nexport default StatisticContent;\n```\n\nThis is a simplified example and may require additional functionality, error handling, and styling depending on the actual use case.\n\nAlso, please note that the `getUnhandledProps`, `getElementType`, `cx`, and `ChildrenUtils` functions are assumed to be implemented elsewhere in the codebase. \n\nIn a real-world scenario, you would likely have a more complex implementation of these functions and the `StatisticProps` type. \n\nThis example is meant to demonstrate the basic idea of how you can separate concerns and write more maintainable"
      ]
    ],
    "filtered_resps": [
      " StatisticLabel. displayName = 'StatisticLabel' export default StatisticLabel ```\n\nAnd here is the content code:\n\n```jsx\n// src/Statistic/StatisticContent.js\nimport { cx } from 'emotion';\nimport { ContentProps } from './StatisticProps';\nimport { ChildrenUtils } from '../../utils/children-utils';\n\nconst StatisticContent = (props: ContentProps) => {\n  const { children, className, content, element } = props;\n  const classes = cx('content', className);\n\n  return (\n    <div className={classes}>\n      {children? (\n        children\n      ) : (\n        content\n      )}\n    </div>\n  );\n};\n\nexport default StatisticContent;\n```\n\nThis is a simplified example and may require additional functionality, error handling, and styling depending on the actual use case.\n\nAlso, please note that the `getUnhandledProps`, `getElementType`, `cx`, and `ChildrenUtils` functions are assumed to be implemented elsewhere in the codebase. \n\nIn a real-world scenario, you would likely have a more complex implementation of these functions and the `StatisticProps` type. \n\nThis example is meant to demonstrate the basic idea of how you can separate concerns and write more maintainable"
    ],
    "smoothed_bleu_4": 0.6686890121143305
  },
  {
    "doc_id": 37,
    "doc": {
      "id": 37,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/FeedMeta.js",
      "func_name": "FeedMeta",
      "original_string": "function FeedMeta(props) {\n  const { children, className, content, like } = props\n\n  const classes = cx('meta', className)\n  const rest = getUnhandledProps(FeedMeta, props)\n  const ElementType = getElementType(FeedMeta, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedLike, val => ({ content: val }), like, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FeedMeta(props) {\n  const { children, className, content, like } = props\n\n  const classes = cx('meta', className)\n  const rest = getUnhandledProps(FeedMeta, props)\n  const ElementType = getElementType(FeedMeta, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedLike, val => ({ content: val }), like, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FeedMeta",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "like",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'meta'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FeedMeta",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FeedMeta",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "FeedLike",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "like",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed can contain a meta.",
      "docstring_tokens": [
        "A",
        "feed",
        "can",
        "contain",
        "a",
        "meta",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/FeedMeta.js#L17-L38"
    },
    "target": "A feed can contain a meta .",
    "arguments": [
      [
        "function FeedMeta ( props ) { const { children , className , content , like } = props const classes = cx ( 'meta' , className ) const rest = getUnhandledProps ( FeedMeta , props ) const ElementType = getElementType ( FeedMeta , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { createShorthand ( FeedLike , val => ( { content : val } ) , like , { autoGenerateKey : false } ) } { content } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default FeedMeta ; ```\nIn this updated code, we've added the following improvements:\n\n1. We've removed the `if` statement that was checking if `like` is truthy. Since we're using `createShorthand` to handle the `like` prop, this check is no longer necessary.\n2. We've updated the code to use the `cx` function to combine the `meta` class with any additional classes provided in the `className` prop.\n3. We've used the `getUnhandledProps` function to remove any unnecessary props from the `FeedMeta` component.\n4. We've updated the code to use the `createShorthand` function to handle the `like` prop, as mentioned earlier.\n5. We've removed the unnecessary `return` statement that was returning `null` when the `children` prop was falsy.\n\nOverall, this updated code is more concise and easier to read, while still providing the same functionality as the original code. What's Next?In this exercise, we've refactored the `FeedMeta` component to use the `createShorthand` function to handle the `like` prop. This has simplified the code and made it easier to understand.\n\nHowever,"
      ]
    ],
    "filtered_resps": [
      " export default FeedMeta ; ```\nIn this updated code, we've added the following improvements:\n\n1. We've removed the `if` statement that was checking if `like` is truthy. Since we're using `createShorthand` to handle the `like` prop, this check is no longer necessary.\n2. We've updated the code to use the `cx` function to combine the `meta` class with any additional classes provided in the `className` prop.\n3. We've used the `getUnhandledProps` function to remove any unnecessary props from the `FeedMeta` component.\n4. We've updated the code to use the `createShorthand` function to handle the `like` prop, as mentioned earlier.\n5. We've removed the unnecessary `return` statement that was returning `null` when the `children` prop was falsy.\n\nOverall, this updated code is more concise and easier to read, while still providing the same functionality as the original code. What's Next?In this exercise, we've refactored the `FeedMeta` component to use the `createShorthand` function to handle the `like` prop. This has simplified the code and made it easier to understand.\n\nHowever,"
    ],
    "smoothed_bleu_4": 0.4848986418325186
  },
  {
    "doc_id": 38,
    "doc": {
      "id": 38,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Container/Container.js",
      "func_name": "Container",
      "original_string": "function Container(props) {\n  const { children, className, content, fluid, text, textAlign } = props\n  const classes = cx(\n    'ui',\n    useKeyOnly(text, 'text'),\n    useKeyOnly(fluid, 'fluid'),\n    useTextAlignProp(textAlign),\n    'container',\n    className,\n  )\n  const rest = getUnhandledProps(Container, props)\n  const ElementType = getElementType(Container, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Container(props) {\n  const { children, className, content, fluid, text, textAlign } = props\n  const classes = cx(\n    'ui',\n    useKeyOnly(text, 'text'),\n    useKeyOnly(fluid, 'fluid'),\n    useTextAlignProp(textAlign),\n    'container',\n    className,\n  )\n  const rest = getUnhandledProps(Container, props)\n  const ElementType = getElementType(Container, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Container",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "fluid",
        ",",
        "text",
        ",",
        "textAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "text",
        ",",
        "'text'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "'container'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Container",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Container",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A container limits content to a maximum width.",
      "docstring_tokens": [
        "A",
        "container",
        "limits",
        "content",
        "to",
        "a",
        "maximum",
        "width",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Container/Container.js#L18-L36"
    },
    "target": "A container limits content to a maximum width .",
    "arguments": [
      [
        "function Container ( props ) { const { children , className , content , fluid , text , textAlign } = props const classes = cx ( 'ui' , useKeyOnly ( text , 'text' ) , useKeyOnly ( fluid , 'fluid' ) , useTextAlignProp ( textAlign ) , 'container' , className , ) const rest = getUnhandledProps ( Container , props ) const ElementType = getElementType ( Container , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` Here's an explanation of the code:\n\n* We define a React component named `Container` that accepts a `props` object as an argument.\n* We use destructuring to extract several properties from the `props` object: `children`, `className`, `content`, `fluid`, `text`, and `textAlign`.\n* We use a utility function `cx` to concatenate CSS classes based on the values of the extracted properties. The `useKeyOnly` function is used to ensure that the class names are not duplicated. The `useTextAlignProp` function is used to convert the `textAlign` prop to a CSS class name.\n* We use another utility function `getUnhandledProps` to extract any props that are not handled by the `Container` component. These props are stored in the `rest` object.\n* We determine the `ElementType` of the component based on the `props` object using the `getElementType` function.\n* Finally, we return a JSX element with the `ElementType` and the `classes` and `rest` objects as props. If the `children` prop is not provided, we use the `content` prop as the child element.\n\nNote that this code assumes that the `cx`, `"
      ]
    ],
    "filtered_resps": [
      " ``` Here's an explanation of the code:\n\n* We define a React component named `Container` that accepts a `props` object as an argument.\n* We use destructuring to extract several properties from the `props` object: `children`, `className`, `content`, `fluid`, `text`, and `textAlign`.\n* We use a utility function `cx` to concatenate CSS classes based on the values of the extracted properties. The `useKeyOnly` function is used to ensure that the class names are not duplicated. The `useTextAlignProp` function is used to convert the `textAlign` prop to a CSS class name.\n* We use another utility function `getUnhandledProps` to extract any props that are not handled by the `Container` component. These props are stored in the `rest` object.\n* We determine the `ElementType` of the component based on the `props` object using the `getElementType` function.\n* Finally, we return a JSX element with the `ElementType` and the `classes` and `rest` objects as props. If the `children` prop is not provided, we use the `content` prop as the child element.\n\nNote that this code assumes that the `cx`, `"
    ],
    "smoothed_bleu_4": 0.7437442340333584
  },
  {
    "doc_id": 39,
    "doc": {
      "id": 39,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Step/StepGroup.js",
      "func_name": "StepGroup",
      "original_string": "function StepGroup(props) {\n  const {\n    attached,\n    children,\n    className,\n    content,\n    fluid,\n    items,\n    ordered,\n    size,\n    stackable,\n    unstackable,\n    vertical,\n    widths,\n  } = props\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(ordered, 'ordered'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useValueAndKey(stackable, 'stackable'),\n    useWidthProp(widths),\n    'steps',\n    className,\n  )\n  const rest = getUnhandledProps(StepGroup, props)\n  const ElementType = getElementType(StepGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(items, item => Step.create(item))}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function StepGroup(props) {\n  const {\n    attached,\n    children,\n    className,\n    content,\n    fluid,\n    items,\n    ordered,\n    size,\n    stackable,\n    unstackable,\n    vertical,\n    widths,\n  } = props\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(ordered, 'ordered'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useValueAndKey(stackable, 'stackable'),\n    useWidthProp(widths),\n    'steps',\n    className,\n  )\n  const rest = getUnhandledProps(StepGroup, props)\n  const ElementType = getElementType(StepGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(items, item => Step.create(item))}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "StepGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "fluid",
        ",",
        "items",
        ",",
        "ordered",
        ",",
        "size",
        ",",
        "stackable",
        ",",
        "unstackable",
        ",",
        "vertical",
        ",",
        "widths",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "ordered",
        ",",
        "'ordered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "unstackable",
        ",",
        "'unstackable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "vertical",
        ",",
        "'vertical'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "stackable",
        ",",
        "'stackable'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "widths",
        ")",
        ",",
        "'steps'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "StepGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "StepGroup",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "_",
        ".",
        "map",
        "(",
        "items",
        ",",
        "item",
        "=>",
        "Step",
        ".",
        "create",
        "(",
        "item",
        ")",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A set of steps.",
      "docstring_tokens": [
        "A",
        "set",
        "of",
        "steps",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Step/StepGroup.js#L25-L76"
    },
    "target": "A set of steps .",
    "arguments": [
      [
        "function StepGroup ( props ) { const { attached , children , className , content , fluid , items , ordered , size , stackable , unstackable , vertical , widths , } = props const classes = cx ( 'ui' , size , useKeyOnly ( fluid , 'fluid' ) , useKeyOnly ( ordered , 'ordered' ) , useKeyOnly ( unstackable , 'unstackable' ) , useKeyOnly ( vertical , 'vertical' ) , useKeyOrValueAndKey ( attached , 'attached' ) , useValueAndKey ( stackable , 'stackable' ) , useWidthProp ( widths ) , 'steps' , className , ) const rest = getUnhandledProps ( StepGroup , props ) const ElementType = getElementType ( StepGroup , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { _ . map ( items , item => Step . create ( item ) ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default StepGroup ;\n\n#### StepGroup.md\n\n```markdown\n# StepGroup\n\nThe StepGroup is a container component that groups a series of steps together.\n\n## Usage\n\n```jsx\nimport React from'react';\nimport { Button, Step, StepGroup } from'semantic-ui-react';\n\nconst MySteps = () => (\n  <StepGroup>\n    <Step>\n      <Step.Content>\n        <Step.Title>Step Title</Step.Title>\n        <Step.Description>Step Description</Step.Description>\n      </Step.Content>\n    </Step>\n    <Step>\n      <Step.Content>\n        <Step.Title>Step Title</Step.Title>\n        <Step.Description>Step Description</Step.Description>\n      </Step.Content>\n    </Step>\n  </StepGroup>\n);\n```\n\n## API\n\n### Props\n\n* `attached`: Specifies whether the step group should be attached to the top or bottom of the parent element.\n* `children`: The child components of the step group.\n* `className`: Additional classes to add to the step group element.\n* `content`: The content of the step group.\n* `fluid`: Whether the step group should take up the full width of its parent element.\n* `items`: The items in"
      ]
    ],
    "filtered_resps": [
      " export default StepGroup ;\n\n#### StepGroup.md\n\n```markdown\n# StepGroup\n\nThe StepGroup is a container component that groups a series of steps together.\n\n## Usage\n\n```jsx\nimport React from'react';\nimport { Button, Step, StepGroup } from'semantic-ui-react';\n\nconst MySteps = () => (\n  <StepGroup>\n    <Step>\n      <Step.Content>\n        <Step.Title>Step Title</Step.Title>\n        <Step.Description>Step Description</Step.Description>\n      </Step.Content>\n    </Step>\n    <Step>\n      <Step.Content>\n        <Step.Title>Step Title</Step.Title>\n        <Step.Description>Step Description</Step.Description>\n      </Step.Content>\n    </Step>\n  </StepGroup>\n);\n```\n\n## API\n\n### Props\n\n* `attached`: Specifies whether the step group should be attached to the top or bottom of the parent element.\n* `children`: The child components of the step group.\n* `className`: Additional classes to add to the step group element.\n* `content`: The content of the step group.\n* `fluid`: Whether the step group should take up the full width of its parent element.\n* `items`: The items in"
    ],
    "smoothed_bleu_4": 0.6292987588997818
  },
  {
    "doc_id": 40,
    "doc": {
      "id": 40,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Divider/Divider.js",
      "func_name": "Divider",
      "original_string": "function Divider(props) {\n  const {\n    children,\n    className,\n    clearing,\n    content,\n    fitted,\n    hidden,\n    horizontal,\n    inverted,\n    section,\n    vertical,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(clearing, 'clearing'),\n    useKeyOnly(fitted, 'fitted'),\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(section, 'section'),\n    useKeyOnly(vertical, 'vertical'),\n    'divider',\n    className,\n  )\n  const rest = getUnhandledProps(Divider, props)\n  const ElementType = getElementType(Divider, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Divider(props) {\n  const {\n    children,\n    className,\n    clearing,\n    content,\n    fitted,\n    hidden,\n    horizontal,\n    inverted,\n    section,\n    vertical,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(clearing, 'clearing'),\n    useKeyOnly(fitted, 'fitted'),\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(section, 'section'),\n    useKeyOnly(vertical, 'vertical'),\n    'divider',\n    className,\n  )\n  const rest = getUnhandledProps(Divider, props)\n  const ElementType = getElementType(Divider, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Divider",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "clearing",
        ",",
        "content",
        ",",
        "fitted",
        ",",
        "hidden",
        ",",
        "horizontal",
        ",",
        "inverted",
        ",",
        "section",
        ",",
        "vertical",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "clearing",
        ",",
        "'clearing'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "fitted",
        ",",
        "'fitted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "hidden",
        ",",
        "'hidden'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "horizontal",
        ",",
        "'horizontal'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "section",
        ",",
        "'section'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "vertical",
        ",",
        "'vertical'",
        ")",
        ",",
        "'divider'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Divider",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Divider",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A divider visually segments content into groups.",
      "docstring_tokens": [
        "A",
        "divider",
        "visually",
        "segments",
        "content",
        "into",
        "groups",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Divider/Divider.js#L16-L50"
    },
    "target": "A divider visually segments content into groups .",
    "arguments": [
      [
        "function Divider ( props ) { const { children , className , clearing , content , fitted , hidden , horizontal , inverted , section , vertical , } = props const classes = cx ( 'ui' , useKeyOnly ( clearing , 'clearing' ) , useKeyOnly ( fitted , 'fitted' ) , useKeyOnly ( hidden , 'hidden' ) , useKeyOnly ( horizontal , 'horizontal' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( section , 'section' ) , useKeyOnly ( vertical , 'vertical' ) , 'divider' , className , ) const rest = getUnhandledProps ( Divider , props ) const ElementType = getElementType ( Divider , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default Divider; ```\n\nThis code defines a React component named `Divider` which is a container component that can be used to separate content in a user interface. The component accepts various props such as `children`, `className`, `clearing`, `content`, `fitted`, `hidden`, `horizontal`, `inverted`, `section`, and `vertical`. It uses the `cx` function from the `classnames` library to generate a class string based on the provided props. The `rest` variable holds the remaining props that are not used to generate the class string. The `ElementType` variable is determined by the `getElementType` function, which returns the actual HTML element to be used based on the provided props. Finally, the component returns an element of the determined type with the generated class string and any remaining props, and renders the `children` or `content` prop inside it.\n\n### Usage Example\n```jsx\nimport React from'react';\nimport { Divider } from './Divider';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <p>This is some content</p>\n      <Divider content=\"Separator\" />\n      <p>This is some more content</p>\n    </div>\n"
      ]
    ],
    "filtered_resps": [
      " export default Divider; ```\n\nThis code defines a React component named `Divider` which is a container component that can be used to separate content in a user interface. The component accepts various props such as `children`, `className`, `clearing`, `content`, `fitted`, `hidden`, `horizontal`, `inverted`, `section`, and `vertical`. It uses the `cx` function from the `classnames` library to generate a class string based on the provided props. The `rest` variable holds the remaining props that are not used to generate the class string. The `ElementType` variable is determined by the `getElementType` function, which returns the actual HTML element to be used based on the provided props. Finally, the component returns an element of the determined type with the generated class string and any remaining props, and renders the `children` or `content` prop inside it.\n\n### Usage Example\n```jsx\nimport React from'react';\nimport { Divider } from './Divider';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <p>This is some content</p>\n      <Divider content=\"Separator\" />\n      <p>This is some more content</p>\n    </div>\n"
    ],
    "smoothed_bleu_4": 0.5351827933889708
  },
  {
    "doc_id": 41,
    "doc": {
      "id": 41,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Header/Header.js",
      "func_name": "Header",
      "original_string": "function Header(props) {\n  const {\n    attached,\n    block,\n    children,\n    className,\n    color,\n    content,\n    disabled,\n    dividing,\n    floated,\n    icon,\n    image,\n    inverted,\n    size,\n    sub,\n    subheader,\n    textAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(block, 'block'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(dividing, 'dividing'),\n    useValueAndKey(floated, 'floated'),\n    useKeyOnly(icon === true, 'icon'),\n    useKeyOnly(image === true, 'image'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(sub, 'sub'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useTextAlignProp(textAlign),\n    'header',\n    className,\n  )\n  const rest = getUnhandledProps(Header, props)\n  const ElementType = getElementType(Header, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const iconElement = Icon.create(icon, { autoGenerateKey: false })\n  const imageElement = Image.create(image, { autoGenerateKey: false })\n  const subheaderElement = HeaderSubheader.create(subheader, { autoGenerateKey: false })\n\n  if (iconElement || imageElement) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {iconElement || imageElement}\n        {(content || subheaderElement) && (\n          <HeaderContent>\n            {content}\n            {subheaderElement}\n          </HeaderContent>\n        )}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {content}\n      {subheaderElement}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Header(props) {\n  const {\n    attached,\n    block,\n    children,\n    className,\n    color,\n    content,\n    disabled,\n    dividing,\n    floated,\n    icon,\n    image,\n    inverted,\n    size,\n    sub,\n    subheader,\n    textAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(block, 'block'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(dividing, 'dividing'),\n    useValueAndKey(floated, 'floated'),\n    useKeyOnly(icon === true, 'icon'),\n    useKeyOnly(image === true, 'image'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(sub, 'sub'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useTextAlignProp(textAlign),\n    'header',\n    className,\n  )\n  const rest = getUnhandledProps(Header, props)\n  const ElementType = getElementType(Header, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const iconElement = Icon.create(icon, { autoGenerateKey: false })\n  const imageElement = Image.create(image, { autoGenerateKey: false })\n  const subheaderElement = HeaderSubheader.create(subheader, { autoGenerateKey: false })\n\n  if (iconElement || imageElement) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {iconElement || imageElement}\n        {(content || subheaderElement) && (\n          <HeaderContent>\n            {content}\n            {subheaderElement}\n          </HeaderContent>\n        )}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {content}\n      {subheaderElement}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Header",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "block",
        ",",
        "children",
        ",",
        "className",
        ",",
        "color",
        ",",
        "content",
        ",",
        "disabled",
        ",",
        "dividing",
        ",",
        "floated",
        ",",
        "icon",
        ",",
        "image",
        ",",
        "inverted",
        ",",
        "size",
        ",",
        "sub",
        ",",
        "subheader",
        ",",
        "textAlign",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "block",
        ",",
        "'block'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "dividing",
        ",",
        "'dividing'",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "icon",
        "===",
        "true",
        ",",
        "'icon'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "image",
        "===",
        "true",
        ",",
        "'image'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "sub",
        ",",
        "'sub'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "'header'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Header",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Header",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "iconElement",
        "=",
        "Icon",
        ".",
        "create",
        "(",
        "icon",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "const",
        "imageElement",
        "=",
        "Image",
        ".",
        "create",
        "(",
        "image",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "const",
        "subheaderElement",
        "=",
        "HeaderSubheader",
        ".",
        "create",
        "(",
        "subheader",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "if",
        "(",
        "iconElement",
        "||",
        "imageElement",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "iconElement",
        "||",
        "imageElement",
        "}",
        "\n        ",
        "{",
        "(",
        "content",
        "||",
        "subheaderElement",
        ")",
        "&&",
        "(",
        "<",
        "HeaderContent",
        ">",
        "\n            ",
        "{",
        "content",
        "}",
        "\n            ",
        "{",
        "subheaderElement",
        "}",
        "\n          ",
        "<",
        "/",
        "HeaderContent",
        ">",
        ")",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "content",
        "}",
        "\n      ",
        "{",
        "subheaderElement",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A header provides a short summary of content",
      "docstring_tokens": [
        "A",
        "header",
        "provides",
        "a",
        "short",
        "summary",
        "of",
        "content"
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Header/Header.js#L26-L98"
    },
    "target": "A header provides a short summary of content",
    "arguments": [
      [
        "function Header ( props ) { const { attached , block , children , className , color , content , disabled , dividing , floated , icon , image , inverted , size , sub , subheader , textAlign , } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( block , 'block' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( dividing , 'dividing' ) , useValueAndKey ( floated , 'floated' ) , useKeyOnly ( icon === true , 'icon' ) , useKeyOnly ( image === true , 'image' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( sub , 'sub' ) , useKeyOrValueAndKey ( attached , 'attached' ) , useTextAlignProp ( textAlign ) , 'header' , className , ) const rest = getUnhandledProps ( Header , props ) const ElementType = getElementType ( Header , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } const iconElement = Icon . create ( icon , { autoGenerateKey : false } ) const imageElement = Image . create ( image , { autoGenerateKey : false } ) const subheaderElement = HeaderSubheader . create ( subheader , { autoGenerateKey : false } ) if ( iconElement || imageElement ) { return ( < ElementType { ... rest } className = { classes } > { iconElement || imageElement } { ( content || subheaderElement ) && ( < HeaderContent > { content } { subheaderElement } < / HeaderContent > ) } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { content } { subheaderElement } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` This code is a React functional component that renders a header element. It takes several props, such as `attached`, `block`, `children`, `className`, `color`, `content`, `disabled`, `dividing`, `floated`, `icon`, `image`, `inverted`, `size`, `sub`, `subheader`, `textAlign`, and others. It uses the `cx` function to concatenate class names based on the props, and it uses the `getUnhandledProps` function to get the props that should not be passed to the rendered element. The component then checks if the `children` prop is not nil and renders the children inside the header element. If there is an icon or image prop, it renders the icon or image element. If there is a subheader prop, it renders the subheader element. Finally, it renders the content and subheader elements if they are not nil. This code seems to be a part of a larger library or framework, possibly a React UI component library, and it follows a consistent coding style and structure.\n```python\n# -*- coding: utf-8 -*-\n\nimport re\nimport os\n\nfrom sqlalchemy import create_engine, MetaData, Table\nfrom sqlalchemy.ext.declar"
      ]
    ],
    "filtered_resps": [
      " ``` This code is a React functional component that renders a header element. It takes several props, such as `attached`, `block`, `children`, `className`, `color`, `content`, `disabled`, `dividing`, `floated`, `icon`, `image`, `inverted`, `size`, `sub`, `subheader`, `textAlign`, and others. It uses the `cx` function to concatenate class names based on the props, and it uses the `getUnhandledProps` function to get the props that should not be passed to the rendered element. The component then checks if the `children` prop is not nil and renders the children inside the header element. If there is an icon or image prop, it renders the icon or image element. If there is a subheader prop, it renders the subheader element. Finally, it renders the content and subheader elements if they are not nil. This code seems to be a part of a larger library or framework, possibly a React UI component library, and it follows a consistent coding style and structure.\n```python\n# -*- coding: utf-8 -*-\n\nimport re\nimport os\n\nfrom sqlalchemy import create_engine, MetaData, Table\nfrom sqlalchemy.ext.declar"
    ],
    "smoothed_bleu_4": 0.6806845457666619
  },
  {
    "doc_id": 42,
    "doc": {
      "id": 42,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Grid/Grid.js",
      "func_name": "Grid",
      "original_string": "function Grid(props) {\n  const {\n    celled,\n    centered,\n    children,\n    className,\n    columns,\n    container,\n    divided,\n    doubling,\n    inverted,\n    padded,\n    relaxed,\n    reversed,\n    stackable,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(container, 'container'),\n    useKeyOnly(doubling, 'doubling'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(stackable, 'stackable'),\n    useKeyOnly(stretched, 'stretched'),\n    useKeyOrValueAndKey(celled, 'celled'),\n    useKeyOrValueAndKey(divided, 'divided'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\n    useMultipleProp(reversed, 'reversed'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column', true),\n    'grid',\n    className,\n  )\n  const rest = getUnhandledProps(Grid, props)\n  const ElementType = getElementType(Grid, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Grid(props) {\n  const {\n    celled,\n    centered,\n    children,\n    className,\n    columns,\n    container,\n    divided,\n    doubling,\n    inverted,\n    padded,\n    relaxed,\n    reversed,\n    stackable,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(container, 'container'),\n    useKeyOnly(doubling, 'doubling'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(stackable, 'stackable'),\n    useKeyOnly(stretched, 'stretched'),\n    useKeyOrValueAndKey(celled, 'celled'),\n    useKeyOrValueAndKey(divided, 'divided'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\n    useMultipleProp(reversed, 'reversed'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(columns, 'column', true),\n    'grid',\n    className,\n  )\n  const rest = getUnhandledProps(Grid, props)\n  const ElementType = getElementType(Grid, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Grid",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "celled",
        ",",
        "centered",
        ",",
        "children",
        ",",
        "className",
        ",",
        "columns",
        ",",
        "container",
        ",",
        "divided",
        ",",
        "doubling",
        ",",
        "inverted",
        ",",
        "padded",
        ",",
        "relaxed",
        ",",
        "reversed",
        ",",
        "stackable",
        ",",
        "stretched",
        ",",
        "textAlign",
        ",",
        "verticalAlign",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "centered",
        ",",
        "'centered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "container",
        ",",
        "'container'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "doubling",
        ",",
        "'doubling'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stackable",
        ",",
        "'stackable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stretched",
        ",",
        "'stretched'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "celled",
        ",",
        "'celled'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "divided",
        ",",
        "'divided'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "padded",
        ",",
        "'padded'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "relaxed",
        ",",
        "'relaxed'",
        ")",
        ",",
        "useMultipleProp",
        "(",
        "reversed",
        ",",
        "'reversed'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "columns",
        ",",
        "'column'",
        ",",
        "true",
        ")",
        ",",
        "'grid'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Grid",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Grid",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A grid is used to harmonize negative space in a layout.",
      "docstring_tokens": [
        "A",
        "grid",
        "is",
        "used",
        "to",
        "harmonize",
        "negative",
        "space",
        "in",
        "a",
        "layout",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Grid/Grid.js#L23-L70"
    },
    "target": "A grid is used to harmonize negative space in a layout .",
    "arguments": [
      [
        "function Grid ( props ) { const { celled , centered , children , className , columns , container , divided , doubling , inverted , padded , relaxed , reversed , stackable , stretched , textAlign , verticalAlign , } = props const classes = cx ( 'ui' , useKeyOnly ( centered , 'centered' ) , useKeyOnly ( container , 'container' ) , useKeyOnly ( doubling , 'doubling' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( stackable , 'stackable' ) , useKeyOnly ( stretched , 'stretched' ) , useKeyOrValueAndKey ( celled , 'celled' ) , useKeyOrValueAndKey ( divided , 'divided' ) , useKeyOrValueAndKey ( padded , 'padded' ) , useKeyOrValueAndKey ( relaxed , 'relaxed' ) , useMultipleProp ( reversed , 'reversed' ) , useTextAlignProp ( textAlign ) , useVerticalAlignProp ( verticalAlign ) , useWidthProp ( columns , 'column' , true ) , 'grid' , className , ) const rest = getUnhandledProps ( Grid , props ) const ElementType = getElementType ( Grid , props ) return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Grid. defaultProps = { celled : false, centered : false, children : undefined, className : undefined, columns : undefined, container : false, divided : false, doubling : false, inverted : false, padded : false, relaxed : false, reversed : false, stackable : false, stretched : false, textAlign : undefined, verticalAlign : undefined, } export default Grid\n```\n## Step 6: Combine the code\n\nNow, let's combine the code from all the steps into a single function. Here is the combined code:\n```javascript\nimport { cx, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, getUnhandledProps, getElementType } from '../helpers';\nimport { useWidthProp } from '../helpers/props';\n\nfunction Grid ( props ) {\n  const {\n    celled,\n    centered,\n    children,\n    className,\n    columns,\n    container,\n    divided,\n    doubling,\n    inverted,\n    padded,\n    relaxed,\n    reversed,\n    stackable,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props;\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered"
      ]
    ],
    "filtered_resps": [
      " Grid. defaultProps = { celled : false, centered : false, children : undefined, className : undefined, columns : undefined, container : false, divided : false, doubling : false, inverted : false, padded : false, relaxed : false, reversed : false, stackable : false, stretched : false, textAlign : undefined, verticalAlign : undefined, } export default Grid\n```\n## Step 6: Combine the code\n\nNow, let's combine the code from all the steps into a single function. Here is the combined code:\n```javascript\nimport { cx, useKeyOnly, useKeyOrValueAndKey, useMultipleProp, useTextAlignProp, useVerticalAlignProp, getUnhandledProps, getElementType } from '../helpers';\nimport { useWidthProp } from '../helpers/props';\n\nfunction Grid ( props ) {\n  const {\n    celled,\n    centered,\n    children,\n    className,\n    columns,\n    container,\n    divided,\n    doubling,\n    inverted,\n    padded,\n    relaxed,\n    reversed,\n    stackable,\n    stretched,\n    textAlign,\n    verticalAlign,\n  } = props;\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered"
    ],
    "smoothed_bleu_4": 0.6758540882594942
  },
  {
    "doc_id": 43,
    "doc": {
      "id": 43,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Breadcrumb/Breadcrumb.js",
      "func_name": "Breadcrumb",
      "original_string": "function Breadcrumb(props) {\n  const { children, className, divider, icon, sections, size } = props\n\n  const classes = cx('ui', size, 'breadcrumb', className)\n  const rest = getUnhandledProps(Breadcrumb, props)\n  const ElementType = getElementType(Breadcrumb, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const childElements = []\n\n  _.each(sections, (section, index) => {\n    // section\n    const breadcrumbElement = BreadcrumbSection.create(section)\n    childElements.push(breadcrumbElement)\n\n    // divider\n    if (index !== sections.length - 1) {\n      const key = `${breadcrumbElement.key}_divider` || JSON.stringify(section)\n      childElements.push(BreadcrumbDivider.create({ content: divider, icon, key }))\n    }\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childElements}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Breadcrumb(props) {\n  const { children, className, divider, icon, sections, size } = props\n\n  const classes = cx('ui', size, 'breadcrumb', className)\n  const rest = getUnhandledProps(Breadcrumb, props)\n  const ElementType = getElementType(Breadcrumb, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const childElements = []\n\n  _.each(sections, (section, index) => {\n    // section\n    const breadcrumbElement = BreadcrumbSection.create(section)\n    childElements.push(breadcrumbElement)\n\n    // divider\n    if (index !== sections.length - 1) {\n      const key = `${breadcrumbElement.key}_divider` || JSON.stringify(section)\n      childElements.push(BreadcrumbDivider.create({ content: divider, icon, key }))\n    }\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childElements}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Breadcrumb",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "divider",
        ",",
        "icon",
        ",",
        "sections",
        ",",
        "size",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "'breadcrumb'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Breadcrumb",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Breadcrumb",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "childElements",
        "=",
        "[",
        "]",
        "_",
        ".",
        "each",
        "(",
        "sections",
        ",",
        "(",
        "section",
        ",",
        "index",
        ")",
        "=>",
        "{",
        "// section",
        "const",
        "breadcrumbElement",
        "=",
        "BreadcrumbSection",
        ".",
        "create",
        "(",
        "section",
        ")",
        "childElements",
        ".",
        "push",
        "(",
        "breadcrumbElement",
        ")",
        "// divider",
        "if",
        "(",
        "index",
        "!==",
        "sections",
        ".",
        "length",
        "-",
        "1",
        ")",
        "{",
        "const",
        "key",
        "=",
        "`",
        "${",
        "breadcrumbElement",
        ".",
        "key",
        "}",
        "`",
        "||",
        "JSON",
        ".",
        "stringify",
        "(",
        "section",
        ")",
        "childElements",
        ".",
        "push",
        "(",
        "BreadcrumbDivider",
        ".",
        "create",
        "(",
        "{",
        "content",
        ":",
        "divider",
        ",",
        "icon",
        ",",
        "key",
        "}",
        ")",
        ")",
        "}",
        "}",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childElements",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A breadcrumb is used to show hierarchy between content.",
      "docstring_tokens": [
        "A",
        "breadcrumb",
        "is",
        "used",
        "to",
        "show",
        "hierarchy",
        "between",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Breadcrumb/Breadcrumb.js#L13-L47"
    },
    "target": "A breadcrumb is used to show hierarchy between content .",
    "arguments": [
      [
        "function Breadcrumb ( props ) { const { children , className , divider , icon , sections , size } = props const classes = cx ( 'ui' , size , 'breadcrumb' , className ) const rest = getUnhandledProps ( Breadcrumb , props ) const ElementType = getElementType ( Breadcrumb , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } const childElements = [ ] _ . each ( sections , ( section , index ) => { // section const breadcrumbElement = BreadcrumbSection . create ( section ) childElements . push ( breadcrumbElement ) // divider if ( index !== sections . length - 1 ) { const key = ` ${ breadcrumbElement . key } ` || JSON . stringify ( section ) childElements . push ( BreadcrumbDivider . create ( { content : divider , icon , key } ) ) } } ) return ( < ElementType { ... rest } className = { classes } > { childElements } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return null }\n```\n\nThis is the code for the Breadcrumb component in the Enso UI library. It takes in several props such as `children`, `className`, `divider`, `icon`, `sections`, and `size`. It then uses a utility function called `cx` to combine the classes for the breadcrumb, and another utility function called `getUnhandledProps` to remove any unnecessary props from the component. The component then checks if the `children` prop is not null, and if so, returns a JSX element with the breadcrumb classes and the children prop. If the `children` prop is null, the component uses the `sections` prop to generate a list of breadcrumb elements and dividers, and returns a JSX element with these elements.\n\nThe `BreadcrumbSection` and `BreadcrumbDivider` components are not defined in this code snippet, but they are likely custom components that render a single breadcrumb section or divider, respectively.\n\nThe `getElementType` function is not defined in this code snippet, but it is likely a utility function that determines the type of element to use for the breadcrumb component based on the props.\n\nThe `childrenUtils` object is not defined in this code snippet, but it is likely a utility object that provides functions"
      ]
    ],
    "filtered_resps": [
      " return null }\n```\n\nThis is the code for the Breadcrumb component in the Enso UI library. It takes in several props such as `children`, `className`, `divider`, `icon`, `sections`, and `size`. It then uses a utility function called `cx` to combine the classes for the breadcrumb, and another utility function called `getUnhandledProps` to remove any unnecessary props from the component. The component then checks if the `children` prop is not null, and if so, returns a JSX element with the breadcrumb classes and the children prop. If the `children` prop is null, the component uses the `sections` prop to generate a list of breadcrumb elements and dividers, and returns a JSX element with these elements.\n\nThe `BreadcrumbSection` and `BreadcrumbDivider` components are not defined in this code snippet, but they are likely custom components that render a single breadcrumb section or divider, respectively.\n\nThe `getElementType` function is not defined in this code snippet, but it is likely a utility function that determines the type of element to use for the breadcrumb component based on the props.\n\nThe `childrenUtils` object is not defined in this code snippet, but it is likely a utility object that provides functions"
    ],
    "smoothed_bleu_4": 0.6047956315398452
  },
  {
    "doc_id": 44,
    "doc": {
      "id": 44,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Card/CardDescription.js",
      "func_name": "CardDescription",
      "original_string": "function CardDescription(props) {\n  const { children, className, content, textAlign } = props\n  const classes = cx(useTextAlignProp(textAlign), 'description', className)\n  const rest = getUnhandledProps(CardDescription, props)\n  const ElementType = getElementType(CardDescription, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function CardDescription(props) {\n  const { children, className, content, textAlign } = props\n  const classes = cx(useTextAlignProp(textAlign), 'description', className)\n  const rest = getUnhandledProps(CardDescription, props)\n  const ElementType = getElementType(CardDescription, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "CardDescription",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "textAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "'description'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "CardDescription",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "CardDescription",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A card can contain a description with one or more paragraphs.",
      "docstring_tokens": [
        "A",
        "card",
        "can",
        "contain",
        "a",
        "description",
        "with",
        "one",
        "or",
        "more",
        "paragraphs",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Card/CardDescription.js#L18-L29"
    },
    "target": "A card can contain a description with one or more paragraphs .",
    "arguments": [
      [
        "function CardDescription ( props ) { const { children , className , content , textAlign } = props const classes = cx ( useTextAlignProp ( textAlign ) , 'description' , className ) const rest = getUnhandledProps ( CardDescription , props ) const ElementType = getElementType ( CardDescription , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } ```\n\nThis code defines a `CardDescription` component that is used to display a description of a card. It takes several props, including `children`, `className`, `content`, and `textAlign`, which are used to customize the appearance and behavior of the component. The `CardDescription` component uses the `useTextAlignProp` hook to determine the text alignment based on the `textAlign` prop, and then combines it with the `description` and `className` classes to create a CSS class string. The `getUnhandledProps` function is used to exclude any props that are not handled by the component, and the `getElementType` function is used to determine the element type of the component. Finally, the component renders its children or content based on whether they are nil or not.\n\nHere's an explanation of the code:\n\n* The `useTextAlignProp` hook is used to determine the text alignment based on the `textAlign` prop.\n* The `cx` function is used to combine the text alignment class with the `description` and `className` classes to create a CSS class string.\n* The `getUnhandledProps` function is used to exclude any props that are not handled by the component.\n* The `get"
      ]
    ],
    "filtered_resps": [
      " } ```\n\nThis code defines a `CardDescription` component that is used to display a description of a card. It takes several props, including `children`, `className`, `content`, and `textAlign`, which are used to customize the appearance and behavior of the component. The `CardDescription` component uses the `useTextAlignProp` hook to determine the text alignment based on the `textAlign` prop, and then combines it with the `description` and `className` classes to create a CSS class string. The `getUnhandledProps` function is used to exclude any props that are not handled by the component, and the `getElementType` function is used to determine the element type of the component. Finally, the component renders its children or content based on whether they are nil or not.\n\nHere's an explanation of the code:\n\n* The `useTextAlignProp` hook is used to determine the text alignment based on the `textAlign` prop.\n* The `cx` function is used to combine the text alignment class with the `description` and `className` classes to create a CSS class string.\n* The `getUnhandledProps` function is used to exclude any props that are not handled by the component.\n* The `get"
    ],
    "smoothed_bleu_4": 0.8836770676595624
  },
  {
    "doc_id": 45,
    "doc": {
      "id": 45,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Item/ItemGroup.js",
      "func_name": "ItemGroup",
      "original_string": "function ItemGroup(props) {\n  const { children, className, content, divided, items, link, relaxed, unstackable } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(divided, 'divided'),\n    useKeyOnly(link, 'link'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\n    'items',\n    className,\n  )\n  const rest = getUnhandledProps(ItemGroup, props)\n  const ElementType = getElementType(ItemGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  const itemsJSX = _.map(items, (item) => {\n    const { childKey, ...itemProps } = item\n    const finalKey =\n      childKey ||\n      [itemProps.content, itemProps.description, itemProps.header, itemProps.meta].join('-')\n\n    return <Item {...itemProps} key={finalKey} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {itemsJSX}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function ItemGroup(props) {\n  const { children, className, content, divided, items, link, relaxed, unstackable } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(divided, 'divided'),\n    useKeyOnly(link, 'link'),\n    useKeyOnly(unstackable, 'unstackable'),\n    useKeyOrValueAndKey(relaxed, 'relaxed'),\n    'items',\n    className,\n  )\n  const rest = getUnhandledProps(ItemGroup, props)\n  const ElementType = getElementType(ItemGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  const itemsJSX = _.map(items, (item) => {\n    const { childKey, ...itemProps } = item\n    const finalKey =\n      childKey ||\n      [itemProps.content, itemProps.description, itemProps.header, itemProps.meta].join('-')\n\n    return <Item {...itemProps} key={finalKey} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {itemsJSX}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "ItemGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "divided",
        ",",
        "items",
        ",",
        "link",
        ",",
        "relaxed",
        ",",
        "unstackable",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "divided",
        ",",
        "'divided'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "link",
        ",",
        "'link'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "unstackable",
        ",",
        "'unstackable'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "relaxed",
        ",",
        "'relaxed'",
        ")",
        ",",
        "'items'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ItemGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "ItemGroup",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "itemsJSX",
        "=",
        "_",
        ".",
        "map",
        "(",
        "items",
        ",",
        "(",
        "item",
        ")",
        "=>",
        "{",
        "const",
        "{",
        "childKey",
        ",",
        "...",
        "itemProps",
        "}",
        "=",
        "item",
        "const",
        "finalKey",
        "=",
        "childKey",
        "||",
        "[",
        "itemProps",
        ".",
        "content",
        ",",
        "itemProps",
        ".",
        "description",
        ",",
        "itemProps",
        ".",
        "header",
        ",",
        "itemProps",
        ".",
        "meta",
        "]",
        ".",
        "join",
        "(",
        "'-'",
        ")",
        "return",
        "<",
        "Item",
        "{",
        "...",
        "itemProps",
        "}",
        "key",
        "=",
        "{",
        "finalKey",
        "}",
        "/",
        ">",
        "}",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "itemsJSX",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A group of items.",
      "docstring_tokens": [
        "A",
        "group",
        "of",
        "items",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Item/ItemGroup.js#L19-L63"
    },
    "target": "A group of items .",
    "arguments": [
      [
        "function ItemGroup ( props ) { const { children , className , content , divided , items , link , relaxed , unstackable } = props const classes = cx ( 'ui' , useKeyOnly ( divided , 'divided' ) , useKeyOnly ( link , 'link' ) , useKeyOnly ( unstackable , 'unstackable' ) , useKeyOrValueAndKey ( relaxed , 'relaxed' ) , 'items' , className , ) const rest = getUnhandledProps ( ItemGroup , props ) const ElementType = getElementType ( ItemGroup , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } const itemsJSX = _ . map ( items , ( item ) => { const { childKey , ... itemProps } = item const finalKey = childKey || [ itemProps . content , itemProps . description , itemProps . header , itemProps . meta ] . join ( '-' ) return < Item { ... itemProps } key = { finalKey } / > } ) return ( < ElementType { ... rest } className = { classes } > { itemsJSX } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " const value = useValue ( items ) const horizontalAlignment = useHorizontalValue ( value ) return ( < ElementType {... rest } className = { classes } > { value } < / ElementType > ) } ItemGroup. defaultProps = { children : null, items : [ ], link : false, unstackable : false } export default ItemGroup ; ``` } ```html\n```html\nimport React from'react' import { ItemGroup, useHorizontalValue } from './ItemGroup.js' import { Grid } from'semantic-ui-react' const App = ( ) => { const [ horizontalValue, setHorizontalValue ] = React.useState ( 'left' ) return ( < div > < Grid > < Grid.Column width = { 4 } > < ItemGroup horizontalValue = { horizontalValue } onHorizontalChange = { ( newHorizontalValue ) => { setHorizontalValue ( newHorizontalValue ) } } > < Item content = 'Item 1' /> < Item content = 'Item 2' /> < Item content = 'Item 3' /> < Item content = 'Item 4' /> < Item content = 'Item 5' /> < Item content = 'Item 6' /> < Item content = '"
      ]
    ],
    "filtered_resps": [
      " const value = useValue ( items ) const horizontalAlignment = useHorizontalValue ( value ) return ( < ElementType {... rest } className = { classes } > { value } < / ElementType > ) } ItemGroup. defaultProps = { children : null, items : [ ], link : false, unstackable : false } export default ItemGroup ; ``` } ```html\n```html\nimport React from'react' import { ItemGroup, useHorizontalValue } from './ItemGroup.js' import { Grid } from'semantic-ui-react' const App = ( ) => { const [ horizontalValue, setHorizontalValue ] = React.useState ( 'left' ) return ( < div > < Grid > < Grid.Column width = { 4 } > < ItemGroup horizontalValue = { horizontalValue } onHorizontalChange = { ( newHorizontalValue ) => { setHorizontalValue ( newHorizontalValue ) } } > < Item content = 'Item 1' /> < Item content = 'Item 2' /> < Item content = 'Item 3' /> < Item content = 'Item 4' /> < Item content = 'Item 5' /> < Item content = 'Item 6' /> < Item content = '"
    ],
    "smoothed_bleu_4": 0.5012494777546702
  },
  {
    "doc_id": 46,
    "doc": {
      "id": 46,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Grid/GridColumn.js",
      "func_name": "GridColumn",
      "original_string": "function GridColumn(props) {\n  const {\n    children,\n    className,\n    computer,\n    color,\n    floated,\n    largeScreen,\n    mobile,\n    only,\n    stretched,\n    tablet,\n    textAlign,\n    verticalAlign,\n    widescreen,\n    width,\n  } = props\n\n  const classes = cx(\n    color,\n    useKeyOnly(stretched, 'stretched'),\n    useMultipleProp(only, 'only'),\n    useTextAlignProp(textAlign),\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(computer, 'wide computer'),\n    useWidthProp(largeScreen, 'wide large screen'),\n    useWidthProp(mobile, 'wide mobile'),\n    useWidthProp(tablet, 'wide tablet'),\n    useWidthProp(widescreen, 'wide widescreen'),\n    useWidthProp(width, 'wide'),\n    'column',\n    className,\n  )\n  const rest = getUnhandledProps(GridColumn, props)\n  const ElementType = getElementType(GridColumn, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function GridColumn(props) {\n  const {\n    children,\n    className,\n    computer,\n    color,\n    floated,\n    largeScreen,\n    mobile,\n    only,\n    stretched,\n    tablet,\n    textAlign,\n    verticalAlign,\n    widescreen,\n    width,\n  } = props\n\n  const classes = cx(\n    color,\n    useKeyOnly(stretched, 'stretched'),\n    useMultipleProp(only, 'only'),\n    useTextAlignProp(textAlign),\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(computer, 'wide computer'),\n    useWidthProp(largeScreen, 'wide large screen'),\n    useWidthProp(mobile, 'wide mobile'),\n    useWidthProp(tablet, 'wide tablet'),\n    useWidthProp(widescreen, 'wide widescreen'),\n    useWidthProp(width, 'wide'),\n    'column',\n    className,\n  )\n  const rest = getUnhandledProps(GridColumn, props)\n  const ElementType = getElementType(GridColumn, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "GridColumn",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "computer",
        ",",
        "color",
        ",",
        "floated",
        ",",
        "largeScreen",
        ",",
        "mobile",
        ",",
        "only",
        ",",
        "stretched",
        ",",
        "tablet",
        ",",
        "textAlign",
        ",",
        "verticalAlign",
        ",",
        "widescreen",
        ",",
        "width",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "color",
        ",",
        "useKeyOnly",
        "(",
        "stretched",
        ",",
        "'stretched'",
        ")",
        ",",
        "useMultipleProp",
        "(",
        "only",
        ",",
        "'only'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "computer",
        ",",
        "'wide computer'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "largeScreen",
        ",",
        "'wide large screen'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "mobile",
        ",",
        "'wide mobile'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "tablet",
        ",",
        "'wide tablet'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "widescreen",
        ",",
        "'wide widescreen'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "width",
        ",",
        "'wide'",
        ")",
        ",",
        "'column'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "GridColumn",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "GridColumn",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A column sub-component for Grid.",
      "docstring_tokens": [
        "A",
        "column",
        "sub",
        "-",
        "component",
        "for",
        "Grid",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Grid/GridColumn.js#L22-L64"
    },
    "target": "A column sub - component for Grid .",
    "arguments": [
      [
        "function GridColumn ( props ) { const { children , className , computer , color , floated , largeScreen , mobile , only , stretched , tablet , textAlign , verticalAlign , widescreen , width , } = props const classes = cx ( color , useKeyOnly ( stretched , 'stretched' ) , useMultipleProp ( only , 'only' ) , useTextAlignProp ( textAlign ) , useValueAndKey ( floated , 'floated' ) , useVerticalAlignProp ( verticalAlign ) , useWidthProp ( computer , 'wide computer' ) , useWidthProp ( largeScreen , 'wide large screen' ) , useWidthProp ( mobile , 'wide mobile' ) , useWidthProp ( tablet , 'wide tablet' ) , useWidthProp ( widescreen , 'wide widescreen' ) , useWidthProp ( width , 'wide' ) , 'column' , className , ) const rest = getUnhandledProps ( GridColumn , props ) const ElementType = getElementType ( GridColumn , props ) return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " GridColumn. defaultProps = { floated : false, stretched : false, } return GridColumn } } GridColumnContainer. propTypes = { children : React. PropTypes. node, className : React. PropTypes. string, computer : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), color : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. shape ( { light : React. PropTypes. string, dark : React. PropTypes. string, } ) ] ), floated : React. PropTypes. bool, largeScreen : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), mobile : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), only : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), stretched : React. PropTypes. bool, tablet : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes."
      ]
    ],
    "filtered_resps": [
      " GridColumn. defaultProps = { floated : false, stretched : false, } return GridColumn } } GridColumnContainer. propTypes = { children : React. PropTypes. node, className : React. PropTypes. string, computer : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), color : React. PropTypes. oneOfType ( [ React. PropTypes. string, React. PropTypes. shape ( { light : React. PropTypes. string, dark : React. PropTypes. string, } ) ] ), floated : React. PropTypes. bool, largeScreen : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), mobile : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), only : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes. number ] ), stretched : React. PropTypes. bool, tablet : React. PropTypes. oneOfType ( [ React. PropTypes. bool, React. PropTypes. string, React. PropTypes."
    ],
    "smoothed_bleu_4": 0.4197297220924593
  },
  {
    "doc_id": 47,
    "doc": {
      "id": 47,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Item/ItemImage.js",
      "func_name": "ItemImage",
      "original_string": "function ItemImage(props) {\n  const { size } = props\n  const rest = getUnhandledProps(ItemImage, props)\n\n  return <Image {...rest} size={size} ui={!!size} wrapped />\n}",
      "language": "javascript",
      "code": "function ItemImage(props) {\n  const { size } = props\n  const rest = getUnhandledProps(ItemImage, props)\n\n  return <Image {...rest} size={size} ui={!!size} wrapped />\n}",
      "code_tokens": [
        "function",
        "ItemImage",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "size",
        "}",
        "=",
        "props",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ItemImage",
        ",",
        "props",
        ")",
        "return",
        "<",
        "Image",
        "{",
        "...",
        "rest",
        "}",
        "size",
        "=",
        "{",
        "size",
        "}",
        "ui",
        "=",
        "{",
        "!",
        "!",
        "size",
        "}",
        "wrapped",
        "/",
        ">",
        "}"
      ],
      "docstring": "An item can contain an image.",
      "docstring_tokens": [
        "An",
        "item",
        "can",
        "contain",
        "an",
        "image",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Item/ItemImage.js#L9-L14"
    },
    "target": "An item can contain an image .",
    "arguments": [
      [
        "function ItemImage ( props ) { const { size } = props const rest = getUnhandledProps ( ItemImage , props ) return < Image { ... rest } size = { size } ui = { ! ! size } wrapped / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default ItemImage ; ```\nWe use the `getUnhandledProps` function to remove the props that are handled by the `ItemImage` component. This is because `ItemImage` is just a wrapper around the `Image` component and doesn't need to handle the props itself. We then pass the remaining props to the `Image` component, along with the `size` prop and the `ui` prop, which we use to enable the `wrapped` prop.\n### Single component\n\nIn this example, we create a single component that can be used in different contexts. We define the component in a file called `Wrapper.js`:\n```javascript\nimport { getUnhandledProps } from'react-ui'; const Wrapper = ( props ) => { const { size, ui,...rest } = props; return < Image {... rest } size = { size } ui = {!! ui } wrapped / > ; }; export default Wrapper; ```\nWe use the `getUnhandledProps` function to remove the props that are handled by the `Wrapper` component. We then pass the remaining props to the `Image` component, along with the `size` prop and the `ui` prop. The `ui` prop is optional, so we"
      ]
    ],
    "filtered_resps": [
      " export default ItemImage ; ```\nWe use the `getUnhandledProps` function to remove the props that are handled by the `ItemImage` component. This is because `ItemImage` is just a wrapper around the `Image` component and doesn't need to handle the props itself. We then pass the remaining props to the `Image` component, along with the `size` prop and the `ui` prop, which we use to enable the `wrapped` prop.\n### Single component\n\nIn this example, we create a single component that can be used in different contexts. We define the component in a file called `Wrapper.js`:\n```javascript\nimport { getUnhandledProps } from'react-ui'; const Wrapper = ( props ) => { const { size, ui,...rest } = props; return < Image {... rest } size = { size } ui = {!! ui } wrapped / > ; }; export default Wrapper; ```\nWe use the `getUnhandledProps` function to remove the props that are handled by the `Wrapper` component. We then pass the remaining props to the `Image` component, along with the `size` prop and the `ui` prop. The `ui` prop is optional, so we"
    ],
    "smoothed_bleu_4": 0.5096150255610956
  },
  {
    "doc_id": 48,
    "doc": {
      "id": 48,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Card/CardGroup.js",
      "func_name": "CardGroup",
      "original_string": "function CardGroup(props) {\n  const {\n    centered,\n    children,\n    className,\n    content,\n    doubling,\n    items,\n    itemsPerRow,\n    stackable,\n    textAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(doubling, 'doubling'),\n    useKeyOnly(stackable, 'stackable'),\n    useTextAlignProp(textAlign),\n    useWidthProp(itemsPerRow),\n    'cards',\n    className,\n  )\n  const rest = getUnhandledProps(CardGroup, props)\n  const ElementType = getElementType(CardGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  const itemsJSX = _.map(items, (item) => {\n    const key = item.key || [item.header, item.description].join('-')\n    return <Card key={key} {...item} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {itemsJSX}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function CardGroup(props) {\n  const {\n    centered,\n    children,\n    className,\n    content,\n    doubling,\n    items,\n    itemsPerRow,\n    stackable,\n    textAlign,\n  } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(doubling, 'doubling'),\n    useKeyOnly(stackable, 'stackable'),\n    useTextAlignProp(textAlign),\n    useWidthProp(itemsPerRow),\n    'cards',\n    className,\n  )\n  const rest = getUnhandledProps(CardGroup, props)\n  const ElementType = getElementType(CardGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  const itemsJSX = _.map(items, (item) => {\n    const key = item.key || [item.header, item.description].join('-')\n    return <Card key={key} {...item} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {itemsJSX}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "CardGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "centered",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "doubling",
        ",",
        "items",
        ",",
        "itemsPerRow",
        ",",
        "stackable",
        ",",
        "textAlign",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "centered",
        ",",
        "'centered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "doubling",
        ",",
        "'doubling'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stackable",
        ",",
        "'stackable'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "itemsPerRow",
        ")",
        ",",
        "'cards'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "CardGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "CardGroup",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "itemsJSX",
        "=",
        "_",
        ".",
        "map",
        "(",
        "items",
        ",",
        "(",
        "item",
        ")",
        "=>",
        "{",
        "const",
        "key",
        "=",
        "item",
        ".",
        "key",
        "||",
        "[",
        "item",
        ".",
        "header",
        ",",
        "item",
        ".",
        "description",
        "]",
        ".",
        "join",
        "(",
        "'-'",
        ")",
        "return",
        "<",
        "Card",
        "key",
        "=",
        "{",
        "key",
        "}",
        "{",
        "...",
        "item",
        "}",
        "/",
        ">",
        "}",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "itemsJSX",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A group of cards.",
      "docstring_tokens": [
        "A",
        "group",
        "of",
        "cards",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Card/CardGroup.js#L21-L72"
    },
    "target": "A group of cards .",
    "arguments": [
      [
        "function CardGroup ( props ) { const { centered , children , className , content , doubling , items , itemsPerRow , stackable , textAlign , } = props const classes = cx ( 'ui' , useKeyOnly ( centered , 'centered' ) , useKeyOnly ( doubling , 'doubling' ) , useKeyOnly ( stackable , 'stackable' ) , useTextAlignProp ( textAlign ) , useWidthProp ( itemsPerRow ) , 'cards' , className , ) const rest = getUnhandledProps ( CardGroup , props ) const ElementType = getElementType ( CardGroup , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } const itemsJSX = _ . map ( items , ( item ) => { const key = item . key || [ item . header , item . description ] . join ( '-' ) return < Card key = { key } { ... item } / > } ) return ( < ElementType { ... rest } className = { classes } > { itemsJSX } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } const cardGroupCreator = getCardGroupCreator ( CardGroup ) export default cardGroupCreator ( CardGroup ) [/code]\nHere is the explanation of the code:\n\n*   We first import the necessary modules and functions from the Semantic UI React library.\n*   We define a `CardGroup` component that accepts various props, including `centered`, `children`, `className`, `content`, `doubling`, `items`, `itemsPerRow`, `stackable`, and `textAlign`.\n*   We use the `useKeyOnly` function to conditionally add a class to the component based on the presence of certain props.\n*   We use the `getUnhandledProps` function to get the rest of the props that are not handled by the component.\n*   We determine the `ElementType` of the component based on the `props` object.\n*   If the `children` prop is not null or undefined, we return the `children` JSX element wrapped in the `ElementType`.\n*   If the `content` prop is not null or undefined, we return the `content` JSX element wrapped in the `ElementType`.\n*   If the `items` prop is not null or undefined, we map over the `items`"
      ]
    ],
    "filtered_resps": [
      " } const cardGroupCreator = getCardGroupCreator ( CardGroup ) export default cardGroupCreator ( CardGroup ) [/code]\nHere is the explanation of the code:\n\n*   We first import the necessary modules and functions from the Semantic UI React library.\n*   We define a `CardGroup` component that accepts various props, including `centered`, `children`, `className`, `content`, `doubling`, `items`, `itemsPerRow`, `stackable`, and `textAlign`.\n*   We use the `useKeyOnly` function to conditionally add a class to the component based on the presence of certain props.\n*   We use the `getUnhandledProps` function to get the rest of the props that are not handled by the component.\n*   We determine the `ElementType` of the component based on the `props` object.\n*   If the `children` prop is not null or undefined, we return the `children` JSX element wrapped in the `ElementType`.\n*   If the `content` prop is not null or undefined, we return the `content` JSX element wrapped in the `ElementType`.\n*   If the `items` prop is not null or undefined, we map over the `items`"
    ],
    "smoothed_bleu_4": 0.5642368009095993
  },
  {
    "doc_id": 49,
    "doc": {
      "id": 49,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Table/TableRow.js",
      "func_name": "TableRow",
      "original_string": "function TableRow(props) {\n  const {\n    active,\n    cellAs,\n    cells,\n    children,\n    className,\n    disabled,\n    error,\n    negative,\n    positive,\n    textAlign,\n    verticalAlign,\n    warning,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(warning, 'warning'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    className,\n  )\n  const rest = getUnhandledProps(TableRow, props)\n  const ElementType = getElementType(TableRow, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(cells, cell => TableCell.create(cell, { defaultProps: { as: cellAs } }))}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function TableRow(props) {\n  const {\n    active,\n    cellAs,\n    cells,\n    children,\n    className,\n    disabled,\n    error,\n    negative,\n    positive,\n    textAlign,\n    verticalAlign,\n    warning,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(warning, 'warning'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    className,\n  )\n  const rest = getUnhandledProps(TableRow, props)\n  const ElementType = getElementType(TableRow, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(cells, cell => TableCell.create(cell, { defaultProps: { as: cellAs } }))}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "TableRow",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "active",
        ",",
        "cellAs",
        ",",
        "cells",
        ",",
        "children",
        ",",
        "className",
        ",",
        "disabled",
        ",",
        "error",
        ",",
        "negative",
        ",",
        "positive",
        ",",
        "textAlign",
        ",",
        "verticalAlign",
        ",",
        "warning",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "active",
        ",",
        "'active'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "error",
        ",",
        "'error'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "negative",
        ",",
        "'negative'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "positive",
        ",",
        "'positive'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "warning",
        ",",
        "'warning'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "TableRow",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "TableRow",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "_",
        ".",
        "map",
        "(",
        "cells",
        ",",
        "cell",
        "=>",
        "TableCell",
        ".",
        "create",
        "(",
        "cell",
        ",",
        "{",
        "defaultProps",
        ":",
        "{",
        "as",
        ":",
        "cellAs",
        "}",
        "}",
        ")",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A table can have rows.",
      "docstring_tokens": [
        "A",
        "table",
        "can",
        "have",
        "rows",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Table/TableRow.js#L22-L65"
    },
    "target": "A table can have rows .",
    "arguments": [
      [
        "function TableRow ( props ) { const { active , cellAs , cells , children , className , disabled , error , negative , positive , textAlign , verticalAlign , warning , } = props const classes = cx ( useKeyOnly ( active , 'active' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( error , 'error' ) , useKeyOnly ( negative , 'negative' ) , useKeyOnly ( positive , 'positive' ) , useKeyOnly ( warning , 'warning' ) , useTextAlignProp ( textAlign ) , useVerticalAlignProp ( verticalAlign ) , className , ) const rest = getUnhandledProps ( TableRow , props ) const ElementType = getElementType ( TableRow , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { _ . map ( cells , cell => TableCell . create ( cell , { defaultProps : { as : cellAs } } ) ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default TableRow ; ``` }\n```\nParses the `TableRow` component props and applies various utility functions to determine the styles and layout of the table row. The code is organized into several sections:\n1. **Props destructuring**: Extracts the relevant props from the `TableRow` component, including `active`, `cellAs`, `cells`, `children`, `className`, `disabled`, `error`, `negative`, `positive`, `textAlign`, `verticalAlign`, and `warning`.\n2. **Class name generation**: Uses utility functions (`useKeyOnly`, `useTextAlignProp`, and `useVerticalAlignProp`) to generate a class name based on the props. The class name is constructed by concatenating the props that match certain conditions (e.g., `active`, `disabled`, etc.).\n3. **Handling children**: Checks if the `children` prop is not `null` or `undefined`. If it is, the code returns a simple JSX element with the `children` prop.\n4. **Rendering table cells**: If the `cells` prop is not `null` or `undefined`, the code maps over the `cells` array and creates a `TableCell` component for each cell. The `TableCell"
      ]
    ],
    "filtered_resps": [
      " export default TableRow ; ``` }\n```\nParses the `TableRow` component props and applies various utility functions to determine the styles and layout of the table row. The code is organized into several sections:\n1. **Props destructuring**: Extracts the relevant props from the `TableRow` component, including `active`, `cellAs`, `cells`, `children`, `className`, `disabled`, `error`, `negative`, `positive`, `textAlign`, `verticalAlign`, and `warning`.\n2. **Class name generation**: Uses utility functions (`useKeyOnly`, `useTextAlignProp`, and `useVerticalAlignProp`) to generate a class name based on the props. The class name is constructed by concatenating the props that match certain conditions (e.g., `active`, `disabled`, etc.).\n3. **Handling children**: Checks if the `children` prop is not `null` or `undefined`. If it is, the code returns a simple JSX element with the `children` prop.\n4. **Rendering table cells**: If the `cells` prop is not `null` or `undefined`, the code maps over the `cells` array and creates a `TableCell` component for each cell. The `TableCell"
    ],
    "smoothed_bleu_4": 0.48340867685721445
  },
  {
    "doc_id": 50,
    "doc": {
      "id": 50,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/FeedEvent.js",
      "func_name": "FeedEvent",
      "original_string": "function FeedEvent(props) {\n  const {\n    content,\n    children,\n    className,\n    date,\n    extraImages,\n    extraText,\n    image,\n    icon,\n    meta,\n    summary,\n  } = props\n\n  const classes = cx('event', className)\n  const rest = getUnhandledProps(FeedEvent, props)\n  const ElementType = getElementType(FeedEvent, props)\n\n  const hasContentProp = content || date || extraImages || extraText || meta || summary\n  const contentProps = { content, date, extraImages, extraText, meta, summary }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedLabel, val => ({ icon: val }), icon, { autoGenerateKey: false })}\n      {createShorthand(FeedLabel, val => ({ image: val }), image, { autoGenerateKey: false })}\n      {hasContentProp && <FeedContent {...contentProps} />}\n      {children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FeedEvent(props) {\n  const {\n    content,\n    children,\n    className,\n    date,\n    extraImages,\n    extraText,\n    image,\n    icon,\n    meta,\n    summary,\n  } = props\n\n  const classes = cx('event', className)\n  const rest = getUnhandledProps(FeedEvent, props)\n  const ElementType = getElementType(FeedEvent, props)\n\n  const hasContentProp = content || date || extraImages || extraText || meta || summary\n  const contentProps = { content, date, extraImages, extraText, meta, summary }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedLabel, val => ({ icon: val }), icon, { autoGenerateKey: false })}\n      {createShorthand(FeedLabel, val => ({ image: val }), image, { autoGenerateKey: false })}\n      {hasContentProp && <FeedContent {...contentProps} />}\n      {children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FeedEvent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "content",
        ",",
        "children",
        ",",
        "className",
        ",",
        "date",
        ",",
        "extraImages",
        ",",
        "extraText",
        ",",
        "image",
        ",",
        "icon",
        ",",
        "meta",
        ",",
        "summary",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'event'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FeedEvent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FeedEvent",
        ",",
        "props",
        ")",
        "const",
        "hasContentProp",
        "=",
        "content",
        "||",
        "date",
        "||",
        "extraImages",
        "||",
        "extraText",
        "||",
        "meta",
        "||",
        "summary",
        "const",
        "contentProps",
        "=",
        "{",
        "content",
        ",",
        "date",
        ",",
        "extraImages",
        ",",
        "extraText",
        ",",
        "meta",
        ",",
        "summary",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "FeedLabel",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "icon",
        ":",
        "val",
        "}",
        ")",
        ",",
        "icon",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "FeedLabel",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "image",
        ":",
        "val",
        "}",
        ")",
        ",",
        "image",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "hasContentProp",
        "&&",
        "<",
        "FeedContent",
        "{",
        "...",
        "contentProps",
        "}",
        "/",
        ">",
        "}",
        "\n      ",
        "{",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed contains an event.",
      "docstring_tokens": [
        "A",
        "feed",
        "contains",
        "an",
        "event",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/FeedEvent.js#L12-L41"
    },
    "target": "A feed contains an event .",
    "arguments": [
      [
        "function FeedEvent ( props ) { const { content , children , className , date , extraImages , extraText , image , icon , meta , summary , } = props const classes = cx ( 'event' , className ) const rest = getUnhandledProps ( FeedEvent , props ) const ElementType = getElementType ( FeedEvent , props ) const hasContentProp = content || date || extraImages || extraText || meta || summary const contentProps = { content , date , extraImages , extraText , meta , summary } return ( < ElementType { ... rest } className = { classes } > { createShorthand ( FeedLabel , val => ( { icon : val } ) , icon , { autoGenerateKey : false } ) } { createShorthand ( FeedLabel , val => ( { image : val } ) , image , { autoGenerateKey : false } ) } { hasContentProp && < FeedContent { ... contentProps } / > } { children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }; export default FeedEvent ; ```\n\nThis code defines a `FeedEvent` component, which is a part of the `@fluentui/react-northstar` package. The component is a wrapper for other components, including `FeedLabel` and `FeedContent`. The component takes several props, including `content`, `children`, `className`, `date`, `extraImages`, `extraText`, `image`, `icon`, `meta`, and `summary`. The code uses several utility functions, including `getUnhandledProps`, `getElementType`, and `createShorthand`, to handle the props and render the component.\n\nHere's a breakdown of the code:\n\n1. The first line imports the necessary dependencies, including `cx`, `getUnhandledProps`, `getElementType`, and `createShorthand`.\n2. The second line defines the `FeedEvent` component as a function that takes `props` as an argument.\n3. The third line deconstructs the `props` object into several variables, including `content`, `children`, `className`, `date`, `extraImages`, `extraText`, `image`, `icon`, and `meta`.\n4. The fourth line defines a variable `classes` that concatenates"
      ]
    ],
    "filtered_resps": [
      " }; export default FeedEvent ; ```\n\nThis code defines a `FeedEvent` component, which is a part of the `@fluentui/react-northstar` package. The component is a wrapper for other components, including `FeedLabel` and `FeedContent`. The component takes several props, including `content`, `children`, `className`, `date`, `extraImages`, `extraText`, `image`, `icon`, `meta`, and `summary`. The code uses several utility functions, including `getUnhandledProps`, `getElementType`, and `createShorthand`, to handle the props and render the component.\n\nHere's a breakdown of the code:\n\n1. The first line imports the necessary dependencies, including `cx`, `getUnhandledProps`, `getElementType`, and `createShorthand`.\n2. The second line defines the `FeedEvent` component as a function that takes `props` as an argument.\n3. The third line deconstructs the `props` object into several variables, including `content`, `children`, `className`, `date`, `extraImages`, `extraText`, `image`, `icon`, and `meta`.\n4. The fourth line defines a variable `classes` that concatenates"
    ],
    "smoothed_bleu_4": 0.515604687231702
  },
  {
    "doc_id": 51,
    "doc": {
      "id": 51,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/modules/Tab/TabPane.js",
      "func_name": "TabPane",
      "original_string": "function TabPane(props) {\n  const { active, children, className, content, loading } = props\n\n  const classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className)\n  const rest = getUnhandledProps(TabPane, props)\n  const ElementType = getElementType(TabPane, props)\n\n  const calculatedDefaultProps = {}\n  if (ElementType === Segment) {\n    calculatedDefaultProps.attached = 'bottom'\n  }\n\n  return (\n    <ElementType {...calculatedDefaultProps} {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function TabPane(props) {\n  const { active, children, className, content, loading } = props\n\n  const classes = cx(useKeyOnly(active, 'active'), useKeyOnly(loading, 'loading'), 'tab', className)\n  const rest = getUnhandledProps(TabPane, props)\n  const ElementType = getElementType(TabPane, props)\n\n  const calculatedDefaultProps = {}\n  if (ElementType === Segment) {\n    calculatedDefaultProps.attached = 'bottom'\n  }\n\n  return (\n    <ElementType {...calculatedDefaultProps} {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "TabPane",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "active",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "loading",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "active",
        ",",
        "'active'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "loading",
        ",",
        "'loading'",
        ")",
        ",",
        "'tab'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "TabPane",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "TabPane",
        ",",
        "props",
        ")",
        "const",
        "calculatedDefaultProps",
        "=",
        "{",
        "}",
        "if",
        "(",
        "ElementType",
        "===",
        "Segment",
        ")",
        "{",
        "calculatedDefaultProps",
        ".",
        "attached",
        "=",
        "'bottom'",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "calculatedDefaultProps",
        "}",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A tab pane holds the content of a tab.",
      "docstring_tokens": [
        "A",
        "tab",
        "pane",
        "holds",
        "the",
        "content",
        "of",
        "a",
        "tab",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/modules/Tab/TabPane.js#L18-L35"
    },
    "target": "A tab pane holds the content of a tab .",
    "arguments": [
      [
        "function TabPane ( props ) { const { active , children , className , content , loading } = props const classes = cx ( useKeyOnly ( active , 'active' ) , useKeyOnly ( loading , 'loading' ) , 'tab' , className ) const rest = getUnhandledProps ( TabPane , props ) const ElementType = getElementType ( TabPane , props ) const calculatedDefaultProps = { } if ( ElementType === Segment ) { calculatedDefaultProps . attached = 'bottom' } return ( < ElementType { ... calculatedDefaultProps } { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function Content ( props ) { const { children, className, content } = props const classes = cx ( 'content', className ) return ( < div {... getUnhandledProps ( Content, props ) } className = { classes } > { content } { children } < / div > ) } function mapStateToProps ( state, ownProps ) { return { active : state. tabPane. active } } export default compose ( withTabPane ) ( connect ( mapStateToProps ) ( TabPane ) ) }\nThis implementation is a good starting point, but it still needs some improvements. For example, it doesn't handle the `selected` prop, and it doesn't provide a way to customize the rendering of the tab content.\n## Handling Selected Prop\nTo handle the `selected` prop, we need to add a conditional statement to check if the `active` state matches the `selected` prop. If they match, we can set the `active` class to the `tab` element.\nHere's an updated implementation:\n```javascript\nfunction TabPane ( props ) {... if ( props. selected ) { classes = cx ( classes, 'active' ) }... }\n```\n## Customizing Tab Content Rendering\nTo provide a way to customize"
      ]
    ],
    "filtered_resps": [
      " function Content ( props ) { const { children, className, content } = props const classes = cx ( 'content', className ) return ( < div {... getUnhandledProps ( Content, props ) } className = { classes } > { content } { children } < / div > ) } function mapStateToProps ( state, ownProps ) { return { active : state. tabPane. active } } export default compose ( withTabPane ) ( connect ( mapStateToProps ) ( TabPane ) ) }\nThis implementation is a good starting point, but it still needs some improvements. For example, it doesn't handle the `selected` prop, and it doesn't provide a way to customize the rendering of the tab content.\n## Handling Selected Prop\nTo handle the `selected` prop, we need to add a conditional statement to check if the `active` state matches the `selected` prop. If they match, we can set the `active` class to the `tab` element.\nHere's an updated implementation:\n```javascript\nfunction TabPane ( props ) {... if ( props. selected ) { classes = cx ( classes, 'active' ) }... }\n```\n## Customizing Tab Content Rendering\nTo provide a way to customize"
    ],
    "smoothed_bleu_4": 0.6693739297933659
  },
  {
    "doc_id": 52,
    "doc": {
      "id": 52,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/List/ListContent.js",
      "func_name": "ListContent",
      "original_string": "function ListContent(props) {\n  const { children, className, content, description, floated, header, verticalAlign } = props\n\n  const classes = cx(\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign),\n    'content',\n    className,\n  )\n  const rest = getUnhandledProps(ListContent, props)\n  const ElementType = getElementType(ListContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ListHeader.create(header)}\n      {ListDescription.create(description)}\n      {content}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function ListContent(props) {\n  const { children, className, content, description, floated, header, verticalAlign } = props\n\n  const classes = cx(\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign),\n    'content',\n    className,\n  )\n  const rest = getUnhandledProps(ListContent, props)\n  const ElementType = getElementType(ListContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {ListHeader.create(header)}\n      {ListDescription.create(description)}\n      {content}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "ListContent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "description",
        ",",
        "floated",
        ",",
        "header",
        ",",
        "verticalAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "'content'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ListContent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "ListContent",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "ListHeader",
        ".",
        "create",
        "(",
        "header",
        ")",
        "}",
        "\n      ",
        "{",
        "ListDescription",
        ".",
        "create",
        "(",
        "description",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A list item can contain a content.",
      "docstring_tokens": [
        "A",
        "list",
        "item",
        "can",
        "contain",
        "a",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/List/ListContent.js#L21-L48"
    },
    "target": "A list item can contain a content .",
    "arguments": [
      [
        "function ListContent ( props ) { const { children , className , content , description , floated , header , verticalAlign } = props const classes = cx ( useValueAndKey ( floated , 'floated' ) , useVerticalAlignProp ( verticalAlign ) , 'content' , className , ) const rest = getUnhandledProps ( ListContent , props ) const ElementType = getElementType ( ListContent , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { ListHeader . create ( header ) } { ListDescription . create ( description ) } { content } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ListContent. defaultProps = { floated : false } export default ListContent ; } ``` Here's a step-by-step explanation of the code:\n\n1. The first section defines the function signature, which accepts `props` as an argument.\n2. The function extracts various properties from the `props` object, including `children`, `className`, `content`, `description`, `floated`, `header`, and `verticalAlign`.\n3. The `classes` variable is assigned a value by combining the `floated` prop with the `verticalAlign` prop, and the `content` class, along with any additional classes specified in the `className` prop.\n4. The `rest` variable is assigned the remaining properties from the `props` object, excluding the ones already extracted.\n5. The `ElementType` variable is assigned the element type of the `ListContent` component, based on the `elementType` prop.\n6. The function checks if the `children` prop is not `null` or `undefined`. If it is, the function returns a JSX element with the `children` prop as its content, wrapped in the `ElementType` component with the `classes` and `rest` props.\n7. If the `children"
      ]
    ],
    "filtered_resps": [
      " ListContent. defaultProps = { floated : false } export default ListContent ; } ``` Here's a step-by-step explanation of the code:\n\n1. The first section defines the function signature, which accepts `props` as an argument.\n2. The function extracts various properties from the `props` object, including `children`, `className`, `content`, `description`, `floated`, `header`, and `verticalAlign`.\n3. The `classes` variable is assigned a value by combining the `floated` prop with the `verticalAlign` prop, and the `content` class, along with any additional classes specified in the `className` prop.\n4. The `rest` variable is assigned the remaining properties from the `props` object, excluding the ones already extracted.\n5. The `ElementType` variable is assigned the element type of the `ListContent` component, based on the `elementType` prop.\n6. The function checks if the `children` prop is not `null` or `undefined`. If it is, the function returns a JSX element with the `children` prop as its content, wrapped in the `ElementType` component with the `classes` and `rest` props.\n7. If the `children"
    ],
    "smoothed_bleu_4": 0.5540532936064686
  },
  {
    "doc_id": 53,
    "doc": {
      "id": 53,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Button/ButtonOr.js",
      "func_name": "ButtonOr",
      "original_string": "function ButtonOr(props) {\n  const { className, text } = props\n  const classes = cx('or', className)\n  const rest = getUnhandledProps(ButtonOr, props)\n  const ElementType = getElementType(ButtonOr, props)\n\n  return <ElementType {...rest} className={classes} data-text={text} />\n}",
      "language": "javascript",
      "code": "function ButtonOr(props) {\n  const { className, text } = props\n  const classes = cx('or', className)\n  const rest = getUnhandledProps(ButtonOr, props)\n  const ElementType = getElementType(ButtonOr, props)\n\n  return <ElementType {...rest} className={classes} data-text={text} />\n}",
      "code_tokens": [
        "function",
        "ButtonOr",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "text",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'or'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ButtonOr",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "ButtonOr",
        ",",
        "props",
        ")",
        "return",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "data-text",
        "=",
        "{",
        "text",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "Button groups can contain conditionals.",
      "docstring_tokens": [
        "Button",
        "groups",
        "can",
        "contain",
        "conditionals",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Button/ButtonOr.js#L10-L17"
    },
    "target": "Button groups can contain conditionals .",
    "arguments": [
      [
        "function ButtonOr ( props ) { const { className , text } = props const classes = cx ( 'or' , className ) const rest = getUnhandledProps ( ButtonOr , props ) const ElementType = getElementType ( ButtonOr , props ) return < ElementType { ... rest } className = { classes } data-text = { text } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default ButtonOr ; ``` This code assumes that the `cx` function is available, which is not shown in this snippet. The `cx` function is likely a utility function for safely concatenating class names. The `getUnhandledProps` function is also not shown, but it is likely a utility function for extracting the props that will be passed to the underlying element from the props passed to the custom component. The `getElementType` function is not shown either, but it is likely a utility function for determining the type of element to render based on the props passed to the custom component.\n\nTo make this code snippet more useful, you would need to include the definitions of the `cx` function, the `getUnhandledProps` function, and the `getElementType` function, as well as any other dependencies required by the code. You would also need to include the types for the `ButtonOr` component and its props, as well as any other types required by the code.\n\nHere is an example of how you might add types to the code:\n```typescript\nimport * as React from'react';\nimport cx from 'classnames';\n\ninterface ButtonOrProps {\n  className?: string;\n  text: string;\n}\n\ninterface ButtonOrState {\n"
      ]
    ],
    "filtered_resps": [
      " export default ButtonOr ; ``` This code assumes that the `cx` function is available, which is not shown in this snippet. The `cx` function is likely a utility function for safely concatenating class names. The `getUnhandledProps` function is also not shown, but it is likely a utility function for extracting the props that will be passed to the underlying element from the props passed to the custom component. The `getElementType` function is not shown either, but it is likely a utility function for determining the type of element to render based on the props passed to the custom component.\n\nTo make this code snippet more useful, you would need to include the definitions of the `cx` function, the `getUnhandledProps` function, and the `getElementType` function, as well as any other dependencies required by the code. You would also need to include the types for the `ButtonOr` component and its props, as well as any other types required by the code.\n\nHere is an example of how you might add types to the code:\n```typescript\nimport * as React from'react';\nimport cx from 'classnames';\n\ninterface ButtonOrProps {\n  className?: string;\n  text: string;\n}\n\ninterface ButtonOrState {\n"
    ],
    "smoothed_bleu_4": 0.41623557223911456
  },
  {
    "doc_id": 54,
    "doc": {
      "id": 54,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Table/TableCell.js",
      "func_name": "TableCell",
      "original_string": "function TableCell(props) {\n  const {\n    active,\n    children,\n    className,\n    collapsing,\n    content,\n    disabled,\n    error,\n    icon,\n    negative,\n    positive,\n    selectable,\n    singleLine,\n    textAlign,\n    verticalAlign,\n    warning,\n    width,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(active, 'active'),\n    useKeyOnly(collapsing, 'collapsing'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(selectable, 'selectable'),\n    useKeyOnly(singleLine, 'single line'),\n    useKeyOnly(warning, 'warning'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(width, 'wide'),\n    className,\n  )\n  const rest = getUnhandledProps(TableCell, props)\n  const ElementType = getElementType(TableCell, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {Icon.create(icon)}\n      {content}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function TableCell(props) {\n  const {\n    active,\n    children,\n    className,\n    collapsing,\n    content,\n    disabled,\n    error,\n    icon,\n    negative,\n    positive,\n    selectable,\n    singleLine,\n    textAlign,\n    verticalAlign,\n    warning,\n    width,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(active, 'active'),\n    useKeyOnly(collapsing, 'collapsing'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(error, 'error'),\n    useKeyOnly(negative, 'negative'),\n    useKeyOnly(positive, 'positive'),\n    useKeyOnly(selectable, 'selectable'),\n    useKeyOnly(singleLine, 'single line'),\n    useKeyOnly(warning, 'warning'),\n    useTextAlignProp(textAlign),\n    useVerticalAlignProp(verticalAlign),\n    useWidthProp(width, 'wide'),\n    className,\n  )\n  const rest = getUnhandledProps(TableCell, props)\n  const ElementType = getElementType(TableCell, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {Icon.create(icon)}\n      {content}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "TableCell",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "active",
        ",",
        "children",
        ",",
        "className",
        ",",
        "collapsing",
        ",",
        "content",
        ",",
        "disabled",
        ",",
        "error",
        ",",
        "icon",
        ",",
        "negative",
        ",",
        "positive",
        ",",
        "selectable",
        ",",
        "singleLine",
        ",",
        "textAlign",
        ",",
        "verticalAlign",
        ",",
        "warning",
        ",",
        "width",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "active",
        ",",
        "'active'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "collapsing",
        ",",
        "'collapsing'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "error",
        ",",
        "'error'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "negative",
        ",",
        "'negative'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "positive",
        ",",
        "'positive'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "selectable",
        ",",
        "'selectable'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "singleLine",
        ",",
        "'single line'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "warning",
        ",",
        "'warning'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "useWidthProp",
        "(",
        "width",
        ",",
        "'wide'",
        ")",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "TableCell",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "TableCell",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "Icon",
        ".",
        "create",
        "(",
        "icon",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A table row can have cells.",
      "docstring_tokens": [
        "A",
        "table",
        "row",
        "can",
        "have",
        "cells",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Table/TableCell.js#L23-L75"
    },
    "target": "A table row can have cells .",
    "arguments": [
      [
        "function TableCell ( props ) { const { active , children , className , collapsing , content , disabled , error , icon , negative , positive , selectable , singleLine , textAlign , verticalAlign , warning , width , } = props const classes = cx ( useKeyOnly ( active , 'active' ) , useKeyOnly ( collapsing , 'collapsing' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( error , 'error' ) , useKeyOnly ( negative , 'negative' ) , useKeyOnly ( positive , 'positive' ) , useKeyOnly ( selectable , 'selectable' ) , useKeyOnly ( singleLine , 'single line' ) , useKeyOnly ( warning , 'warning' ) , useTextAlignProp ( textAlign ) , useVerticalAlignProp ( verticalAlign ) , useWidthProp ( width , 'wide' ) , className , ) const rest = getUnhandledProps ( TableCell , props ) const ElementType = getElementType ( TableCell , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { Icon . create ( icon ) } { content } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default TableCell ; # End of \" TableCell.js \" file. # A summary of the code In this code, the TableCell component is a reusable UI component that represents a single table cell. It accepts various props, such as active, children, className, collapsing, content, disabled, error, icon, negative, positive, selectable, singleLine, textAlign, verticalAlign, warning, and width. The component uses several utility functions to handle the props and apply CSS classes based on the prop values. It also uses the cx function to combine CSS classes from the props and the className prop. The component renders an HTML element based on the ElementType prop, which is determined by the useElementType function. The content of the cell is either the children prop (if present) or an icon and content prop. The component also uses the useTextAlignProp and useVerticalAlignProp functions to apply CSS classes based on the textAlign and verticalAlign props, respectively. The useWidthProp function is used to apply a CSS class based on the width prop. The component is exported as a default export. # Note The code assumes that the utilities functions (e.g., useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp, useElementType"
      ]
    ],
    "filtered_resps": [
      " export default TableCell ; # End of \" TableCell.js \" file. # A summary of the code In this code, the TableCell component is a reusable UI component that represents a single table cell. It accepts various props, such as active, children, className, collapsing, content, disabled, error, icon, negative, positive, selectable, singleLine, textAlign, verticalAlign, warning, and width. The component uses several utility functions to handle the props and apply CSS classes based on the prop values. It also uses the cx function to combine CSS classes from the props and the className prop. The component renders an HTML element based on the ElementType prop, which is determined by the useElementType function. The content of the cell is either the children prop (if present) or an icon and content prop. The component also uses the useTextAlignProp and useVerticalAlignProp functions to apply CSS classes based on the textAlign and verticalAlign props, respectively. The useWidthProp function is used to apply a CSS class based on the width prop. The component is exported as a default export. # Note The code assumes that the utilities functions (e.g., useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp, useElementType"
    ],
    "smoothed_bleu_4": 0.5740818457379724
  },
  {
    "doc_id": 55,
    "doc": {
      "id": 55,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Breadcrumb/BreadcrumbDivider.js",
      "func_name": "BreadcrumbDivider",
      "original_string": "function BreadcrumbDivider(props) {\n  const { children, className, content, icon } = props\n\n  const classes = cx('divider', className)\n  const rest = getUnhandledProps(BreadcrumbDivider, props)\n  const ElementType = getElementType(BreadcrumbDivider, props)\n\n  if (!_.isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: { ...rest, className: classes },\n      autoGenerateKey: false,\n    })\n  }\n\n  if (!_.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? '/' : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function BreadcrumbDivider(props) {\n  const { children, className, content, icon } = props\n\n  const classes = cx('divider', className)\n  const rest = getUnhandledProps(BreadcrumbDivider, props)\n  const ElementType = getElementType(BreadcrumbDivider, props)\n\n  if (!_.isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: { ...rest, className: classes },\n      autoGenerateKey: false,\n    })\n  }\n\n  if (!_.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? '/' : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "BreadcrumbDivider",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "icon",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'divider'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "BreadcrumbDivider",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "BreadcrumbDivider",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "_",
        ".",
        "isNil",
        "(",
        "icon",
        ")",
        ")",
        "{",
        "return",
        "Icon",
        ".",
        "create",
        "(",
        "icon",
        ",",
        "{",
        "defaultProps",
        ":",
        "{",
        "...",
        "rest",
        ",",
        "className",
        ":",
        "classes",
        "}",
        ",",
        "autoGenerateKey",
        ":",
        "false",
        ",",
        "}",
        ")",
        "}",
        "if",
        "(",
        "!",
        "_",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "'/'",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A divider sub-component for Breadcrumb component.",
      "docstring_tokens": [
        "A",
        "divider",
        "sub",
        "-",
        "component",
        "for",
        "Breadcrumb",
        "component",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Breadcrumb/BreadcrumbDivider.js#L18-L45"
    },
    "target": "A divider sub - component for Breadcrumb component .",
    "arguments": [
      [
        "function BreadcrumbDivider ( props ) { const { children , className , content , icon } = props const classes = cx ( 'divider' , className ) const rest = getUnhandledProps ( BreadcrumbDivider , props ) const ElementType = getElementType ( BreadcrumbDivider , props ) if ( ! _ . isNil ( icon ) ) { return Icon . create ( icon , { defaultProps : { ... rest , className : classes } , autoGenerateKey : false , } ) } if ( ! _ . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? '/' : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " BreadcrumbDivider. displayName = 'BreadcrumbDivider' ; export default BreadcrumbDivider ; ``` \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ` react - prop - types` \u5e93\u6765\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u7ec4\u4ef6\u7684\u5c5e\u6027\u7c7b\u578b\u3002\u6211\u4eec\u4e5f\u4f7f\u7528\u4e86 ` cx` \u51fd\u6570\u6765\u5904\u7406 CSS \u7c7b\u540d\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 `getUnhandledProps` \u51fd\u6570\u6765\u83b7\u53d6\u672a\u88ab\u5904\u7406\u7684 props\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 `getElementType` \u51fd\u6570\u6765\u83b7\u53d6\u7ec4\u4ef6\u7684\u7c7b\u578b\u3002\n\n**\u8fd9\u6bb5\u4ee3\u7801\u7684\u597d\u5904\u662f\u4ec0\u4e48\uff1f**\n\n*   \u5b83\u4f7f\u7528\u4e86\u7c7b\u578b\u68c0\u67e5\u6765\u786e\u4fdd\u7ec4\u4ef6\u7684\u5c5e\u6027\u662f\u6b63\u786e\u7684\u7c7b\u578b\u3002\n*   \u5b83\u4f7f\u7528\u4e86 ` cx` \u51fd\u6570\u6765\u5904\u7406 CSS \u7c7b\u540d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728 CSS \u4e2d\u5b9a\u4e49\u6837\u5f0f\u5e76\u4e14\u5728 JSX \u4e2d\u4f7f\u7528\u6837\u5f0f\u540d\u79f0\u3002\n*   \u5b83\u4f7f\u7528\u4e86 `getUnhandledProps` \u51fd\u6570\u6765\u83b7\u53d6\u672a\u88ab\u5904\u7406\u7684 props\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u610f\u5916\u7684\u5c5e\u6027\u3002\n*   \u5b83\u4f7f\u7528\u4e86 `getElementType` \u51fd\u6570\u6765\u83b7\u53d6\u7ec4\u4ef6\u7684\u7c7b\u578b\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u7ec4\u4ef6\u7684\u7c7b\u578b\u662f\u6b63\u786e\u7684\u3002\n\n\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a\n```jsx\nimport React from'react';\nimport BreadcrumbDivider from './BreadcrumbDivider';\n\n"
      ]
    ],
    "filtered_resps": [
      " BreadcrumbDivider. displayName = 'BreadcrumbDivider' ; export default BreadcrumbDivider ; ``` \u5728\u8fd9\u4e2a\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 ` react - prop - types` \u5e93\u6765\u8fdb\u884c\u7c7b\u578b\u68c0\u67e5\uff0c\u5e76\u4e14\u5b9a\u4e49\u4e86\u7ec4\u4ef6\u7684\u5c5e\u6027\u7c7b\u578b\u3002\u6211\u4eec\u4e5f\u4f7f\u7528\u4e86 ` cx` \u51fd\u6570\u6765\u5904\u7406 CSS \u7c7b\u540d\u3002\u540c\u65f6\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 `getUnhandledProps` \u51fd\u6570\u6765\u83b7\u53d6\u672a\u88ab\u5904\u7406\u7684 props\u3002\u6700\u540e\uff0c\u6211\u4eec\u4f7f\u7528\u4e86 `getElementType` \u51fd\u6570\u6765\u83b7\u53d6\u7ec4\u4ef6\u7684\u7c7b\u578b\u3002\n\n**\u8fd9\u6bb5\u4ee3\u7801\u7684\u597d\u5904\u662f\u4ec0\u4e48\uff1f**\n\n*   \u5b83\u4f7f\u7528\u4e86\u7c7b\u578b\u68c0\u67e5\u6765\u786e\u4fdd\u7ec4\u4ef6\u7684\u5c5e\u6027\u662f\u6b63\u786e\u7684\u7c7b\u578b\u3002\n*   \u5b83\u4f7f\u7528\u4e86 ` cx` \u51fd\u6570\u6765\u5904\u7406 CSS \u7c7b\u540d\uff0c\u8fd9\u6837\u53ef\u4ee5\u5728 CSS \u4e2d\u5b9a\u4e49\u6837\u5f0f\u5e76\u4e14\u5728 JSX \u4e2d\u4f7f\u7528\u6837\u5f0f\u540d\u79f0\u3002\n*   \u5b83\u4f7f\u7528\u4e86 `getUnhandledProps` \u51fd\u6570\u6765\u83b7\u53d6\u672a\u88ab\u5904\u7406\u7684 props\uff0c\u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u610f\u5916\u7684\u5c5e\u6027\u3002\n*   \u5b83\u4f7f\u7528\u4e86 `getElementType` \u51fd\u6570\u6765\u83b7\u53d6\u7ec4\u4ef6\u7684\u7c7b\u578b\uff0c\u8fd9\u6837\u53ef\u4ee5\u4fdd\u8bc1\u7ec4\u4ef6\u7684\u7c7b\u578b\u662f\u6b63\u786e\u7684\u3002\n\n\u8fd9\u4e2a\u7ec4\u4ef6\u7684\u4f7f\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a\n```jsx\nimport React from'react';\nimport BreadcrumbDivider from './BreadcrumbDivider';\n\n"
    ],
    "smoothed_bleu_4": 1.005696759929621
  },
  {
    "doc_id": 56,
    "doc": {
      "id": 56,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Message/MessageList.js",
      "func_name": "MessageList",
      "original_string": "function MessageList(props) {\n  const { children, className, items } = props\n  const classes = cx('list', className)\n  const rest = getUnhandledProps(MessageList, props)\n  const ElementType = getElementType(MessageList, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? _.map(items, MessageItem.create) : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function MessageList(props) {\n  const { children, className, items } = props\n  const classes = cx('list', className)\n  const rest = getUnhandledProps(MessageList, props)\n  const ElementType = getElementType(MessageList, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? _.map(items, MessageItem.create) : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "MessageList",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "items",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'list'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "MessageList",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "MessageList",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "_",
        ".",
        "map",
        "(",
        "items",
        ",",
        "MessageItem",
        ".",
        "create",
        ")",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A message can contain a list of items.",
      "docstring_tokens": [
        "A",
        "message",
        "can",
        "contain",
        "a",
        "list",
        "of",
        "items",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Message/MessageList.js#L18-L29"
    },
    "target": "A message can contain a list of items .",
    "arguments": [
      [
        "function MessageList ( props ) { const { children , className , items } = props const classes = cx ( 'list' , className ) const rest = getUnhandledProps ( MessageList , props ) const ElementType = getElementType ( MessageList , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? _ . map ( items , MessageItem . create ) : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default MessageList ; ``` Here is the updated code based on your feedback. I've also added a `rest` variable to hold any additional props that are not explicitly handled by the component. The `MessageList` component is now correctly rendering a list of `MessageItem` components. Let me know if you have any further feedback or questions! \n\nI've made some changes to the code to better match the specification:\n\n```jsx\nimport _ from 'lodash';\nimport cx from 'classnames';\nimport React from'react';\nimport MessageItem from './MessageItem';\nimport messageListClasses from './MessageList.css';\nimport { configureElementDefaults, getElementType, getUnhandledProps } from './helpers';\n\nconst MessageList = (props) => {\n  const { children, className, items } = props;\n  const classes = cx('list', className);\n  const rest = getUnhandledProps(MessageList, props);\n  const ElementType = getElementType(MessageList, props);\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children? children : _?.map(items, MessageItem.create)}\n    </ElementType>\n  );\n};\n\nMessageList.create = (accessor, providedProps) => {\n  const props = _?.assign"
      ]
    ],
    "filtered_resps": [
      " export default MessageList ; ``` Here is the updated code based on your feedback. I've also added a `rest` variable to hold any additional props that are not explicitly handled by the component. The `MessageList` component is now correctly rendering a list of `MessageItem` components. Let me know if you have any further feedback or questions! \n\nI've made some changes to the code to better match the specification:\n\n```jsx\nimport _ from 'lodash';\nimport cx from 'classnames';\nimport React from'react';\nimport MessageItem from './MessageItem';\nimport messageListClasses from './MessageList.css';\nimport { configureElementDefaults, getElementType, getUnhandledProps } from './helpers';\n\nconst MessageList = (props) => {\n  const { children, className, items } = props;\n  const classes = cx('list', className);\n  const rest = getUnhandledProps(MessageList, props);\n  const ElementType = getElementType(MessageList, props);\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {children? children : _?.map(items, MessageItem.create)}\n    </ElementType>\n  );\n};\n\nMessageList.create = (accessor, providedProps) => {\n  const props = _?.assign"
    ],
    "smoothed_bleu_4": 0.9559034456982495
  },
  {
    "doc_id": 57,
    "doc": {
      "id": 57,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Table/TableFooter.js",
      "func_name": "TableFooter",
      "original_string": "function TableFooter(props) {\n  const { as } = props\n  const rest = getUnhandledProps(TableFooter, props)\n\n  return <TableHeader {...rest} as={as} />\n}",
      "language": "javascript",
      "code": "function TableFooter(props) {\n  const { as } = props\n  const rest = getUnhandledProps(TableFooter, props)\n\n  return <TableHeader {...rest} as={as} />\n}",
      "code_tokens": [
        "function",
        "TableFooter",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "as",
        "}",
        "=",
        "props",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "TableFooter",
        ",",
        "props",
        ")",
        "return",
        "<",
        "TableHeader",
        "{",
        "...",
        "rest",
        "}",
        "as",
        "=",
        "{",
        "as",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A table can have a footer.",
      "docstring_tokens": [
        "A",
        "table",
        "can",
        "have",
        "a",
        "footer",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Table/TableFooter.js#L9-L14"
    },
    "target": "A table can have a footer .",
    "arguments": [
      [
        "function TableFooter ( props ) { const { as } = props const rest = getUnhandledProps ( TableFooter , props ) return < TableHeader { ... rest } as = { as } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " This will render the TableFooter as a TableHeader component, and then pass any remaining props to the TableHeader component using the rest operator.\n\nYou can also use a combination of the above approaches to render the TableFooter component as a specific Table component. For example:\n\n```jsx\nconst TableFooter = (props) => {\n  const { as } = props;\n  const rest = getUnhandledProps(TableFooter, props);\n\n  switch (as) {\n    case 'TableHeader':\n      return <TableHeader {...rest} as={as} />;\n    case 'TableFooter':\n      return <TableFooter {...rest} as={as} />;\n    default:\n      return <Table {...rest} as={as} />;\n  }\n};\n```\n\nThis will render the TableFooter component as either a TableHeader or TableFooter component, depending on the value of the `as` prop. If the `as` prop is not 'TableHeader' or 'TableFooter', it will render the TableFooter component as a Table component. \n\nRemember to handle the case where the `as` prop is not a valid component name. You can do this by throwing an error or returning a warning message. \n\nYou can also use the `as` prop to"
      ]
    ],
    "filtered_resps": [
      " This will render the TableFooter as a TableHeader component, and then pass any remaining props to the TableHeader component using the rest operator.\n\nYou can also use a combination of the above approaches to render the TableFooter component as a specific Table component. For example:\n\n```jsx\nconst TableFooter = (props) => {\n  const { as } = props;\n  const rest = getUnhandledProps(TableFooter, props);\n\n  switch (as) {\n    case 'TableHeader':\n      return <TableHeader {...rest} as={as} />;\n    case 'TableFooter':\n      return <TableFooter {...rest} as={as} />;\n    default:\n      return <Table {...rest} as={as} />;\n  }\n};\n```\n\nThis will render the TableFooter component as either a TableHeader or TableFooter component, depending on the value of the `as` prop. If the `as` prop is not 'TableHeader' or 'TableFooter', it will render the TableFooter component as a Table component. \n\nRemember to handle the case where the `as` prop is not a valid component name. You can do this by throwing an error or returning a warning message. \n\nYou can also use the `as` prop to"
    ],
    "smoothed_bleu_4": 0.7221480211227266
  },
  {
    "doc_id": 58,
    "doc": {
      "id": 58,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Comment/CommentGroup.js",
      "func_name": "CommentGroup",
      "original_string": "function CommentGroup(props) {\n  const { className, children, collapsed, content, minimal, size, threaded } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(collapsed, 'collapsed'),\n    useKeyOnly(minimal, 'minimal'),\n    useKeyOnly(threaded, 'threaded'),\n    'comments',\n    className,\n  )\n  const rest = getUnhandledProps(CommentGroup, props)\n  const ElementType = getElementType(CommentGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function CommentGroup(props) {\n  const { className, children, collapsed, content, minimal, size, threaded } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(collapsed, 'collapsed'),\n    useKeyOnly(minimal, 'minimal'),\n    useKeyOnly(threaded, 'threaded'),\n    'comments',\n    className,\n  )\n  const rest = getUnhandledProps(CommentGroup, props)\n  const ElementType = getElementType(CommentGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "CommentGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "children",
        ",",
        "collapsed",
        ",",
        "content",
        ",",
        "minimal",
        ",",
        "size",
        ",",
        "threaded",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "collapsed",
        ",",
        "'collapsed'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "minimal",
        ",",
        "'minimal'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "threaded",
        ",",
        "'threaded'",
        ")",
        ",",
        "'comments'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "CommentGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "CommentGroup",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "Comments can be grouped.",
      "docstring_tokens": [
        "Comments",
        "can",
        "be",
        "grouped",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Comment/CommentGroup.js#L18-L38"
    },
    "target": "Comments can be grouped .",
    "arguments": [
      [
        "function CommentGroup ( props ) { const { className , children , collapsed , content , minimal , size , threaded } = props const classes = cx ( 'ui' , size , useKeyOnly ( collapsed , 'collapsed' ) , useKeyOnly ( minimal , 'minimal' ) , useKeyOnly ( threaded , 'threaded' ) , 'comments' , className , ) const rest = getUnhandledProps ( CommentGroup , props ) const ElementType = getElementType ( CommentGroup , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " const CommentGroupMeta = { name : 'CommentGroup', pure : true, } CommentGroup. meta = CommentGroupMeta export { CommentGroup } ``` The `CommentGroup` component is defined as a function component that takes `props` as an argument. It deconstructs the `props` object into several variables, including `className`, `children`, `collapsed`, `content`, `minimal`, `size`, and `threaded`. It then uses the `cx` function to generate a class string based on the `classes` array. The `classes` array is created by concatenating several strings using the `useKeyOnly` function. The `rest` variable is created by calling the `getUnhandledProps` function with `CommentGroup` and `props` as arguments. The `ElementType` variable is created by calling the `getElementType` function with `CommentGroup` and `props` as arguments. Finally, the component returns an `ElementType` element with the `classes` class string and the `rest` props, and children are rendered based on the `children` prop or the `content` prop if `children` is `null`. The `CommentGroup` component is also exported as the default export of"
      ]
    ],
    "filtered_resps": [
      " const CommentGroupMeta = { name : 'CommentGroup', pure : true, } CommentGroup. meta = CommentGroupMeta export { CommentGroup } ``` The `CommentGroup` component is defined as a function component that takes `props` as an argument. It deconstructs the `props` object into several variables, including `className`, `children`, `collapsed`, `content`, `minimal`, `size`, and `threaded`. It then uses the `cx` function to generate a class string based on the `classes` array. The `classes` array is created by concatenating several strings using the `useKeyOnly` function. The `rest` variable is created by calling the `getUnhandledProps` function with `CommentGroup` and `props` as arguments. The `ElementType` variable is created by calling the `getElementType` function with `CommentGroup` and `props` as arguments. Finally, the component returns an `ElementType` element with the `classes` class string and the `rest` props, and children are rendered based on the `children` prop or the `content` prop if `children` is `null`. The `CommentGroup` component is also exported as the default export of"
    ],
    "smoothed_bleu_4": 0.4179753447353795
  },
  {
    "doc_id": 59,
    "doc": {
      "id": 59,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Reveal/Reveal.js",
      "func_name": "Reveal",
      "original_string": "function Reveal(props) {\n  const { active, animated, children, className, content, disabled, instant } = props\n\n  const classes = cx(\n    'ui',\n    animated,\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(instant, 'instant'),\n    'reveal',\n    className,\n  )\n  const rest = getUnhandledProps(Reveal, props)\n  const ElementType = getElementType(Reveal, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Reveal(props) {\n  const { active, animated, children, className, content, disabled, instant } = props\n\n  const classes = cx(\n    'ui',\n    animated,\n    useKeyOnly(active, 'active'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(instant, 'instant'),\n    'reveal',\n    className,\n  )\n  const rest = getUnhandledProps(Reveal, props)\n  const ElementType = getElementType(Reveal, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Reveal",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "active",
        ",",
        "animated",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "disabled",
        ",",
        "instant",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "animated",
        ",",
        "useKeyOnly",
        "(",
        "active",
        ",",
        "'active'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "instant",
        ",",
        "'instant'",
        ")",
        ",",
        "'reveal'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Reveal",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Reveal",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A reveal displays additional content in place of previous content when activated.",
      "docstring_tokens": [
        "A",
        "reveal",
        "displays",
        "additional",
        "content",
        "in",
        "place",
        "of",
        "previous",
        "content",
        "when",
        "activated",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Reveal/Reveal.js#L17-L37"
    },
    "target": "A reveal displays additional content in place of previous content when activated .",
    "arguments": [
      [
        "function Reveal ( props ) { const { active , animated , children , className , content , disabled , instant } = props const classes = cx ( 'ui' , animated , useKeyOnly ( active , 'active' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( instant , 'instant' ) , 'reveal' , className , ) const rest = getUnhandledProps ( Reveal , props ) const ElementType = getElementType ( Reveal , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Reveal. defaultProps = { active : false, animated : false, content : null, disabled : false, instant : false, } Reveal. propTypes = { active : React. PropTypes. bool, animated : React. PropTypes. bool, children : React. PropTypes. node, className : React. PropTypes. string, content : React. PropTypes. node, disabled : React. PropTypes. bool, instant : React. PropTypes. bool, } Reveal. displayMode ='reveal' const Handle = createChainedFunction ( Animated. spring, { toValue : active? 0 : 1, duration : 300, friction : 26, useNativeDriver : true } ) const AnimatedReveal = React. forwardRef ( ( { animated, content, className, disabled, instant, style, children }, ref ) => { const [ value, setValue ] = React. useState ( 0 ) const spring = Handle ( value, { ref, animated } ) const isAnimated = animated &&! disabled return React. cloneElement ( React. Children. only ( children ), { className : cx ( className, { 'animate' : isAnimated } ) } ) } ) React. registerComponent ( 'UIRe"
      ]
    ],
    "filtered_resps": [
      " Reveal. defaultProps = { active : false, animated : false, content : null, disabled : false, instant : false, } Reveal. propTypes = { active : React. PropTypes. bool, animated : React. PropTypes. bool, children : React. PropTypes. node, className : React. PropTypes. string, content : React. PropTypes. node, disabled : React. PropTypes. bool, instant : React. PropTypes. bool, } Reveal. displayMode ='reveal' const Handle = createChainedFunction ( Animated. spring, { toValue : active? 0 : 1, duration : 300, friction : 26, useNativeDriver : true } ) const AnimatedReveal = React. forwardRef ( ( { animated, content, className, disabled, instant, style, children }, ref ) => { const [ value, setValue ] = React. useState ( 0 ) const spring = Handle ( value, { ref, animated } ) const isAnimated = animated &&! disabled return React. cloneElement ( React. Children. only ( children ), { className : cx ( className, { 'animate' : isAnimated } ) } ) } ) React. registerComponent ( 'UIRe"
    ],
    "smoothed_bleu_4": 0.6223203464369531
  },
  {
    "doc_id": 60,
    "doc": {
      "id": 60,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Segment/Segment.js",
      "func_name": "Segment",
      "original_string": "function Segment(props) {\n  const {\n    attached,\n    basic,\n    children,\n    circular,\n    className,\n    clearing,\n    color,\n    compact,\n    content,\n    disabled,\n    floated,\n    inverted,\n    loading,\n    placeholder,\n    padded,\n    piled,\n    raised,\n    secondary,\n    size,\n    stacked,\n    tertiary,\n    textAlign,\n    vertical,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(basic, 'basic'),\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(clearing, 'clearing'),\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(loading, 'loading'),\n    useKeyOnly(placeholder, 'placeholder'),\n    useKeyOnly(piled, 'piled'),\n    useKeyOnly(raised, 'raised'),\n    useKeyOnly(secondary, 'secondary'),\n    useKeyOnly(stacked, 'stacked'),\n    useKeyOnly(tertiary, 'tertiary'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useTextAlignProp(textAlign),\n    useValueAndKey(floated, 'floated'),\n    'segment',\n    className,\n  )\n  const rest = getUnhandledProps(Segment, props)\n  const ElementType = getElementType(Segment, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Segment(props) {\n  const {\n    attached,\n    basic,\n    children,\n    circular,\n    className,\n    clearing,\n    color,\n    compact,\n    content,\n    disabled,\n    floated,\n    inverted,\n    loading,\n    placeholder,\n    padded,\n    piled,\n    raised,\n    secondary,\n    size,\n    stacked,\n    tertiary,\n    textAlign,\n    vertical,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(basic, 'basic'),\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(clearing, 'clearing'),\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(loading, 'loading'),\n    useKeyOnly(placeholder, 'placeholder'),\n    useKeyOnly(piled, 'piled'),\n    useKeyOnly(raised, 'raised'),\n    useKeyOnly(secondary, 'secondary'),\n    useKeyOnly(stacked, 'stacked'),\n    useKeyOnly(tertiary, 'tertiary'),\n    useKeyOnly(vertical, 'vertical'),\n    useKeyOrValueAndKey(attached, 'attached'),\n    useKeyOrValueAndKey(padded, 'padded'),\n    useTextAlignProp(textAlign),\n    useValueAndKey(floated, 'floated'),\n    'segment',\n    className,\n  )\n  const rest = getUnhandledProps(Segment, props)\n  const ElementType = getElementType(Segment, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Segment",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "attached",
        ",",
        "basic",
        ",",
        "children",
        ",",
        "circular",
        ",",
        "className",
        ",",
        "clearing",
        ",",
        "color",
        ",",
        "compact",
        ",",
        "content",
        ",",
        "disabled",
        ",",
        "floated",
        ",",
        "inverted",
        ",",
        "loading",
        ",",
        "placeholder",
        ",",
        "padded",
        ",",
        "piled",
        ",",
        "raised",
        ",",
        "secondary",
        ",",
        "size",
        ",",
        "stacked",
        ",",
        "tertiary",
        ",",
        "textAlign",
        ",",
        "vertical",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "basic",
        ",",
        "'basic'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "circular",
        ",",
        "'circular'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "clearing",
        ",",
        "'clearing'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "compact",
        ",",
        "'compact'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "loading",
        ",",
        "'loading'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "placeholder",
        ",",
        "'placeholder'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "piled",
        ",",
        "'piled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "raised",
        ",",
        "'raised'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "secondary",
        ",",
        "'secondary'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stacked",
        ",",
        "'stacked'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "tertiary",
        ",",
        "'tertiary'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "vertical",
        ",",
        "'vertical'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "attached",
        ",",
        "'attached'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "padded",
        ",",
        "'padded'",
        ")",
        ",",
        "useTextAlignProp",
        "(",
        "textAlign",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "'segment'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Segment",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Segment",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A segment is used to create a grouping of related content.",
      "docstring_tokens": [
        "A",
        "segment",
        "is",
        "used",
        "to",
        "create",
        "a",
        "grouping",
        "of",
        "related",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Segment/Segment.js#L23-L83"
    },
    "target": "A segment is used to create a grouping of related content .",
    "arguments": [
      [
        "function Segment ( props ) { const { attached , basic , children , circular , className , clearing , color , compact , content , disabled , floated , inverted , loading , placeholder , padded , piled , raised , secondary , size , stacked , tertiary , textAlign , vertical , } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( basic , 'basic' ) , useKeyOnly ( circular , 'circular' ) , useKeyOnly ( clearing , 'clearing' ) , useKeyOnly ( compact , 'compact' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( loading , 'loading' ) , useKeyOnly ( placeholder , 'placeholder' ) , useKeyOnly ( piled , 'piled' ) , useKeyOnly ( raised , 'raised' ) , useKeyOnly ( secondary , 'secondary' ) , useKeyOnly ( stacked , 'stacked' ) , useKeyOnly ( tertiary , 'tertiary' ) , useKeyOnly ( vertical , 'vertical' ) , useKeyOrValueAndKey ( attached , 'attached' ) , useKeyOrValueAndKey ( padded , 'padded' ) , useTextAlignProp ( textAlign ) , useValueAndKey ( floated , 'floated' ) , 'segment' , className , ) const rest = getUnhandledProps ( Segment , props ) const ElementType = getElementType ( Segment , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default Segments ; ``` So there you have it! A very flexible segment component. Let's take a look at how you can use it: ``` const Wrapper = styled. div ( { marginBottom : 20 } ) ; const App = ( ) => ( < Wrapper > < Segment color = 'blue' inverted attached > Button 1 < / Segment > < Segment color ='red' inverted attached > Button 2 < / Segment > < / Wrapper > ) ; ``` In this example, we create a new `Segment` for each button. We pass in the color, inverted prop, and attached prop. That's it! We can use all the props we want to customize the segment further. Of course, you can add more props to the segment if you need to. I'll leave that as an exercise for you. Alright, let's move on to the next one! [Step 4 of 10] ``` } export default Segments ; ```\n  -   Step 5: Creating the Tab Component\n  -   Step 6: Creating the Menu Component\n  -   Step 7: Creating the Search Input Component\n  -   Step 8: Creating the Button Group Component\n  -   Step"
      ]
    ],
    "filtered_resps": [
      " export default Segments ; ``` So there you have it! A very flexible segment component. Let's take a look at how you can use it: ``` const Wrapper = styled. div ( { marginBottom : 20 } ) ; const App = ( ) => ( < Wrapper > < Segment color = 'blue' inverted attached > Button 1 < / Segment > < Segment color ='red' inverted attached > Button 2 < / Segment > < / Wrapper > ) ; ``` In this example, we create a new `Segment` for each button. We pass in the color, inverted prop, and attached prop. That's it! We can use all the props we want to customize the segment further. Of course, you can add more props to the segment if you need to. I'll leave that as an exercise for you. Alright, let's move on to the next one! [Step 4 of 10] ``` } export default Segments ; ```\n  -   Step 5: Creating the Tab Component\n  -   Step 6: Creating the Menu Component\n  -   Step 7: Creating the Search Input Component\n  -   Step 8: Creating the Button Group Component\n  -   Step"
    ],
    "smoothed_bleu_4": 0.808504932095579
  },
  {
    "doc_id": 61,
    "doc": {
      "id": 61,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Placeholder/PlaceholderLine.js",
      "func_name": "PlaceholderLine",
      "original_string": "function PlaceholderLine(props) {\n  const { className, length } = props\n  const classes = cx('line', length, className)\n  const rest = getUnhandledProps(PlaceholderLine, props)\n  const ElementType = getElementType(PlaceholderLine, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "language": "javascript",
      "code": "function PlaceholderLine(props) {\n  const { className, length } = props\n  const classes = cx('line', length, className)\n  const rest = getUnhandledProps(PlaceholderLine, props)\n  const ElementType = getElementType(PlaceholderLine, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "code_tokens": [
        "function",
        "PlaceholderLine",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "length",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'line'",
        ",",
        "length",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "PlaceholderLine",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "PlaceholderLine",
        ",",
        "props",
        ")",
        "return",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A placeholder can contain have lines of text.",
      "docstring_tokens": [
        "A",
        "placeholder",
        "can",
        "contain",
        "have",
        "lines",
        "of",
        "text",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Placeholder/PlaceholderLine.js#L10-L17"
    },
    "target": "A placeholder can contain have lines of text .",
    "arguments": [
      [
        "function PlaceholderLine ( props ) { const { className , length } = props const classes = cx ( 'line' , length , className ) const rest = getUnhandledProps ( PlaceholderLine , props ) const ElementType = getElementType ( PlaceholderLine , props ) return < ElementType { ... rest } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " PlaceholderLine. defaultProps = { ElementType : 'div' } ; PlaceholderLine. propTypes = { length : PropTypes. oneOfType ( [ PropTypes. oneOf ( [ 'large','small' ] ), PropTypes. number ] ), className : PropTypes. string } ; export default PlaceholderLine ; ``` So, in the above code, we first import the required libraries and the `classNames` utility. Then we define a React component named `PlaceholderLine` which is a simple wrapper around an `ElementType` (which is an element like a `div`, `span`, etc.) that gets passed to it through the `props`. We use the `cx` utility from `classnames` to concatenate the classes to the `classes` variable. Then we use the `getUnhandledProps` utility from `invariant` to remove the props that are not handled by the component. Then we return the `ElementType` component with the rest of the props and the `classes` as the `className`. We define the default props and propTypes for the component. So, when we use this component in our code, we can pass the `length` prop to it, which will then generate the classes based on the length. The `classNames` utility"
      ]
    ],
    "filtered_resps": [
      " PlaceholderLine. defaultProps = { ElementType : 'div' } ; PlaceholderLine. propTypes = { length : PropTypes. oneOfType ( [ PropTypes. oneOf ( [ 'large','small' ] ), PropTypes. number ] ), className : PropTypes. string } ; export default PlaceholderLine ; ``` So, in the above code, we first import the required libraries and the `classNames` utility. Then we define a React component named `PlaceholderLine` which is a simple wrapper around an `ElementType` (which is an element like a `div`, `span`, etc.) that gets passed to it through the `props`. We use the `cx` utility from `classnames` to concatenate the classes to the `classes` variable. Then we use the `getUnhandledProps` utility from `invariant` to remove the props that are not handled by the component. Then we return the `ElementType` component with the rest of the props and the `classes` as the `className`. We define the default props and propTypes for the component. So, when we use this component in our code, we can pass the `length` prop to it, which will then generate the classes based on the length. The `classNames` utility"
    ],
    "smoothed_bleu_4": 0.5719803936905852
  },
  {
    "doc_id": 62,
    "doc": {
      "id": 62,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Reveal/RevealContent.js",
      "func_name": "RevealContent",
      "original_string": "function RevealContent(props) {\n  const { children, className, content, hidden, visible } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(visible, 'visible'),\n    'content',\n    className,\n  )\n  const rest = getUnhandledProps(RevealContent, props)\n  const ElementType = getElementType(RevealContent, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function RevealContent(props) {\n  const { children, className, content, hidden, visible } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(visible, 'visible'),\n    'content',\n    className,\n  )\n  const rest = getUnhandledProps(RevealContent, props)\n  const ElementType = getElementType(RevealContent, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "RevealContent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "hidden",
        ",",
        "visible",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "hidden",
        ",",
        "'hidden'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "visible",
        ",",
        "'visible'",
        ")",
        ",",
        "'content'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "RevealContent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "RevealContent",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A content sub-component for the Reveal.",
      "docstring_tokens": [
        "A",
        "content",
        "sub",
        "-",
        "component",
        "for",
        "the",
        "Reveal",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Reveal/RevealContent.js#L16-L34"
    },
    "target": "A content sub - component for the Reveal .",
    "arguments": [
      [
        "function RevealContent ( props ) { const { children , className , content , hidden , visible } = props const classes = cx ( 'ui' , useKeyOnly ( hidden , 'hidden' ) , useKeyOnly ( visible , 'visible' ) , 'content' , className , ) const rest = getUnhandledProps ( RevealContent , props ) const ElementType = getElementType ( RevealContent , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` ``` const RevealContent = require ('react-overlays' ). RevealContent const React = require ('react' ) const content = 'You are {hidden? \"hidden\" : \"visible\"}' const RevealContentExample = ( ) => ( < RevealContent hidden visible > { content } < / RevealContent > ) ) module. exports = RevealContentExample ; ```\nRevealContentExample.js : ``` const RevealContentExample = ( ) => ( < RevealContent hidden visible > You are { hidden? \"hidden\" : \"visible\" } < / RevealContent > ) ) export default RevealContentExample ; ```\n- Based on the information in the implementation specification, a developer can write the code that implements the `RevealContent` component in JavaScript, React, and JSX. The code defines the `RevealContent` component as a function that takes `props` as an argument, destructures the `children`, `className`, `content`, `hidden`, and `visible` properties from `props`, and uses the `cx` function to combine classes for styling. The code also defines an `ElementType` variable that represents the HTML element to be used for the component, and"
      ]
    ],
    "filtered_resps": [
      " ``` ``` const RevealContent = require ('react-overlays' ). RevealContent const React = require ('react' ) const content = 'You are {hidden? \"hidden\" : \"visible\"}' const RevealContentExample = ( ) => ( < RevealContent hidden visible > { content } < / RevealContent > ) ) module. exports = RevealContentExample ; ```\nRevealContentExample.js : ``` const RevealContentExample = ( ) => ( < RevealContent hidden visible > You are { hidden? \"hidden\" : \"visible\" } < / RevealContent > ) ) export default RevealContentExample ; ```\n- Based on the information in the implementation specification, a developer can write the code that implements the `RevealContent` component in JavaScript, React, and JSX. The code defines the `RevealContent` component as a function that takes `props` as an argument, destructures the `children`, `className`, `content`, `hidden`, and `visible` properties from `props`, and uses the `cx` function to combine classes for styling. The code also defines an `ElementType` variable that represents the HTML element to be used for the component, and"
    ],
    "smoothed_bleu_4": 0.8187717872802487
  },
  {
    "doc_id": 63,
    "doc": {
      "id": 63,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/FeedLike.js",
      "func_name": "FeedLike",
      "original_string": "function FeedLike(props) {\n  const { children, className, content, icon } = props\n\n  const classes = cx('like', className)\n  const rest = getUnhandledProps(FeedLike, props)\n  const ElementType = getElementType(FeedLike, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {Icon.create(icon, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FeedLike(props) {\n  const { children, className, content, icon } = props\n\n  const classes = cx('like', className)\n  const rest = getUnhandledProps(FeedLike, props)\n  const ElementType = getElementType(FeedLike, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {Icon.create(icon, { autoGenerateKey: false })}\n      {content}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FeedLike",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "icon",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'like'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FeedLike",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FeedLike",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "Icon",
        ".",
        "create",
        "(",
        "icon",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed can contain a like element.",
      "docstring_tokens": [
        "A",
        "feed",
        "can",
        "contain",
        "a",
        "like",
        "element",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/FeedLike.js#L11-L32"
    },
    "target": "A feed can contain a like element .",
    "arguments": [
      [
        "function FeedLike ( props ) { const { children , className , content , icon } = props const classes = cx ( 'like' , className ) const rest = getUnhandledProps ( FeedLike , props ) const ElementType = getElementType ( FeedLike , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { Icon . create ( icon , { autoGenerateKey : false } ) } { content } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default FeedLike ; ``` (make sure to adjust the indentation properly)\n\nThis code defines a functional React component named `FeedLike`. It uses the `cx` function from the `classnames` library to conditionally add a `like` class to the component's class name. The `rest` variable is an object containing all the props that are not handled by the component (e.g., `onClick`, `disabled`, etc.). The `ElementType` is determined by the `getElementType` function, which returns the actual HTML element to render based on the `tagName` prop. The component then checks if the `children` prop is not nil or undefined. If it's not nil, it returns a JSX element with the children and the `like` class applied. If `children` is nil, it returns a JSX element with the `icon` and `content` props. The `Icon.create` function is used to generate the icon element. The `autoGenerateKey` prop is set to `false` to prevent the icon from generating its own key. The component is exported as the default export.\n\n### Step 3: Implement the `getUnhandledProps` function\n\n```javascript\nimport { omit } from 'lodash-es';\n\n"
      ]
    ],
    "filtered_resps": [
      " export default FeedLike ; ``` (make sure to adjust the indentation properly)\n\nThis code defines a functional React component named `FeedLike`. It uses the `cx` function from the `classnames` library to conditionally add a `like` class to the component's class name. The `rest` variable is an object containing all the props that are not handled by the component (e.g., `onClick`, `disabled`, etc.). The `ElementType` is determined by the `getElementType` function, which returns the actual HTML element to render based on the `tagName` prop. The component then checks if the `children` prop is not nil or undefined. If it's not nil, it returns a JSX element with the children and the `like` class applied. If `children` is nil, it returns a JSX element with the `icon` and `content` props. The `Icon.create` function is used to generate the icon element. The `autoGenerateKey` prop is set to `false` to prevent the icon from generating its own key. The component is exported as the default export.\n\n### Step 3: Implement the `getUnhandledProps` function\n\n```javascript\nimport { omit } from 'lodash-es';\n\n"
    ],
    "smoothed_bleu_4": 0.6939663333878769
  },
  {
    "doc_id": 64,
    "doc": {
      "id": 64,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Placeholder/Placeholder.js",
      "func_name": "Placeholder",
      "original_string": "function Placeholder(props) {\n  const { children, className, content, fluid, inverted } = props\n  const classes = cx(\n    'ui',\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(inverted, 'inverted'),\n    'placeholder',\n    className,\n  )\n  const rest = getUnhandledProps(Placeholder, props)\n  const ElementType = getElementType(Placeholder, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Placeholder(props) {\n  const { children, className, content, fluid, inverted } = props\n  const classes = cx(\n    'ui',\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(inverted, 'inverted'),\n    'placeholder',\n    className,\n  )\n  const rest = getUnhandledProps(Placeholder, props)\n  const ElementType = getElementType(Placeholder, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Placeholder",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "fluid",
        ",",
        "inverted",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "'placeholder'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Placeholder",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Placeholder",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A placeholder is used to reserve splace for content that soon will appear in a layout.",
      "docstring_tokens": [
        "A",
        "placeholder",
        "is",
        "used",
        "to",
        "reserve",
        "splace",
        "for",
        "content",
        "that",
        "soon",
        "will",
        "appear",
        "in",
        "a",
        "layout",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Placeholder/Placeholder.js#L20-L37"
    },
    "target": "A placeholder is used to reserve splace for content that soon will appear in a layout .",
    "arguments": [
      [
        "function Placeholder ( props ) { const { children , className , content , fluid , inverted } = props const classes = cx ( 'ui' , useKeyOnly ( fluid , 'fluid' ) , useKeyOnly ( inverted , 'inverted' ) , 'placeholder' , className , ) const rest = getUnhandledProps ( Placeholder , props ) const ElementType = getElementType ( Placeholder , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default Placeholder ; ``` ## Creating the Wrapper Component To wrap the placeholder component in the context of the bigger application, you'll need to create a higher-order component (HOC) or use a library that provides a wrapper for the placeholder. Let's use a simple HOC approach. ``` // src/components/Wrapper.js import Placeholder from './Placeholder' const Wrapper = ( WrappedComponent ) => { const WrapperComponent = ( { children,... props } ) => ( < div className = \" wrapper \" > < Placeholder fluid = { props. fluid } inverted = { props. inverted } > { children } < / Placeholder > < / div > ) ; return WrapperComponent ; } export default Wrapper ; ``` ## Example Usage To use the placeholder component, you can import the `Wrapper` component and wrap your component with it. ``` // src/App.js import React from'react' import Wrapper from './Wrapper' import Header from './Header' const App = () => ( < Wrapper fluid inverted > < Header > < / Header > < / Wrapper > ) ; export default App ; ``` This example assumes you have a `Header` component that you want to wrap with the placeholder. ## Explanation This code follows standard best practices for a React application. It"
      ]
    ],
    "filtered_resps": [
      " export default Placeholder ; ``` ## Creating the Wrapper Component To wrap the placeholder component in the context of the bigger application, you'll need to create a higher-order component (HOC) or use a library that provides a wrapper for the placeholder. Let's use a simple HOC approach. ``` // src/components/Wrapper.js import Placeholder from './Placeholder' const Wrapper = ( WrappedComponent ) => { const WrapperComponent = ( { children,... props } ) => ( < div className = \" wrapper \" > < Placeholder fluid = { props. fluid } inverted = { props. inverted } > { children } < / Placeholder > < / div > ) ; return WrapperComponent ; } export default Wrapper ; ``` ## Example Usage To use the placeholder component, you can import the `Wrapper` component and wrap your component with it. ``` // src/App.js import React from'react' import Wrapper from './Wrapper' import Header from './Header' const App = () => ( < Wrapper fluid inverted > < Header > < / Header > < / Wrapper > ) ; export default App ; ``` This example assumes you have a `Header` component that you want to wrap with the placeholder. ## Explanation This code follows standard best practices for a React application. It"
    ],
    "smoothed_bleu_4": 0.604420594743818
  },
  {
    "doc_id": 65,
    "doc": {
      "id": 65,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/modules/Accordion/Accordion.js",
      "func_name": "Accordion",
      "original_string": "function Accordion(props) {\n  const { className, fluid, inverted, styled } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(styled, 'styled'),\n    className,\n  )\n  const rest = getUnhandledProps(Accordion, props)\n\n  return <AccordionAccordion {...rest} className={classes} />\n}",
      "language": "javascript",
      "code": "function Accordion(props) {\n  const { className, fluid, inverted, styled } = props\n\n  const classes = cx(\n    'ui',\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(inverted, 'inverted'),\n    useKeyOnly(styled, 'styled'),\n    className,\n  )\n  const rest = getUnhandledProps(Accordion, props)\n\n  return <AccordionAccordion {...rest} className={classes} />\n}",
      "code_tokens": [
        "function",
        "Accordion",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "fluid",
        ",",
        "inverted",
        ",",
        "styled",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "styled",
        ",",
        "'styled'",
        ")",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Accordion",
        ",",
        "props",
        ")",
        "return",
        "<",
        "AccordionAccordion",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "An accordion allows users to toggle the display of sections of content.",
      "docstring_tokens": [
        "An",
        "accordion",
        "allows",
        "users",
        "to",
        "toggle",
        "the",
        "display",
        "of",
        "sections",
        "of",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/modules/Accordion/Accordion.js#L14-L27"
    },
    "target": "An accordion allows users to toggle the display of sections of content .",
    "arguments": [
      [
        "function Accordion ( props ) { const { className , fluid , inverted , styled } = props const classes = cx ( 'ui' , useKeyOnly ( fluid , 'fluid' ) , useKeyOnly ( inverted , 'inverted' ) , useKeyOnly ( styled , 'styled' ) , className , ) const rest = getUnhandledProps ( Accordion , props ) return < AccordionAccordion { ... rest } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Accordion. displayName = 'Accordion' Accordion. HandledProps = [ 'as', 'content', 'icon', 'link', 'title', 'visible' ] export default Accordion ```\n\nExplanation:\n\n*   This is a ReactJS code snippet that defines a custom `Accordion` component using the `createComponent` function from the `@theme-ui/motion` library.\n*   The `Accordion` component is a wrapper around the `AccordionAccordion` component, which is likely a third-party library or a custom component.\n*   The `Accordion` component takes several props, including `className`, `fluid`, `inverted`, and `styled`, which are used to customize the appearance and behavior of the accordion.\n*   The `cx` function is used to concatenate the classes and props to create the final class name for the accordion component.\n*   The `getUnhandledProps` function is used to exclude the handled props (`as`, `content`, `icon`, `link`, `title`, and `visible`) from the props passed to the `AccordionAccordion` component.\n*   The `useKeyOnly` function is used to determine if a prop should be used as a key or not,"
      ]
    ],
    "filtered_resps": [
      " Accordion. displayName = 'Accordion' Accordion. HandledProps = [ 'as', 'content', 'icon', 'link', 'title', 'visible' ] export default Accordion ```\n\nExplanation:\n\n*   This is a ReactJS code snippet that defines a custom `Accordion` component using the `createComponent` function from the `@theme-ui/motion` library.\n*   The `Accordion` component is a wrapper around the `AccordionAccordion` component, which is likely a third-party library or a custom component.\n*   The `Accordion` component takes several props, including `className`, `fluid`, `inverted`, and `styled`, which are used to customize the appearance and behavior of the accordion.\n*   The `cx` function is used to concatenate the classes and props to create the final class name for the accordion component.\n*   The `getUnhandledProps` function is used to exclude the handled props (`as`, `content`, `icon`, `link`, `title`, and `visible`) from the props passed to the `AccordionAccordion` component.\n*   The `useKeyOnly` function is used to determine if a prop should be used as a key or not,"
    ],
    "smoothed_bleu_4": 0.643409530401819
  },
  {
    "doc_id": 66,
    "doc": {
      "id": 66,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Placeholder/PlaceholderImage.js",
      "func_name": "PlaceholderImage",
      "original_string": "function PlaceholderImage(props) {\n  const { className, square, rectangular } = props\n  const classes = cx(\n    useKeyOnly(square, 'square'),\n    useKeyOnly(rectangular, 'rectangular'),\n    'image',\n    className,\n  )\n  const rest = getUnhandledProps(PlaceholderImage, props)\n  const ElementType = getElementType(PlaceholderImage, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "language": "javascript",
      "code": "function PlaceholderImage(props) {\n  const { className, square, rectangular } = props\n  const classes = cx(\n    useKeyOnly(square, 'square'),\n    useKeyOnly(rectangular, 'rectangular'),\n    'image',\n    className,\n  )\n  const rest = getUnhandledProps(PlaceholderImage, props)\n  const ElementType = getElementType(PlaceholderImage, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "code_tokens": [
        "function",
        "PlaceholderImage",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "square",
        ",",
        "rectangular",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "square",
        ",",
        "'square'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "rectangular",
        ",",
        "'rectangular'",
        ")",
        ",",
        "'image'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "PlaceholderImage",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "PlaceholderImage",
        ",",
        "props",
        ")",
        "return",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A placeholder can contain an image.",
      "docstring_tokens": [
        "A",
        "placeholder",
        "can",
        "contain",
        "an",
        "image",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Placeholder/PlaceholderImage.js#L10-L22"
    },
    "target": "A placeholder can contain an image .",
    "arguments": [
      [
        "function PlaceholderImage ( props ) { const { className , square , rectangular } = props const classes = cx ( useKeyOnly ( square , 'square' ) , useKeyOnly ( rectangular , 'rectangular' ) , 'image' , className , ) const rest = getUnhandledProps ( PlaceholderImage , props ) const ElementType = getElementType ( PlaceholderImage , props ) return < ElementType { ... rest } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " PlaceholderImage. displayName = 'PlaceholderImage' export default PlaceholderImage } [/code]\n\n**Usage**\n\nYou can use the `PlaceholderImage` component like any other React component. Here's an example:\n```jsx\nimport React from'react';\nimport PlaceholderImage from './PlaceholderImage';\n\nconst App = () => {\n  return (\n    <div>\n      <PlaceholderImage className=\"my-image\" square />\n      <PlaceholderImage className=\"my-image\" rectangular />\n    </div>\n  );\n};\n```\n**Notes**\n\n* The `PlaceholderImage` component uses the `cx` function to conditionally add CSS classes based on the `square` and `rectangular` props.\n* The `getUnhandledProps` function is used to get the unhandled props from the `PlaceholderImage` component, which are then spread onto the `ElementType` component.\n* The `getElementType` function is used to get the correct element type (e.g. `div`, `img`, etc.) based on the props.\n* The `useKeyOnly` function is used to conditionally add CSS classes based on the `square` and `rectangular` props.\n\nI hope this helps! Let me know if you have any questions or need further clarification."
      ]
    ],
    "filtered_resps": [
      " PlaceholderImage. displayName = 'PlaceholderImage' export default PlaceholderImage } [/code]\n\n**Usage**\n\nYou can use the `PlaceholderImage` component like any other React component. Here's an example:\n```jsx\nimport React from'react';\nimport PlaceholderImage from './PlaceholderImage';\n\nconst App = () => {\n  return (\n    <div>\n      <PlaceholderImage className=\"my-image\" square />\n      <PlaceholderImage className=\"my-image\" rectangular />\n    </div>\n  );\n};\n```\n**Notes**\n\n* The `PlaceholderImage` component uses the `cx` function to conditionally add CSS classes based on the `square` and `rectangular` props.\n* The `getUnhandledProps` function is used to get the unhandled props from the `PlaceholderImage` component, which are then spread onto the `ElementType` component.\n* The `getElementType` function is used to get the correct element type (e.g. `div`, `img`, etc.) based on the props.\n* The `useKeyOnly` function is used to conditionally add CSS classes based on the `square` and `rectangular` props.\n\nI hope this helps! Let me know if you have any questions or need further clarification."
    ],
    "smoothed_bleu_4": 0.5651234100161556
  },
  {
    "doc_id": 67,
    "doc": {
      "id": 67,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/modules/Dropdown/DropdownMenu.js",
      "func_name": "DropdownMenu",
      "original_string": "function DropdownMenu(props) {\n  const { children, className, content, direction, open, scrolling } = props\n  const classes = cx(\n    direction,\n    useKeyOnly(open, 'visible'),\n    useKeyOnly(scrolling, 'scrolling'),\n    'menu transition',\n    className,\n  )\n  const rest = getUnhandledProps(DropdownMenu, props)\n  const ElementType = getElementType(DropdownMenu, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function DropdownMenu(props) {\n  const { children, className, content, direction, open, scrolling } = props\n  const classes = cx(\n    direction,\n    useKeyOnly(open, 'visible'),\n    useKeyOnly(scrolling, 'scrolling'),\n    'menu transition',\n    className,\n  )\n  const rest = getUnhandledProps(DropdownMenu, props)\n  const ElementType = getElementType(DropdownMenu, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "DropdownMenu",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "direction",
        ",",
        "open",
        ",",
        "scrolling",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "direction",
        ",",
        "useKeyOnly",
        "(",
        "open",
        ",",
        "'visible'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "scrolling",
        ",",
        "'scrolling'",
        ")",
        ",",
        "'menu transition'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "DropdownMenu",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "DropdownMenu",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A dropdown menu can contain a menu.",
      "docstring_tokens": [
        "A",
        "dropdown",
        "menu",
        "can",
        "contain",
        "a",
        "menu",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/modules/Dropdown/DropdownMenu.js#L16-L33"
    },
    "target": "A dropdown menu can contain a menu .",
    "arguments": [
      [
        "function DropdownMenu ( props ) { const { children , className , content , direction , open , scrolling } = props const classes = cx ( direction , useKeyOnly ( open , 'visible' ) , useKeyOnly ( scrolling , 'scrolling' ) , 'menu transition' , className , ) const rest = getUnhandledProps ( DropdownMenu , props ) const ElementType = getElementType ( DropdownMenu , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default DropdownMenu; ```\n\nNote that this code assumes that the `cx` function is defined elsewhere in the codebase, and that the `useKeyOnly` function is also defined elsewhere. The `getUnhandledProps` function is also assumed to be defined elsewhere. The `childrenUtils` object is also assumed to be defined elsewhere.\n\nThis code defines a functional component named `DropdownMenu` that takes in several props, including `children`, `className`, `content`, `direction`, `open`, and `scrolling`. It uses the `getElementType` function to determine the type of element to render, and the `getUnhandledProps` function to get an object with the props that should not be passed to the element. It then uses the `cx` function to combine the classes based on the props, and renders the element with the combined classes and the `children` prop if it exists, or the `content` prop if it doesn't. \n\nThis code is written in JavaScript and uses the React library. It is designed to be used in a React application. \n\nThis code is an example of how to create a reusable UI component in React. It shows how to define a component that can be used in different contexts with"
      ]
    ],
    "filtered_resps": [
      " export default DropdownMenu; ```\n\nNote that this code assumes that the `cx` function is defined elsewhere in the codebase, and that the `useKeyOnly` function is also defined elsewhere. The `getUnhandledProps` function is also assumed to be defined elsewhere. The `childrenUtils` object is also assumed to be defined elsewhere.\n\nThis code defines a functional component named `DropdownMenu` that takes in several props, including `children`, `className`, `content`, `direction`, `open`, and `scrolling`. It uses the `getElementType` function to determine the type of element to render, and the `getUnhandledProps` function to get an object with the props that should not be passed to the element. It then uses the `cx` function to combine the classes based on the props, and renders the element with the combined classes and the `children` prop if it exists, or the `content` prop if it doesn't. \n\nThis code is written in JavaScript and uses the React library. It is designed to be used in a React application. \n\nThis code is an example of how to create a reusable UI component in React. It shows how to define a component that can be used in different contexts with"
    ],
    "smoothed_bleu_4": 0.5813861408127526
  },
  {
    "doc_id": 68,
    "doc": {
      "id": 68,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/List/ListIcon.js",
      "func_name": "ListIcon",
      "original_string": "function ListIcon(props) {\n  const { className, verticalAlign } = props\n  const classes = cx(useVerticalAlignProp(verticalAlign), className)\n  const rest = getUnhandledProps(ListIcon, props)\n\n  return <Icon {...rest} className={classes} />\n}",
      "language": "javascript",
      "code": "function ListIcon(props) {\n  const { className, verticalAlign } = props\n  const classes = cx(useVerticalAlignProp(verticalAlign), className)\n  const rest = getUnhandledProps(ListIcon, props)\n\n  return <Icon {...rest} className={classes} />\n}",
      "code_tokens": [
        "function",
        "ListIcon",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        ",",
        "verticalAlign",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ")",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "ListIcon",
        ",",
        "props",
        ")",
        "return",
        "<",
        "Icon",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A list item can contain an icon.",
      "docstring_tokens": [
        "A",
        "list",
        "item",
        "can",
        "contain",
        "an",
        "icon",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/List/ListIcon.js#L11-L17"
    },
    "target": "A list item can contain an icon .",
    "arguments": [
      [
        "function ListIcon ( props ) { const { className , verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ) , className ) const rest = getUnhandledProps ( ListIcon , props ) return < Icon { ... rest } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default ListIcon ; ``` Here is the code from the file `InlineErrorIcon.js`: ``` js // InlineErrorIcon.js import cx from 'classnames' ; import { useVerticalAlignProp } from 'classnames/ utilities'; import { getUnhandledProps } from'react-wind/ utilities'; import Icon from './Icon' ; const ListIcon = ( props ) => { const { className, verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ), className ) const rest = getUnhandledProps ( ListIcon, props ) return < Icon {... rest } className = { classes } / > } export default ListIcon ; ``` Here is the code from the file `PointerIcon.js`: ``` js // PointerIcon.js import cx from 'classnames' ; import { useVerticalAlignProp } from 'classnames/ utilities'; import { getUnhandledProps } from'react-wind/ utilities'; import Icon from './Icon' ; const PointerIcon = ( props ) => { const { className, verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ), className ) const rest = getUnhandledProps ( PointerIcon, props ) return < Icon {... rest }"
      ]
    ],
    "filtered_resps": [
      " export default ListIcon ; ``` Here is the code from the file `InlineErrorIcon.js`: ``` js // InlineErrorIcon.js import cx from 'classnames' ; import { useVerticalAlignProp } from 'classnames/ utilities'; import { getUnhandledProps } from'react-wind/ utilities'; import Icon from './Icon' ; const ListIcon = ( props ) => { const { className, verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ), className ) const rest = getUnhandledProps ( ListIcon, props ) return < Icon {... rest } className = { classes } / > } export default ListIcon ; ``` Here is the code from the file `PointerIcon.js`: ``` js // PointerIcon.js import cx from 'classnames' ; import { useVerticalAlignProp } from 'classnames/ utilities'; import { getUnhandledProps } from'react-wind/ utilities'; import Icon from './Icon' ; const PointerIcon = ( props ) => { const { className, verticalAlign } = props const classes = cx ( useVerticalAlignProp ( verticalAlign ), className ) const rest = getUnhandledProps ( PointerIcon, props ) return < Icon {... rest }"
    ],
    "smoothed_bleu_4": 0.4970592538550282
  },
  {
    "doc_id": 69,
    "doc": {
      "id": 69,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Advertisement/Advertisement.js",
      "func_name": "Advertisement",
      "original_string": "function Advertisement(props) {\n  const { centered, children, className, content, test, unit } = props\n\n  const classes = cx(\n    'ui',\n    unit,\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(test, 'test'),\n    'ad',\n    className,\n  )\n  const rest = getUnhandledProps(Advertisement, props)\n  const ElementType = getElementType(Advertisement, props)\n\n  return (\n    <ElementType {...rest} className={classes} data-text={test}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Advertisement(props) {\n  const { centered, children, className, content, test, unit } = props\n\n  const classes = cx(\n    'ui',\n    unit,\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(test, 'test'),\n    'ad',\n    className,\n  )\n  const rest = getUnhandledProps(Advertisement, props)\n  const ElementType = getElementType(Advertisement, props)\n\n  return (\n    <ElementType {...rest} className={classes} data-text={test}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Advertisement",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "centered",
        ",",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "test",
        ",",
        "unit",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "unit",
        ",",
        "useKeyOnly",
        "(",
        "centered",
        ",",
        "'centered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "test",
        ",",
        "'test'",
        ")",
        ",",
        "'ad'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Advertisement",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Advertisement",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "data-text",
        "=",
        "{",
        "test",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "An ad displays third-party promotional content.",
      "docstring_tokens": [
        "An",
        "ad",
        "displays",
        "third",
        "-",
        "party",
        "promotional",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Advertisement/Advertisement.js#L16-L35"
    },
    "target": "An ad displays third - party promotional content .",
    "arguments": [
      [
        "function Advertisement ( props ) { const { centered , children , className , content , test , unit } = props const classes = cx ( 'ui' , unit , useKeyOnly ( centered , 'centered' ) , useKeyOnly ( test , 'test' ) , 'ad' , className , ) const rest = getUnhandledProps ( Advertisement , props ) const ElementType = getElementType ( Advertisement , props ) return ( < ElementType { ... rest } className = { classes } data-text = { test } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Advertisement.propTypes = { centered : bool, children : node, className : string, content : node, test : string, unit : oneOf ( [ 'desktop','mobile' ] ), } Advertisement.defaultProps = { centered : false, unit : 'desktop', } Advertisement.displayName = 'Advertisement'\n\nAdvertisement\n```\n\n### Style Context API (Class Components)\n\nTo use the `Advertisement` component with the Style Context API, we need to create a context for the theme and wrap the component with a provider.\n\n```jsx\n// styles.js\nimport { create } from'react-context-api';\n\nconst ThemeContext = create('ThemeContext');\n\nconst theme = {\n  // Add your theme styles here\n};\n\nconst themeProvider = ({ children }) => (\n  <ThemeContext.Provider value={theme}>\n    {children}\n  </ThemeContext.Provider>\n);\n\nexport default themeProvider;\n```\n\n```jsx\n// Advertisement.js\nimport React from'react';\nimport { useTheme } from'react-context-api';\nimport { cx } from 'emotion';\nimport getUnhandledProps from './getUnhandledProps';\nimport getElementType from './getElementType';\nimport useKeyOnly from './useKeyOnly';\n\nconst Advertisement = (props) => {\n  const theme"
      ]
    ],
    "filtered_resps": [
      " Advertisement.propTypes = { centered : bool, children : node, className : string, content : node, test : string, unit : oneOf ( [ 'desktop','mobile' ] ), } Advertisement.defaultProps = { centered : false, unit : 'desktop', } Advertisement.displayName = 'Advertisement'\n\nAdvertisement\n```\n\n### Style Context API (Class Components)\n\nTo use the `Advertisement` component with the Style Context API, we need to create a context for the theme and wrap the component with a provider.\n\n```jsx\n// styles.js\nimport { create } from'react-context-api';\n\nconst ThemeContext = create('ThemeContext');\n\nconst theme = {\n  // Add your theme styles here\n};\n\nconst themeProvider = ({ children }) => (\n  <ThemeContext.Provider value={theme}>\n    {children}\n  </ThemeContext.Provider>\n);\n\nexport default themeProvider;\n```\n\n```jsx\n// Advertisement.js\nimport React from'react';\nimport { useTheme } from'react-context-api';\nimport { cx } from 'emotion';\nimport getUnhandledProps from './getUnhandledProps';\nimport getElementType from './getElementType';\nimport useKeyOnly from './useKeyOnly';\n\nconst Advertisement = (props) => {\n  const theme"
    ],
    "smoothed_bleu_4": 0.49245289190665287
  },
  {
    "doc_id": 70,
    "doc": {
      "id": 70,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Statistic/StatisticGroup.js",
      "func_name": "StatisticGroup",
      "original_string": "function StatisticGroup(props) {\n  const { children, className, color, content, horizontal, inverted, items, size, widths } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    useWidthProp(widths),\n    'statistics',\n    className,\n  )\n  const rest = getUnhandledProps(StatisticGroup, props)\n  const ElementType = getElementType(StatisticGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(items, item => Statistic.create(item))}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function StatisticGroup(props) {\n  const { children, className, color, content, horizontal, inverted, items, size, widths } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    useWidthProp(widths),\n    'statistics',\n    className,\n  )\n  const rest = getUnhandledProps(StatisticGroup, props)\n  const ElementType = getElementType(StatisticGroup, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {_.map(items, item => Statistic.create(item))}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "StatisticGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "color",
        ",",
        "content",
        ",",
        "horizontal",
        ",",
        "inverted",
        ",",
        "items",
        ",",
        "size",
        ",",
        "widths",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "horizontal",
        ",",
        "'horizontal'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "useWidthProp",
        "(",
        "widths",
        ")",
        ",",
        "'statistics'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "StatisticGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "StatisticGroup",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "_",
        ".",
        "map",
        "(",
        "items",
        ",",
        "item",
        "=>",
        "Statistic",
        ".",
        "create",
        "(",
        "item",
        ")",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A group of statistics.",
      "docstring_tokens": [
        "A",
        "group",
        "of",
        "statistics",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Statistic/StatisticGroup.js#L20-L56"
    },
    "target": "A group of statistics .",
    "arguments": [
      [
        "function StatisticGroup ( props ) { const { children , className , color , content , horizontal , inverted , items , size , widths } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( horizontal , 'horizontal' ) , useKeyOnly ( inverted , 'inverted' ) , useWidthProp ( widths ) , 'statistics' , className , ) const rest = getUnhandledProps ( StatisticGroup , props ) const ElementType = getElementType ( StatisticGroup , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { _ . map ( items , item => Statistic . create ( item ) ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " StatisticGroup. defaultProps = { children : undefined, color : 'blue', content : undefined, horizontal : false, inverted : false, items : [ ], size :'small', widths : 'equal', } StatisticGroup. propTypes = { children : React. propTypes. oneOfType ( [ React. propTypes. node, React. propTypes. string ] ), className : React. propTypes. string, color : React. propTypes. oneOf ( [ 'blue', 'green', 'orange','red', 'teal', 'violet', 'yellow' ] ), content : React. propTypes. oneOfType ( [ React. propTypes. node, React. propTypes. string ] ), horizontal : React. propTypes. bool, inverted : React. propTypes. bool, items : React. propTypes. arrayOf ( React. propTypes. shape ( Statistic. propTypes ) ), size : React. propTypes. oneOf ( ['mini','small','medium', 'large' ] ), widths : React. propTypes. oneOf ( [ 'equal','seven' ] ), } module. exports = StatisticGroup } on line 96"
      ]
    ],
    "filtered_resps": [
      " StatisticGroup. defaultProps = { children : undefined, color : 'blue', content : undefined, horizontal : false, inverted : false, items : [ ], size :'small', widths : 'equal', } StatisticGroup. propTypes = { children : React. propTypes. oneOfType ( [ React. propTypes. node, React. propTypes. string ] ), className : React. propTypes. string, color : React. propTypes. oneOf ( [ 'blue', 'green', 'orange','red', 'teal', 'violet', 'yellow' ] ), content : React. propTypes. oneOfType ( [ React. propTypes. node, React. propTypes. string ] ), horizontal : React. propTypes. bool, inverted : React. propTypes. bool, items : React. propTypes. arrayOf ( React. propTypes. shape ( Statistic. propTypes ) ), size : React. propTypes. oneOf ( ['mini','small','medium', 'large' ] ), widths : React. propTypes. oneOf ( [ 'equal','seven' ] ), } module. exports = StatisticGroup } on line 96"
    ],
    "smoothed_bleu_4": 0.4268970210609474
  },
  {
    "doc_id": 71,
    "doc": {
      "id": 71,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Statistic/Statistic.js",
      "func_name": "Statistic",
      "original_string": "function Statistic(props) {\n  const {\n    children,\n    className,\n    color,\n    content,\n    floated,\n    horizontal,\n    inverted,\n    label,\n    size,\n    text,\n    value,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useValueAndKey(floated, 'floated'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    'statistic',\n    className,\n  )\n  const rest = getUnhandledProps(Statistic, props)\n  const ElementType = getElementType(Statistic, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {StatisticValue.create(value, {\n        defaultProps: { text },\n        autoGenerateKey: false,\n      })}\n      {StatisticLabel.create(label, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Statistic(props) {\n  const {\n    children,\n    className,\n    color,\n    content,\n    floated,\n    horizontal,\n    inverted,\n    label,\n    size,\n    text,\n    value,\n  } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useValueAndKey(floated, 'floated'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(inverted, 'inverted'),\n    'statistic',\n    className,\n  )\n  const rest = getUnhandledProps(Statistic, props)\n  const ElementType = getElementType(Statistic, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {StatisticValue.create(value, {\n        defaultProps: { text },\n        autoGenerateKey: false,\n      })}\n      {StatisticLabel.create(label, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Statistic",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "color",
        ",",
        "content",
        ",",
        "floated",
        ",",
        "horizontal",
        ",",
        "inverted",
        ",",
        "label",
        ",",
        "size",
        ",",
        "text",
        ",",
        "value",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "horizontal",
        ",",
        "'horizontal'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inverted",
        ",",
        "'inverted'",
        ")",
        ",",
        "'statistic'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Statistic",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Statistic",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "StatisticValue",
        ".",
        "create",
        "(",
        "value",
        ",",
        "{",
        "defaultProps",
        ":",
        "{",
        "text",
        "}",
        ",",
        "autoGenerateKey",
        ":",
        "false",
        ",",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "StatisticLabel",
        ".",
        "create",
        "(",
        "label",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A statistic emphasizes the current value of an attribute.",
      "docstring_tokens": [
        "A",
        "statistic",
        "emphasizes",
        "the",
        "current",
        "value",
        "of",
        "an",
        "attribute",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Statistic/Statistic.js#L23-L75"
    },
    "target": "A statistic emphasizes the current value of an attribute .",
    "arguments": [
      [
        "function Statistic ( props ) { const { children , className , color , content , floated , horizontal , inverted , label , size , text , value , } = props const classes = cx ( 'ui' , color , size , useValueAndKey ( floated , 'floated' ) , useKeyOnly ( horizontal , 'horizontal' ) , useKeyOnly ( inverted , 'inverted' ) , 'statistic' , className , ) const rest = getUnhandledProps ( Statistic , props ) const ElementType = getElementType ( Statistic , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { StatisticValue . create ( value , { defaultProps : { text } , autoGenerateKey : false , } ) } { StatisticLabel . create ( label , { autoGenerateKey : false } ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Statistic. displayName = 'Statistic' Statistic. _meta = { name : 'Statistic', } export default Statistic as IconProps & StatisticProps & Omit < React. ComponentProps < typeof Statistic >, 'children' > ; ``` Change the color, size, and other props to suit your needs. ``` import React from'react'; import { Statistic } from'semantic-ui-react'; function MyStatistic() { return ( <Statistic size='small'> <Statistic.Value> 20 </Statistic.Value> <Statistic.Label> Items </Statistic.Label> < /Statistic> ) ; } export default MyStatistic; ```\n\nThis is a brief example of how to use the `Statistic` component from `semantic-ui-react`. You can customize the component by changing the props, such as color, size, and other properties. \n\nRemember to import the `Statistic` component and the `Statistic` types from `semantic-ui-react` at the top of your file.\n\nLet me know if you have any questions or need further clarification! \n\n### Code Explanation\n\nThis code defines a custom `Statistic` component using the `Statitic` component from `semantic-ui-react`. \n\n1. The `Statistic` component is imported from"
      ]
    ],
    "filtered_resps": [
      " Statistic. displayName = 'Statistic' Statistic. _meta = { name : 'Statistic', } export default Statistic as IconProps & StatisticProps & Omit < React. ComponentProps < typeof Statistic >, 'children' > ; ``` Change the color, size, and other props to suit your needs. ``` import React from'react'; import { Statistic } from'semantic-ui-react'; function MyStatistic() { return ( <Statistic size='small'> <Statistic.Value> 20 </Statistic.Value> <Statistic.Label> Items </Statistic.Label> < /Statistic> ) ; } export default MyStatistic; ```\n\nThis is a brief example of how to use the `Statistic` component from `semantic-ui-react`. You can customize the component by changing the props, such as color, size, and other properties. \n\nRemember to import the `Statistic` component and the `Statistic` types from `semantic-ui-react` at the top of your file.\n\nLet me know if you have any questions or need further clarification! \n\n### Code Explanation\n\nThis code defines a custom `Statistic` component using the `Statitic` component from `semantic-ui-react`. \n\n1. The `Statistic` component is imported from"
    ],
    "smoothed_bleu_4": 0.6037001323985536
  },
  {
    "doc_id": 72,
    "doc": {
      "id": 72,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Segment/SegmentGroup.js",
      "func_name": "SegmentGroup",
      "original_string": "function SegmentGroup(props) {\n  const { children, className, compact, content, horizontal, piled, raised, size, stacked } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(piled, 'piled'),\n    useKeyOnly(raised, 'raised'),\n    useKeyOnly(stacked, 'stacked'),\n    'segments',\n    className,\n  )\n  const rest = getUnhandledProps(SegmentGroup, props)\n  const ElementType = getElementType(SegmentGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function SegmentGroup(props) {\n  const { children, className, compact, content, horizontal, piled, raised, size, stacked } = props\n\n  const classes = cx(\n    'ui',\n    size,\n    useKeyOnly(compact, 'compact'),\n    useKeyOnly(horizontal, 'horizontal'),\n    useKeyOnly(piled, 'piled'),\n    useKeyOnly(raised, 'raised'),\n    useKeyOnly(stacked, 'stacked'),\n    'segments',\n    className,\n  )\n  const rest = getUnhandledProps(SegmentGroup, props)\n  const ElementType = getElementType(SegmentGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "SegmentGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "compact",
        ",",
        "content",
        ",",
        "horizontal",
        ",",
        "piled",
        ",",
        "raised",
        ",",
        "size",
        ",",
        "stacked",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "compact",
        ",",
        "'compact'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "horizontal",
        ",",
        "'horizontal'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "piled",
        ",",
        "'piled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "raised",
        ",",
        "'raised'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "stacked",
        ",",
        "'stacked'",
        ")",
        ",",
        "'segments'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "SegmentGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "SegmentGroup",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A group of segments can be formatted to appear together.",
      "docstring_tokens": [
        "A",
        "group",
        "of",
        "segments",
        "can",
        "be",
        "formatted",
        "to",
        "appear",
        "together",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Segment/SegmentGroup.js#L18-L40"
    },
    "target": "A group of segments can be formatted to appear together .",
    "arguments": [
      [
        "function SegmentGroup ( props ) { const { children , className , compact , content , horizontal , piled , raised , size , stacked } = props const classes = cx ( 'ui' , size , useKeyOnly ( compact , 'compact' ) , useKeyOnly ( horizontal , 'horizontal' ) , useKeyOnly ( piled , 'piled' ) , useKeyOnly ( raised , 'raised' ) , useKeyOnly ( stacked , 'stacked' ) , 'segments' , className , ) const rest = getUnhandledProps ( SegmentGroup , props ) const ElementType = getElementType ( SegmentGroup , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " } /* global cx: false, useKeyOnly: false, getUnhandledProps: false, getElementType: false */ export default SegmentGroup ; [/code]\nHere is a breakdown of the code:\n\n* The `SegmentGroup` component is defined as a function that takes `props` as an argument.\n* The component uses destructuring to extract various properties from the `props` object, including `children`, `className`, `compact`, `content`, `horizontal`, `piled`, `raised`, `size`, and `stacked`.\n* The component uses the `cx` function to generate a CSS class string based on the extracted properties.\n* The component uses the `useKeyOnly` function to conditionally include specific CSS classes based on the values of certain properties.\n* The component uses the `getUnhandledProps` function to extract the props that are not handled by the component.\n* The component uses the `getElementType` function to determine the HTML element type to use for the component.\n* The component returns a JSX element that includes the generated CSS class string and the extracted props. If the `children` prop is not provided, the component uses the `content` prop as a fallback.\n\nNote that the `cx` function,"
      ]
    ],
    "filtered_resps": [
      " } /* global cx: false, useKeyOnly: false, getUnhandledProps: false, getElementType: false */ export default SegmentGroup ; [/code]\nHere is a breakdown of the code:\n\n* The `SegmentGroup` component is defined as a function that takes `props` as an argument.\n* The component uses destructuring to extract various properties from the `props` object, including `children`, `className`, `compact`, `content`, `horizontal`, `piled`, `raised`, `size`, and `stacked`.\n* The component uses the `cx` function to generate a CSS class string based on the extracted properties.\n* The component uses the `useKeyOnly` function to conditionally include specific CSS classes based on the values of certain properties.\n* The component uses the `getUnhandledProps` function to extract the props that are not handled by the component.\n* The component uses the `getElementType` function to determine the HTML element type to use for the component.\n* The component returns a JSX element that includes the generated CSS class string and the extracted props. If the `children` prop is not provided, the component uses the `content` prop as a fallback.\n\nNote that the `cx` function,"
    ],
    "smoothed_bleu_4": 0.5766449149223869
  },
  {
    "doc_id": 73,
    "doc": {
      "id": 73,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/collections/Table/TableHeaderCell.js",
      "func_name": "TableHeaderCell",
      "original_string": "function TableHeaderCell(props) {\n  const { as, className, sorted } = props\n  const classes = cx(useValueAndKey(sorted, 'sorted'), className)\n  const rest = getUnhandledProps(TableHeaderCell, props)\n\n  return <TableCell {...rest} as={as} className={classes} />\n}",
      "language": "javascript",
      "code": "function TableHeaderCell(props) {\n  const { as, className, sorted } = props\n  const classes = cx(useValueAndKey(sorted, 'sorted'), className)\n  const rest = getUnhandledProps(TableHeaderCell, props)\n\n  return <TableCell {...rest} as={as} className={classes} />\n}",
      "code_tokens": [
        "function",
        "TableHeaderCell",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "as",
        ",",
        "className",
        ",",
        "sorted",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useValueAndKey",
        "(",
        "sorted",
        ",",
        "'sorted'",
        ")",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "TableHeaderCell",
        ",",
        "props",
        ")",
        "return",
        "<",
        "TableCell",
        "{",
        "...",
        "rest",
        "}",
        "as",
        "=",
        "{",
        "as",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A table can have a header cell.",
      "docstring_tokens": [
        "A",
        "table",
        "can",
        "have",
        "a",
        "header",
        "cell",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/collections/Table/TableHeaderCell.js#L11-L17"
    },
    "target": "A table can have a header cell .",
    "arguments": [
      [
        "function TableHeaderCell ( props ) { const { as , className , sorted } = props const classes = cx ( useValueAndKey ( sorted , 'sorted' ) , className ) const rest = getUnhandledProps ( TableHeaderCell , props ) return < TableCell { ... rest } as = { as } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ; export default TableHeaderCell ; ``` This implementation assumes that the `useValueAndKey` hook and the `cx` function are already implemented and exported from another module. The `getUnhandledProps` function is also assumed to be implemented and exported from another module. The `TableHeaderCell` component now takes the following props: * `as`: the component to render * `className`: the CSS class to apply to the component * `sorted`: a boolean indicating whether the column is sorted The `useValueAndKey` hook is used to determine the CSS class to apply to the component based on the `sorted` prop. The `cx` function is used to concatenate the CSS classes. The `getUnhandledProps` function is used to extract the props that should be passed to the underlying `TableCell` component. Finally, the `TableHeaderCell` component is exported as the default export of the module.\n  2. Now, let's implement the `useValueAndKey` hook. This hook will take a value and a key as arguments and return an object with two properties: `value` and `key`. The `value` property will be set to the value argument, and the `key` property will be set"
      ]
    ],
    "filtered_resps": [
      " ; export default TableHeaderCell ; ``` This implementation assumes that the `useValueAndKey` hook and the `cx` function are already implemented and exported from another module. The `getUnhandledProps` function is also assumed to be implemented and exported from another module. The `TableHeaderCell` component now takes the following props: * `as`: the component to render * `className`: the CSS class to apply to the component * `sorted`: a boolean indicating whether the column is sorted The `useValueAndKey` hook is used to determine the CSS class to apply to the component based on the `sorted` prop. The `cx` function is used to concatenate the CSS classes. The `getUnhandledProps` function is used to extract the props that should be passed to the underlying `TableCell` component. Finally, the `TableHeaderCell` component is exported as the default export of the module.\n  2. Now, let's implement the `useValueAndKey` hook. This hook will take a value and a key as arguments and return an object with two properties: `value` and `key`. The `value` property will be set to the value argument, and the `key` property will be set"
    ],
    "smoothed_bleu_4": 0.5594398287293577
  },
  {
    "doc_id": 74,
    "doc": {
      "id": 74,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/Feed.js",
      "func_name": "Feed",
      "original_string": "function Feed(props) {\n  const { children, className, events, size } = props\n\n  const classes = cx('ui', size, 'feed', className)\n  const rest = getUnhandledProps(Feed, props)\n  const ElementType = getElementType(Feed, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const eventElements = _.map(events, (eventProps) => {\n    const { childKey, date, meta, summary, ...eventData } = eventProps\n    const finalKey = childKey || [date, meta, summary].join('-')\n\n    return <FeedEvent date={date} key={finalKey} meta={meta} summary={summary} {...eventData} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {eventElements}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Feed(props) {\n  const { children, className, events, size } = props\n\n  const classes = cx('ui', size, 'feed', className)\n  const rest = getUnhandledProps(Feed, props)\n  const ElementType = getElementType(Feed, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  const eventElements = _.map(events, (eventProps) => {\n    const { childKey, date, meta, summary, ...eventData } = eventProps\n    const finalKey = childKey || [date, meta, summary].join('-')\n\n    return <FeedEvent date={date} key={finalKey} meta={meta} summary={summary} {...eventData} />\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {eventElements}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Feed",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "events",
        ",",
        "size",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "size",
        ",",
        "'feed'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Feed",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Feed",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "const",
        "eventElements",
        "=",
        "_",
        ".",
        "map",
        "(",
        "events",
        ",",
        "(",
        "eventProps",
        ")",
        "=>",
        "{",
        "const",
        "{",
        "childKey",
        ",",
        "date",
        ",",
        "meta",
        ",",
        "summary",
        ",",
        "...",
        "eventData",
        "}",
        "=",
        "eventProps",
        "const",
        "finalKey",
        "=",
        "childKey",
        "||",
        "[",
        "date",
        ",",
        "meta",
        ",",
        "summary",
        "]",
        ".",
        "join",
        "(",
        "'-'",
        ")",
        "return",
        "<",
        "FeedEvent",
        "date",
        "=",
        "{",
        "date",
        "}",
        "key",
        "=",
        "{",
        "finalKey",
        "}",
        "meta",
        "=",
        "{",
        "meta",
        "}",
        "summary",
        "=",
        "{",
        "summary",
        "}",
        "{",
        "...",
        "eventData",
        "}",
        "/",
        ">",
        "}",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "eventElements",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed presents user activity chronologically.",
      "docstring_tokens": [
        "A",
        "feed",
        "presents",
        "user",
        "activity",
        "chronologically",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/Feed.js#L20-L47"
    },
    "target": "A feed presents user activity chronologically .",
    "arguments": [
      [
        "function Feed ( props ) { const { children , className , events , size } = props const classes = cx ( 'ui' , size , 'feed' , className ) const rest = getUnhandledProps ( Feed , props ) const ElementType = getElementType ( Feed , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } const eventElements = _ . map ( events , ( eventProps ) => { const { childKey , date , meta , summary , ... eventData } = eventProps const finalKey = childKey || [ date , meta , summary ] . join ( '-' ) return < FeedEvent date = { date } key = { finalKey } meta = { meta } summary = { summary } { ... eventData } / > } ) return ( < ElementType { ... rest } className = { classes } > { eventElements } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }\n\n  - The code is written in JavaScript and utilizes the React library for building user interfaces.\n  - It defines a React component named `Feed` that accepts various props, including `children`, `className`, `events`, and `size`.\n  - The component uses utility functions like `cx` (for class names) and `getUnhandledProps` (to extract props not handled by the component) from a library like Enzyme.\n  - It utilizes a helper function `childrenUtils` (not shown in the code snippet) to handle the `children` prop.\n  - The component's rendering logic is conditional based on the presence of `children`. If `children` is present, it renders the children wrapped in the component's element. Otherwise, it maps over the `events` prop and renders `FeedEvent` components for each event.\n  - The `FeedEvent` component is not shown in the code snippet but is likely a separate component that represents a single event in the feed.\n  - The code uses the `cx` function to conditionally apply class names based on the presence of certain props.\n\nTo write this code based on the specification, you would need to create a React component that accepts the specified props, uses"
      ]
    ],
    "filtered_resps": [
      " }\n\n  - The code is written in JavaScript and utilizes the React library for building user interfaces.\n  - It defines a React component named `Feed` that accepts various props, including `children`, `className`, `events`, and `size`.\n  - The component uses utility functions like `cx` (for class names) and `getUnhandledProps` (to extract props not handled by the component) from a library like Enzyme.\n  - It utilizes a helper function `childrenUtils` (not shown in the code snippet) to handle the `children` prop.\n  - The component's rendering logic is conditional based on the presence of `children`. If `children` is present, it renders the children wrapped in the component's element. Otherwise, it maps over the `events` prop and renders `FeedEvent` components for each event.\n  - The `FeedEvent` component is not shown in the code snippet but is likely a separate component that represents a single event in the feed.\n  - The code uses the `cx` function to conditionally apply class names based on the presence of certain props.\n\nTo write this code based on the specification, you would need to create a React component that accepts the specified props, uses"
    ],
    "smoothed_bleu_4": 0.5862059790869557
  },
  {
    "doc_id": 75,
    "doc": {
      "id": 75,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Label/LabelGroup.js",
      "func_name": "LabelGroup",
      "original_string": "function LabelGroup(props) {\n  const { children, circular, className, color, content, size, tag } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(tag, 'tag'),\n    'labels',\n    className,\n  )\n  const rest = getUnhandledProps(LabelGroup, props)\n  const ElementType = getElementType(LabelGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function LabelGroup(props) {\n  const { children, circular, className, color, content, size, tag } = props\n\n  const classes = cx(\n    'ui',\n    color,\n    size,\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(tag, 'tag'),\n    'labels',\n    className,\n  )\n  const rest = getUnhandledProps(LabelGroup, props)\n  const ElementType = getElementType(LabelGroup, props)\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {childrenUtils.isNil(children) ? content : children}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "LabelGroup",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "circular",
        ",",
        "className",
        ",",
        "color",
        ",",
        "content",
        ",",
        "size",
        ",",
        "tag",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'ui'",
        ",",
        "color",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "circular",
        ",",
        "'circular'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "tag",
        ",",
        "'tag'",
        ")",
        ",",
        "'labels'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "LabelGroup",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "LabelGroup",
        ",",
        "props",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        "?",
        "content",
        ":",
        "children",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A label can be grouped.",
      "docstring_tokens": [
        "A",
        "label",
        "can",
        "be",
        "grouped",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Label/LabelGroup.js#L17-L37"
    },
    "target": "A label can be grouped .",
    "arguments": [
      [
        "function LabelGroup ( props ) { const { children , circular , className , color , content , size , tag } = props const classes = cx ( 'ui' , color , size , useKeyOnly ( circular , 'circular' ) , useKeyOnly ( tag , 'tag' ) , 'labels' , className , ) const rest = getUnhandledProps ( LabelGroup , props ) const ElementType = getElementType ( LabelGroup , props ) return ( < ElementType { ... rest } className = { classes } > { childrenUtils . isNil ( children ) ? content : children } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default LabelGroup ``` [highlighted code]\nThe provided code is a React component written in JavaScript, specifically for the Bulma CSS framework. It defines a `LabelGroup` component that groups multiple labels together.\n\nHere's a breakdown of the code:\n\n1. The component imports various dependencies, including `cx` from the `classnames` library, `getUnhandledProps` from the `react-bulma-components` library, and several functions from the `utils` library.\n2. The component defines a `props` object that contains various properties, including `children`, `circular`, `className`, `color`, `content`, `size`, and `tag`.\n3. The component uses the `cx` function to create a CSS class string by combining the base class \"ui\" with additional classes based on the `color`, `size`, `circular`, and `tag` props.\n4. The component uses the `getUnhandledProps` function to extract any props that should not be passed to the underlying HTML element.\n5. The component defines an `ElementType` variable that is determined by the `getElementType` function, which is likely used to determine the type of HTML element to render (e.g., `div`, `"
      ]
    ],
    "filtered_resps": [
      " export default LabelGroup ``` [highlighted code]\nThe provided code is a React component written in JavaScript, specifically for the Bulma CSS framework. It defines a `LabelGroup` component that groups multiple labels together.\n\nHere's a breakdown of the code:\n\n1. The component imports various dependencies, including `cx` from the `classnames` library, `getUnhandledProps` from the `react-bulma-components` library, and several functions from the `utils` library.\n2. The component defines a `props` object that contains various properties, including `children`, `circular`, `className`, `color`, `content`, `size`, and `tag`.\n3. The component uses the `cx` function to create a CSS class string by combining the base class \"ui\" with additional classes based on the `color`, `size`, `circular`, and `tag` props.\n4. The component uses the `getUnhandledProps` function to extract any props that should not be passed to the underlying HTML element.\n5. The component defines an `ElementType` variable that is determined by the `getElementType` function, which is likely used to determine the type of HTML element to render (e.g., `div`, `"
    ],
    "smoothed_bleu_4": 0.5176326524981613
  },
  {
    "doc_id": 76,
    "doc": {
      "id": 76,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/FeedExtra.js",
      "func_name": "FeedExtra",
      "original_string": "function FeedExtra(props) {\n  const { children, className, content, images, text } = props\n\n  const classes = cx(\n    useKeyOnly(images, 'images'),\n    useKeyOnly(content || text, 'text'),\n    'extra',\n    className,\n  )\n  const rest = getUnhandledProps(FeedExtra, props)\n  const ElementType = getElementType(FeedExtra, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  // TODO need a \"collection factory\" to handle creating multiple image elements and their keys\n  const imageElements = _.map(images, (image, index) => {\n    const key = [index, image].join('-')\n    return createHTMLImage(image, { key })\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {content}\n      {imageElements}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FeedExtra(props) {\n  const { children, className, content, images, text } = props\n\n  const classes = cx(\n    useKeyOnly(images, 'images'),\n    useKeyOnly(content || text, 'text'),\n    'extra',\n    className,\n  )\n  const rest = getUnhandledProps(FeedExtra, props)\n  const ElementType = getElementType(FeedExtra, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  // TODO need a \"collection factory\" to handle creating multiple image elements and their keys\n  const imageElements = _.map(images, (image, index) => {\n    const key = [index, image].join('-')\n    return createHTMLImage(image, { key })\n  })\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {content}\n      {imageElements}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FeedExtra",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "images",
        ",",
        "text",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "images",
        ",",
        "'images'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "content",
        "||",
        "text",
        ",",
        "'text'",
        ")",
        ",",
        "'extra'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FeedExtra",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FeedExtra",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "// TODO need a \"collection factory\" to handle creating multiple image elements and their keys",
        "const",
        "imageElements",
        "=",
        "_",
        ".",
        "map",
        "(",
        "images",
        ",",
        "(",
        "image",
        ",",
        "index",
        ")",
        "=>",
        "{",
        "const",
        "key",
        "=",
        "[",
        "index",
        ",",
        "image",
        "]",
        ".",
        "join",
        "(",
        "'-'",
        ")",
        "return",
        "createHTMLImage",
        "(",
        "image",
        ",",
        "{",
        "key",
        "}",
        ")",
        "}",
        ")",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "content",
        "}",
        "\n      ",
        "{",
        "imageElements",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed can contain an extra content.",
      "docstring_tokens": [
        "A",
        "feed",
        "can",
        "contain",
        "an",
        "extra",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/FeedExtra.js#L18-L50"
    },
    "target": "A feed can contain an extra content .",
    "arguments": [
      [
        "function FeedExtra ( props ) { const { children , className , content , images , text } = props const classes = cx ( useKeyOnly ( images , 'images' ) , useKeyOnly ( content || text , 'text' ) , 'extra' , className , ) const rest = getUnhandledProps ( FeedExtra , props ) const ElementType = getElementType ( FeedExtra , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } // TODO need a \"collection factory\" to handle creating multiple image elements and their keys const imageElements = _ . map ( images , ( image , index ) => { const key = [ index , image ] . join ( '-' ) return createHTMLImage ( image , { key } ) } ) return ( < ElementType { ... rest } className = { classes } > { content } { imageElements } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``\n    - Starting from the example, you can iterate over the images object and map each image to a corresponding HTML image element. Use the image\u2019s index and its own key to create a unique key for the element. Then, pass this key to createHTMLImage function which returns the HTML image element.\n    - To make this example complete, add a function that can handle creating multiple image elements and their keys, so the code can be reused if the structure of the component changes. You can define this function like this: ``` const createImageElements = ( images, collectionKey ) => { const elements = _. map ( images, ( image, index ) => { const key = [ index, image ]. join ( '-' ) return createHTMLImage ( image, { key } ) } ) return elements } ```\n    - Then, call this function with the images and \u2018images\u2019 as the collectionKey and return the result.\n    - Use the mapped images in the JSX to render them. You should see the images correctly rendered.\n\nHere\u2019s the complete example:\n```javascript\nimport _ from 'lodash';\nimport { cx } from 'emotion';\nimport { useKeyOnly, getUnhandledProps, getElementType, createHTMLImage }"
      ]
    ],
    "filtered_resps": [
      " ``\n    - Starting from the example, you can iterate over the images object and map each image to a corresponding HTML image element. Use the image\u2019s index and its own key to create a unique key for the element. Then, pass this key to createHTMLImage function which returns the HTML image element.\n    - To make this example complete, add a function that can handle creating multiple image elements and their keys, so the code can be reused if the structure of the component changes. You can define this function like this: ``` const createImageElements = ( images, collectionKey ) => { const elements = _. map ( images, ( image, index ) => { const key = [ index, image ]. join ( '-' ) return createHTMLImage ( image, { key } ) } ) return elements } ```\n    - Then, call this function with the images and \u2018images\u2019 as the collectionKey and return the result.\n    - Use the mapped images in the JSX to render them. You should see the images correctly rendered.\n\nHere\u2019s the complete example:\n```javascript\nimport _ from 'lodash';\nimport { cx } from 'emotion';\nimport { useKeyOnly, getUnhandledProps, getElementType, createHTMLImage }"
    ],
    "smoothed_bleu_4": 0.5410407676549653
  },
  {
    "doc_id": 77,
    "doc": {
      "id": 77,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/modules/Dropdown/DropdownDivider.js",
      "func_name": "DropdownDivider",
      "original_string": "function DropdownDivider(props) {\n  const { className } = props\n  const classes = cx('divider', className)\n  const rest = getUnhandledProps(DropdownDivider, props)\n  const ElementType = getElementType(DropdownDivider, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "language": "javascript",
      "code": "function DropdownDivider(props) {\n  const { className } = props\n  const classes = cx('divider', className)\n  const rest = getUnhandledProps(DropdownDivider, props)\n  const ElementType = getElementType(DropdownDivider, props)\n\n  return <ElementType {...rest} className={classes} />\n}",
      "code_tokens": [
        "function",
        "DropdownDivider",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "className",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'divider'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "DropdownDivider",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "DropdownDivider",
        ",",
        "props",
        ")",
        "return",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}"
      ],
      "docstring": "A dropdown menu can contain dividers to separate related content.",
      "docstring_tokens": [
        "A",
        "dropdown",
        "menu",
        "can",
        "contain",
        "dividers",
        "to",
        "separate",
        "related",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/modules/Dropdown/DropdownDivider.js#L10-L17"
    },
    "target": "A dropdown menu can contain dividers to separate related content .",
    "arguments": [
      [
        "function DropdownDivider ( props ) { const { className } = props const classes = cx ( 'divider' , className ) const rest = getUnhandledProps ( DropdownDivider , props ) const ElementType = getElementType ( DropdownDivider , props ) return < ElementType { ... rest } className = { classes } / > }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " const DropdownDivider = Dropdown. withProps ( DropdownDivider ) ; export default DropdownDivider ; ```\n\nYou can then use the `DropdownDivider` component in your code like this:\n```\n< DropdownDivider / >\n```\nNote that this implementation uses the `Dropdown` component as the base component, and then applies the `DropdownDivider` props to it. The `cx` function is used to merge the classes from the `className` prop with the `divider` class. The `getUnhandledProps` function is used to remove any props that are not handled by the component. Finally, the `getElementType` function is used to determine the element type of the component based on the `elementType` prop.\n\nThis is a basic example, you can add more functionality to the `DropdownDivider` component as needed. You can also customize the appearance of the divider by adding more classes to the `divider` class. \n\n### Example use cases\n\n* Use the `DropdownDivider` component to separate sections in a dropdown menu.\n* Use the `DropdownDivider` component to add a visual separation between different groups of items in a dropdown menu.\n\n### API\n\n* `className`: a string of CSS class names to apply to the component.\n* `"
      ]
    ],
    "filtered_resps": [
      " const DropdownDivider = Dropdown. withProps ( DropdownDivider ) ; export default DropdownDivider ; ```\n\nYou can then use the `DropdownDivider` component in your code like this:\n```\n< DropdownDivider / >\n```\nNote that this implementation uses the `Dropdown` component as the base component, and then applies the `DropdownDivider` props to it. The `cx` function is used to merge the classes from the `className` prop with the `divider` class. The `getUnhandledProps` function is used to remove any props that are not handled by the component. Finally, the `getElementType` function is used to determine the element type of the component based on the `elementType` prop.\n\nThis is a basic example, you can add more functionality to the `DropdownDivider` component as needed. You can also customize the appearance of the divider by adding more classes to the `divider` class. \n\n### Example use cases\n\n* Use the `DropdownDivider` component to separate sections in a dropdown menu.\n* Use the `DropdownDivider` component to add a visual separation between different groups of items in a dropdown menu.\n\n### API\n\n* `className`: a string of CSS class names to apply to the component.\n* `"
    ],
    "smoothed_bleu_4": 1.1339195751265663
  },
  {
    "doc_id": 78,
    "doc": {
      "id": 78,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/views/Feed/FeedSummary.js",
      "func_name": "FeedSummary",
      "original_string": "function FeedSummary(props) {\n  const { children, className, content, date, user } = props\n\n  const classes = cx('summary', className)\n  const rest = getUnhandledProps(FeedSummary, props)\n  const ElementType = getElementType(FeedSummary, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\n      {content}\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function FeedSummary(props) {\n  const { children, className, content, date, user } = props\n\n  const classes = cx('summary', className)\n  const rest = getUnhandledProps(FeedSummary, props)\n  const ElementType = getElementType(FeedSummary, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {createShorthand(FeedUser, val => ({ content: val }), user, { autoGenerateKey: false })}\n      {content}\n      {createShorthand(FeedDate, val => ({ content: val }), date, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "FeedSummary",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "date",
        ",",
        "user",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'summary'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "FeedSummary",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "FeedSummary",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "FeedUser",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "user",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "content",
        "}",
        "\n      ",
        "{",
        "createShorthand",
        "(",
        "FeedDate",
        ",",
        "val",
        "=>",
        "(",
        "{",
        "content",
        ":",
        "val",
        "}",
        ")",
        ",",
        "date",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A feed can contain a summary.",
      "docstring_tokens": [
        "A",
        "feed",
        "can",
        "contain",
        "a",
        "summary",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/views/Feed/FeedSummary.js#L18-L40"
    },
    "target": "A feed can contain a summary .",
    "arguments": [
      [
        "function FeedSummary ( props ) { const { children , className , content , date , user } = props const classes = cx ( 'summary' , className ) const rest = getUnhandledProps ( FeedSummary , props ) const ElementType = getElementType ( FeedSummary , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { createShorthand ( FeedUser , val => ( { content : val } ) , user , { autoGenerateKey : false } ) } { content } { createShorthand ( FeedDate , val => ( { content : val } ) , date , { autoGenerateKey : false } ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " FeedSummary. displayName = 'FeedSummary' FeedSummary. propTypes = { children : PropTypes. node, className : PropTypes. string, content : PropTypes. node, date : PropTypes. oneOfType ([ PropTypes. date, PropTypes. arrayOf ( PropTypes. date ) ] ), user : PropTypes. oneOfType ([ PropTypes. string, PropTypes. arrayOf ( PropTypes. string ) ] ) } FeedSummary. defaultProps = { content : '', date : '' } module. exports = FeedSummary\n``` By analyzing the code, we can see that the `FeedSummary` component expects several props, including `children`, `className`, `content`, `date`, and `user`. The component uses a series of utility functions, such as `cx` and `getUnhandledProps`, to manage its props and render its content.\n\nThe component uses a conditional statement to check if the `children` prop is present. If it is, the component returns a simple container element with the `children` prop inside. If not, the component renders a more complex structure with the `content`, `date`, and `user` props.\n\nThe `createShorthand` function is used to create shorthand props for the `FeedUser` and `FeedDate` components."
      ]
    ],
    "filtered_resps": [
      " FeedSummary. displayName = 'FeedSummary' FeedSummary. propTypes = { children : PropTypes. node, className : PropTypes. string, content : PropTypes. node, date : PropTypes. oneOfType ([ PropTypes. date, PropTypes. arrayOf ( PropTypes. date ) ] ), user : PropTypes. oneOfType ([ PropTypes. string, PropTypes. arrayOf ( PropTypes. string ) ] ) } FeedSummary. defaultProps = { content : '', date : '' } module. exports = FeedSummary\n``` By analyzing the code, we can see that the `FeedSummary` component expects several props, including `children`, `className`, `content`, `date`, and `user`. The component uses a series of utility functions, such as `cx` and `getUnhandledProps`, to manage its props and render its content.\n\nThe component uses a conditional statement to check if the `children` prop is present. If it is, the component returns a simple container element with the `children` prop inside. If not, the component renders a more complex structure with the `content`, `date`, and `user` props.\n\nThe `createShorthand` function is used to create shorthand props for the `FeedUser` and `FeedDate` components."
    ],
    "smoothed_bleu_4": 0.569676317968243
  },
  {
    "doc_id": 79,
    "doc": {
      "id": 79,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Step/StepContent.js",
      "func_name": "StepContent",
      "original_string": "function StepContent(props) {\n  const { children, className, content, description, title } = props\n  const classes = cx('content', className)\n  const rest = getUnhandledProps(StepContent, props)\n  const ElementType = getElementType(StepContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {StepTitle.create(title, { autoGenerateKey: false })}\n      {StepDescription.create(description, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function StepContent(props) {\n  const { children, className, content, description, title } = props\n  const classes = cx('content', className)\n  const rest = getUnhandledProps(StepContent, props)\n  const ElementType = getElementType(StepContent, props)\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n      {StepTitle.create(title, { autoGenerateKey: false })}\n      {StepDescription.create(description, { autoGenerateKey: false })}\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "StepContent",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "children",
        ",",
        "className",
        ",",
        "content",
        ",",
        "description",
        ",",
        "title",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "'content'",
        ",",
        "className",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "StepContent",
        ",",
        "props",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "StepContent",
        ",",
        "props",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n      ",
        "{",
        "StepTitle",
        ".",
        "create",
        "(",
        "title",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "StepDescription",
        ".",
        "create",
        "(",
        "description",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "A step can contain a content.",
      "docstring_tokens": [
        "A",
        "step",
        "can",
        "contain",
        "a",
        "content",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Step/StepContent.js#L18-L45"
    },
    "target": "A step can contain a content .",
    "arguments": [
      [
        "function StepContent ( props ) { const { children , className , content , description , title } = props const classes = cx ( 'content' , className ) const rest = getUnhandledProps ( StepContent , props ) const ElementType = getElementType ( StepContent , props ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } return ( < ElementType { ... rest } className = { classes } > { StepTitle . create ( title , { autoGenerateKey : false } ) } { StepDescription . create ( description , { autoGenerateKey : false } ) } < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export default StepContent ; #enddocblock ```\n\n#### StepContent component implementation\n```javascript\n// @flow\n\nimport { childrenUtils } from'react';\nimport { cx } from 'emotion';\nimport getElementType from './getElementType';\nimport getUnhandledProps from './getUnhandledProps';\nimport StepTitle from './StepTitle';\nimport StepDescription from './StepDescription';\n\ntype Props = {\n  children?: any,\n  className?: string,\n  content?: any,\n  description?: any,\n  title?: any,\n};\n\nconst StepContent = (props: Props) => {\n  const { children, className, content, description, title } = props;\n  const classes = cx('content', className);\n  const rest = getUnhandledProps(StepContent, props);\n  const ElementType = getElementType(StepContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    );\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    );\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n"
      ]
    ],
    "filtered_resps": [
      " export default StepContent ; #enddocblock ```\n\n#### StepContent component implementation\n```javascript\n// @flow\n\nimport { childrenUtils } from'react';\nimport { cx } from 'emotion';\nimport getElementType from './getElementType';\nimport getUnhandledProps from './getUnhandledProps';\nimport StepTitle from './StepTitle';\nimport StepDescription from './StepDescription';\n\ntype Props = {\n  children?: any,\n  className?: string,\n  content?: any,\n  description?: any,\n  title?: any,\n};\n\nconst StepContent = (props: Props) => {\n  const { children, className, content, description, title } = props;\n  const classes = cx('content', className);\n  const rest = getUnhandledProps(StepContent, props);\n  const ElementType = getElementType(StepContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    );\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    );\n  }\n\n  return (\n    <ElementType {...rest} className={classes}>\n"
    ],
    "smoothed_bleu_4": 0.4640832574331783
  },
  {
    "doc_id": 80,
    "doc": {
      "id": 80,
      "repo": "Semantic-Org/Semantic-UI-React",
      "path": "src/elements/Image/Image.js",
      "func_name": "Image",
      "original_string": "function Image(props) {\n  const {\n    avatar,\n    bordered,\n    centered,\n    children,\n    circular,\n    className,\n    content,\n    dimmer,\n    disabled,\n    floated,\n    fluid,\n    hidden,\n    href,\n    inline,\n    label,\n    rounded,\n    size,\n    spaced,\n    verticalAlign,\n    wrapped,\n    ui,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(ui, 'ui'),\n    size,\n    useKeyOnly(avatar, 'avatar'),\n    useKeyOnly(bordered, 'bordered'),\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(rounded, 'rounded'),\n    useKeyOrValueAndKey(spaced, 'spaced'),\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign, 'aligned'),\n    'image',\n    className,\n  )\n  const rest = getUnhandledProps(Image, props)\n  const [imgTagProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\n  const ElementType = getElementType(Image, props, () => {\n    if (\n      !_.isNil(dimmer) ||\n      !_.isNil(label) ||\n      !_.isNil(wrapped) ||\n      !childrenUtils.isNil(children)\n    ) {\n      return 'div'\n    }\n  })\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  if (ElementType === 'img') {\n    return <ElementType {...rootProps} {...imgTagProps} className={classes} />\n  }\n  return (\n    <ElementType {...rootProps} className={classes} href={href}>\n      {Dimmer.create(dimmer, { autoGenerateKey: false })}\n      {Label.create(label, { autoGenerateKey: false })}\n      <img {...imgTagProps} />\n    </ElementType>\n  )\n}",
      "language": "javascript",
      "code": "function Image(props) {\n  const {\n    avatar,\n    bordered,\n    centered,\n    children,\n    circular,\n    className,\n    content,\n    dimmer,\n    disabled,\n    floated,\n    fluid,\n    hidden,\n    href,\n    inline,\n    label,\n    rounded,\n    size,\n    spaced,\n    verticalAlign,\n    wrapped,\n    ui,\n  } = props\n\n  const classes = cx(\n    useKeyOnly(ui, 'ui'),\n    size,\n    useKeyOnly(avatar, 'avatar'),\n    useKeyOnly(bordered, 'bordered'),\n    useKeyOnly(circular, 'circular'),\n    useKeyOnly(centered, 'centered'),\n    useKeyOnly(disabled, 'disabled'),\n    useKeyOnly(fluid, 'fluid'),\n    useKeyOnly(hidden, 'hidden'),\n    useKeyOnly(inline, 'inline'),\n    useKeyOnly(rounded, 'rounded'),\n    useKeyOrValueAndKey(spaced, 'spaced'),\n    useValueAndKey(floated, 'floated'),\n    useVerticalAlignProp(verticalAlign, 'aligned'),\n    'image',\n    className,\n  )\n  const rest = getUnhandledProps(Image, props)\n  const [imgTagProps, rootProps] = partitionHTMLProps(rest, { htmlProps: htmlImageProps })\n  const ElementType = getElementType(Image, props, () => {\n    if (\n      !_.isNil(dimmer) ||\n      !_.isNil(label) ||\n      !_.isNil(wrapped) ||\n      !childrenUtils.isNil(children)\n    ) {\n      return 'div'\n    }\n  })\n\n  if (!childrenUtils.isNil(children)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {children}\n      </ElementType>\n    )\n  }\n  if (!childrenUtils.isNil(content)) {\n    return (\n      <ElementType {...rest} className={classes}>\n        {content}\n      </ElementType>\n    )\n  }\n\n  if (ElementType === 'img') {\n    return <ElementType {...rootProps} {...imgTagProps} className={classes} />\n  }\n  return (\n    <ElementType {...rootProps} className={classes} href={href}>\n      {Dimmer.create(dimmer, { autoGenerateKey: false })}\n      {Label.create(label, { autoGenerateKey: false })}\n      <img {...imgTagProps} />\n    </ElementType>\n  )\n}",
      "code_tokens": [
        "function",
        "Image",
        "(",
        "props",
        ")",
        "{",
        "const",
        "{",
        "avatar",
        ",",
        "bordered",
        ",",
        "centered",
        ",",
        "children",
        ",",
        "circular",
        ",",
        "className",
        ",",
        "content",
        ",",
        "dimmer",
        ",",
        "disabled",
        ",",
        "floated",
        ",",
        "fluid",
        ",",
        "hidden",
        ",",
        "href",
        ",",
        "inline",
        ",",
        "label",
        ",",
        "rounded",
        ",",
        "size",
        ",",
        "spaced",
        ",",
        "verticalAlign",
        ",",
        "wrapped",
        ",",
        "ui",
        ",",
        "}",
        "=",
        "props",
        "const",
        "classes",
        "=",
        "cx",
        "(",
        "useKeyOnly",
        "(",
        "ui",
        ",",
        "'ui'",
        ")",
        ",",
        "size",
        ",",
        "useKeyOnly",
        "(",
        "avatar",
        ",",
        "'avatar'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "bordered",
        ",",
        "'bordered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "circular",
        ",",
        "'circular'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "centered",
        ",",
        "'centered'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "disabled",
        ",",
        "'disabled'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "fluid",
        ",",
        "'fluid'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "hidden",
        ",",
        "'hidden'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "inline",
        ",",
        "'inline'",
        ")",
        ",",
        "useKeyOnly",
        "(",
        "rounded",
        ",",
        "'rounded'",
        ")",
        ",",
        "useKeyOrValueAndKey",
        "(",
        "spaced",
        ",",
        "'spaced'",
        ")",
        ",",
        "useValueAndKey",
        "(",
        "floated",
        ",",
        "'floated'",
        ")",
        ",",
        "useVerticalAlignProp",
        "(",
        "verticalAlign",
        ",",
        "'aligned'",
        ")",
        ",",
        "'image'",
        ",",
        "className",
        ",",
        ")",
        "const",
        "rest",
        "=",
        "getUnhandledProps",
        "(",
        "Image",
        ",",
        "props",
        ")",
        "const",
        "[",
        "imgTagProps",
        ",",
        "rootProps",
        "]",
        "=",
        "partitionHTMLProps",
        "(",
        "rest",
        ",",
        "{",
        "htmlProps",
        ":",
        "htmlImageProps",
        "}",
        ")",
        "const",
        "ElementType",
        "=",
        "getElementType",
        "(",
        "Image",
        ",",
        "props",
        ",",
        "(",
        ")",
        "=>",
        "{",
        "if",
        "(",
        "!",
        "_",
        ".",
        "isNil",
        "(",
        "dimmer",
        ")",
        "||",
        "!",
        "_",
        ".",
        "isNil",
        "(",
        "label",
        ")",
        "||",
        "!",
        "_",
        ".",
        "isNil",
        "(",
        "wrapped",
        ")",
        "||",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "'div'",
        "}",
        "}",
        ")",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "children",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "children",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "!",
        "childrenUtils",
        ".",
        "isNil",
        "(",
        "content",
        ")",
        ")",
        "{",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rest",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        ">",
        "\n        ",
        "{",
        "content",
        "}",
        "\n      ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}",
        "if",
        "(",
        "ElementType",
        "===",
        "'img'",
        ")",
        "{",
        "return",
        "<",
        "ElementType",
        "{",
        "...",
        "rootProps",
        "}",
        "{",
        "...",
        "imgTagProps",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "/",
        ">",
        "}",
        "return",
        "(",
        "<",
        "ElementType",
        "{",
        "...",
        "rootProps",
        "}",
        "className",
        "=",
        "{",
        "classes",
        "}",
        "href",
        "=",
        "{",
        "href",
        "}",
        ">",
        "\n      ",
        "{",
        "Dimmer",
        ".",
        "create",
        "(",
        "dimmer",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "{",
        "Label",
        ".",
        "create",
        "(",
        "label",
        ",",
        "{",
        "autoGenerateKey",
        ":",
        "false",
        "}",
        ")",
        "}",
        "\n      ",
        "<",
        "img",
        "{",
        "...",
        "imgTagProps",
        "}",
        "/",
        ">",
        "\n    ",
        "<",
        "/",
        "ElementType",
        ">",
        ")",
        "}"
      ],
      "docstring": "An image is a graphic representation of something.\n@see Icon",
      "docstring_tokens": [
        "An",
        "image",
        "is",
        "a",
        "graphic",
        "representation",
        "of",
        "something",
        "."
      ],
      "sha": "c42f7351df35ba1861f1dce2b01c6861a4011075",
      "url": "https://github.com/Semantic-Org/Semantic-UI-React/blob/c42f7351df35ba1861f1dce2b01c6861a4011075/src/elements/Image/Image.js#L28-L109"
    },
    "target": "An image is a graphic representation of something .",
    "arguments": [
      [
        "function Image ( props ) { const { avatar , bordered , centered , children , circular , className , content , dimmer , disabled , floated , fluid , hidden , href , inline , label , rounded , size , spaced , verticalAlign , wrapped , ui , } = props const classes = cx ( useKeyOnly ( ui , 'ui' ) , size , useKeyOnly ( avatar , 'avatar' ) , useKeyOnly ( bordered , 'bordered' ) , useKeyOnly ( circular , 'circular' ) , useKeyOnly ( centered , 'centered' ) , useKeyOnly ( disabled , 'disabled' ) , useKeyOnly ( fluid , 'fluid' ) , useKeyOnly ( hidden , 'hidden' ) , useKeyOnly ( inline , 'inline' ) , useKeyOnly ( rounded , 'rounded' ) , useKeyOrValueAndKey ( spaced , 'spaced' ) , useValueAndKey ( floated , 'floated' ) , useVerticalAlignProp ( verticalAlign , 'aligned' ) , 'image' , className , ) const rest = getUnhandledProps ( Image , props ) const [ imgTagProps , rootProps ] = partitionHTMLProps ( rest , { htmlProps : htmlImageProps } ) const ElementType = getElementType ( Image , props , ( ) => { if ( ! _ . isNil ( dimmer ) || ! _ . isNil ( label ) || ! _ . isNil ( wrapped ) || ! childrenUtils . isNil ( children ) ) { return 'div' } } ) if ( ! childrenUtils . isNil ( children ) ) { return ( < ElementType { ... rest } className = { classes } > { children } < / ElementType > ) } if ( ! childrenUtils . isNil ( content ) ) { return ( < ElementType { ... rest } className = { classes } > { content } < / ElementType > ) } if ( ElementType === 'img' ) { return < ElementType { ... rootProps } { ... imgTagProps } className = { classes } / > } return ( < ElementType { ... rootProps } className = { classes } href = { href } > { Dimmer . create ( dimmer , { autoGenerateKey : false } ) } { Label . create ( label , { autoGenerateKey : false } ) } < img { ... imgTagProps } / > < / ElementType > ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " Image. __docgenInfo = { description : \" An image component that can render images from a URL, or from a file.\", _componentId : \"UI/image\", events : { onClick : \"Triggers an onclick event. \" }, methods : { onClick : \"Sets the onClick function of the image\" }, props : { href : \"An image is not an anchor, but this attribute allows you to use the onClick event. It will trigger when clicked. \", className : \"Override or extend the styles of the image. \", alt : \"The alt attribute, if used, must be used with a valid image source.\", fluid : \"Use the image as a fluid, responsive background image. Note: the image must be in the ratio of the background container.\", rounded : \"Image rounded on all sides. This prop is deprecated and will be removed in the next major release.\", circular : \"Use a circular image. This prop is deprecated and will be removed in the next major release.\", size : \"Size of the image, can be: small, medium, large, mini, tiny.\", avatar : \"Use as an avatar.\", centered : \"Horizontally centers the image."
      ]
    ],
    "filtered_resps": [
      " Image. __docgenInfo = { description : \" An image component that can render images from a URL, or from a file.\", _componentId : \"UI/image\", events : { onClick : \"Triggers an onclick event. \" }, methods : { onClick : \"Sets the onClick function of the image\" }, props : { href : \"An image is not an anchor, but this attribute allows you to use the onClick event. It will trigger when clicked. \", className : \"Override or extend the styles of the image. \", alt : \"The alt attribute, if used, must be used with a valid image source.\", fluid : \"Use the image as a fluid, responsive background image. Note: the image must be in the ratio of the background container.\", rounded : \"Image rounded on all sides. This prop is deprecated and will be removed in the next major release.\", circular : \"Use a circular image. This prop is deprecated and will be removed in the next major release.\", size : \"Size of the image, can be: small, medium, large, mini, tiny.\", avatar : \"Use as an avatar.\", centered : \"Horizontally centers the image."
    ],
    "smoothed_bleu_4": 0.9672272006721041
  },
  {
    "doc_id": 81,
    "doc": {
      "id": 81,
      "repo": "liabru/matter-js",
      "path": "src/render/Render.js",
      "func_name": "",
      "original_string": "function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    }",
      "language": "javascript",
      "code": "function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    }",
      "code_tokens": [
        "function",
        "(",
        "canvas",
        ")",
        "{",
        "var",
        "context",
        "=",
        "canvas",
        ".",
        "getContext",
        "(",
        "'2d'",
        ")",
        ",",
        "devicePixelRatio",
        "=",
        "window",
        ".",
        "devicePixelRatio",
        "||",
        "1",
        ",",
        "backingStorePixelRatio",
        "=",
        "context",
        ".",
        "webkitBackingStorePixelRatio",
        "||",
        "context",
        ".",
        "mozBackingStorePixelRatio",
        "||",
        "context",
        ".",
        "msBackingStorePixelRatio",
        "||",
        "context",
        ".",
        "oBackingStorePixelRatio",
        "||",
        "context",
        ".",
        "backingStorePixelRatio",
        "||",
        "1",
        ";",
        "return",
        "devicePixelRatio",
        "/",
        "backingStorePixelRatio",
        ";",
        "}"
      ],
      "docstring": "Gets the pixel ratio of the canvas.\n@method _getPixelRatio\n@private\n@param {HTMLElement} canvas\n@return {Number} pixel ratio",
      "docstring_tokens": [
        "Gets",
        "the",
        "pixel",
        "ratio",
        "of",
        "the",
        "canvas",
        "."
      ],
      "sha": "2ec247b7af1c6b5da6ee05c73274ed5822c73503",
      "url": "https://github.com/liabru/matter-js/blob/2ec247b7af1c6b5da6ee05c73274ed5822c73503/src/render/Render.js#L1348-L1356"
    },
    "target": "Gets the pixel ratio of the canvas .",
    "arguments": [
      [
        "function ( canvas ) { var context = canvas . getContext ( '2d' ) , devicePixelRatio = window . devicePixelRatio || 1 , backingStorePixelRatio = context . webkitBackingStorePixelRatio || context . mozBackingStorePixelRatio || context . msBackingStorePixelRatio || context . oBackingStorePixelRatio || context . backingStorePixelRatio || 1 ; return devicePixelRatio / backingStorePixelRatio ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ) ; var canvas = document. createElement ( 'canvas' ), scaleFactor = getScaleFactor ( canvas ) ; var display = document. createElement ( 'div' ), body = document. body ; body. appendChild ( display ) ; display. style. position = 'absolute' ; display. style. top = '0px' ; display. style. left = '0px' ; display. style. width = '100%' ; display. style. height = '100%' ; display. style. overflow = 'hidden' ; var ctx = display. appendChild ( canvas ). getContext ( '2d' ) ; ctx. setTransform ( 1, 0, 0, 1, 0, 0 ) ; ctx. setLineDash ( [ ] ) ; ctx. lineWidth = 2 ; ctx. strokeStyle = 'black' ; ctx. fillStyle = 'transparent' ; var origin = [ 0, 0 ] ; var end = [ 0, 0 ] ; var deg = 0 ; function draw ( ) { deg ++ ; ctx. save ( ) ; ctx. transform ( origin [ 0 ] + Math. cos ( deg ) * 100"
      ]
    ],
    "filtered_resps": [
      " ) ; var canvas = document. createElement ( 'canvas' ), scaleFactor = getScaleFactor ( canvas ) ; var display = document. createElement ( 'div' ), body = document. body ; body. appendChild ( display ) ; display. style. position = 'absolute' ; display. style. top = '0px' ; display. style. left = '0px' ; display. style. width = '100%' ; display. style. height = '100%' ; display. style. overflow = 'hidden' ; var ctx = display. appendChild ( canvas ). getContext ( '2d' ) ; ctx. setTransform ( 1, 0, 0, 1, 0, 0 ) ; ctx. setLineDash ( [ ] ) ; ctx. lineWidth = 2 ; ctx. strokeStyle = 'black' ; ctx. fillStyle = 'transparent' ; var origin = [ 0, 0 ] ; var end = [ 0, 0 ] ; var deg = 0 ; function draw ( ) { deg ++ ; ctx. save ( ) ; ctx. transform ( origin [ 0 ] + Math. cos ( deg ) * 100"
    ],
    "smoothed_bleu_4": 0.525619938399182
  },
  {
    "doc_id": 82,
    "doc": {
      "id": 82,
      "repo": "liabru/matter-js",
      "path": "src/render/Render.js",
      "func_name": "",
      "original_string": "function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    }",
      "language": "javascript",
      "code": "function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    }",
      "code_tokens": [
        "function",
        "(",
        "render",
        ",",
        "background",
        ")",
        "{",
        "var",
        "cssBackground",
        "=",
        "background",
        ";",
        "if",
        "(",
        "/",
        "(jpg|gif|png)$",
        "/",
        ".",
        "test",
        "(",
        "background",
        ")",
        ")",
        "cssBackground",
        "=",
        "'url('",
        "+",
        "background",
        "+",
        "')'",
        ";",
        "render",
        ".",
        "canvas",
        ".",
        "style",
        ".",
        "background",
        "=",
        "cssBackground",
        ";",
        "render",
        ".",
        "canvas",
        ".",
        "style",
        ".",
        "backgroundSize",
        "=",
        "\"contain\"",
        ";",
        "render",
        ".",
        "currentBackground",
        "=",
        "background",
        ";",
        "}"
      ],
      "docstring": "Applies the background to the canvas using CSS.\n@method applyBackground\n@private\n@param {render} render\n@param {string} background",
      "docstring_tokens": [
        "Applies",
        "the",
        "background",
        "to",
        "the",
        "canvas",
        "using",
        "CSS",
        "."
      ],
      "sha": "2ec247b7af1c6b5da6ee05c73274ed5822c73503",
      "url": "https://github.com/liabru/matter-js/blob/2ec247b7af1c6b5da6ee05c73274ed5822c73503/src/render/Render.js#L1385-L1394"
    },
    "target": "Applies the background to the canvas using CSS .",
    "arguments": [
      [
        "function ( render , background ) { var cssBackground = background ; if ( / (jpg|gif|png)$ / . test ( background ) ) cssBackground = 'url(' + background + ')' ; render . canvas . style . background = cssBackground ; render . canvas . style . backgroundSize = \"contain\" ; render . currentBackground = background ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ; onImageSelected ( render, $ ( \"backgroundImage\" ). val ( ) ) ; function onBackgroundClick ( render ) { if ( render. currentBackground ) { render. currentBackground = null ; render. canvas. style. background = \"\" ; render. canvas. style. backgroundSize = \"\" ; } else { render. backgroundDialog. show ( ) ; } } $ ( \"backgroundDialog\" ). find ( \"backgroundSelector\" ). drag ( ) ; } ( function ( render ) { var left = 0 ; var top = 0 ; $ ( \"backgroundDialog\" ). on ( \"dragstart\", function ( e ) { e. preventDefault ( ) ; } ). on ( \"dragend\", function ( e ) { e. preventDefault ( ) ; } ). on ( \"drag\", function ( e ) { e. preventDefault ( ) ; var x = e. originalEvent. clientX ; var y = e. originalEvent. clientY ; if ( x > left && x < left + 170 && y > top && y < top + 30 ) { left = x ; top = y ; $ ( \"backgroundDialog\" )."
      ]
    ],
    "filtered_resps": [
      " ; onImageSelected ( render, $ ( \"backgroundImage\" ). val ( ) ) ; function onBackgroundClick ( render ) { if ( render. currentBackground ) { render. currentBackground = null ; render. canvas. style. background = \"\" ; render. canvas. style. backgroundSize = \"\" ; } else { render. backgroundDialog. show ( ) ; } } $ ( \"backgroundDialog\" ). find ( \"backgroundSelector\" ). drag ( ) ; } ( function ( render ) { var left = 0 ; var top = 0 ; $ ( \"backgroundDialog\" ). on ( \"dragstart\", function ( e ) { e. preventDefault ( ) ; } ). on ( \"dragend\", function ( e ) { e. preventDefault ( ) ; } ). on ( \"drag\", function ( e ) { e. preventDefault ( ) ; var x = e. originalEvent. clientX ; var y = e. originalEvent. clientY ; if ( x > left && x < left + 170 && y > top && y < top + 30 ) { left = x ; top = y ; $ ( \"backgroundDialog\" )."
    ],
    "smoothed_bleu_4": 0.5765970239138074
  },
  {
    "doc_id": 83,
    "doc": {
      "id": 83,
      "repo": "liabru/matter-js",
      "path": "src/render/RenderPixi.js",
      "func_name": "",
      "original_string": "function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    }",
      "language": "javascript",
      "code": "function(render, body) {\n        var bodyRender = body.render,\n            texturePath = bodyRender.sprite.texture,\n            texture = _getTexture(render, texturePath),\n            sprite = new PIXI.Sprite(texture);\n\n        sprite.anchor.x = body.render.sprite.xOffset;\n        sprite.anchor.y = body.render.sprite.yOffset;\n\n        return sprite;\n    }",
      "code_tokens": [
        "function",
        "(",
        "render",
        ",",
        "body",
        ")",
        "{",
        "var",
        "bodyRender",
        "=",
        "body",
        ".",
        "render",
        ",",
        "texturePath",
        "=",
        "bodyRender",
        ".",
        "sprite",
        ".",
        "texture",
        ",",
        "texture",
        "=",
        "_getTexture",
        "(",
        "render",
        ",",
        "texturePath",
        ")",
        ",",
        "sprite",
        "=",
        "new",
        "PIXI",
        ".",
        "Sprite",
        "(",
        "texture",
        ")",
        ";",
        "sprite",
        ".",
        "anchor",
        ".",
        "x",
        "=",
        "body",
        ".",
        "render",
        ".",
        "sprite",
        ".",
        "xOffset",
        ";",
        "sprite",
        ".",
        "anchor",
        ".",
        "y",
        "=",
        "body",
        ".",
        "render",
        ".",
        "sprite",
        ".",
        "yOffset",
        ";",
        "return",
        "sprite",
        ";",
        "}"
      ],
      "docstring": "Creates a body sprite\n@method _createBodySprite\n@private\n@param {RenderPixi} render\n@param {body} body\n@return {PIXI.Sprite} sprite\n@deprecated",
      "docstring_tokens": [
        "Creates",
        "a",
        "body",
        "sprite"
      ],
      "sha": "2ec247b7af1c6b5da6ee05c73274ed5822c73503",
      "url": "https://github.com/liabru/matter-js/blob/2ec247b7af1c6b5da6ee05c73274ed5822c73503/src/render/RenderPixi.js#L420-L430"
    },
    "target": "Creates a body sprite",
    "arguments": [
      [
        "function ( render , body ) { var bodyRender = body . render , texturePath = bodyRender . sprite . texture , texture = _getTexture ( render , texturePath ) , sprite = new PIXI . Sprite ( texture ) ; sprite . anchor . x = body . render . sprite . xOffset ; sprite . anchor . y = body . render . sprite . yOffset ; return sprite ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function onPhysicsUpdate ( physicsUpdate ) { render. world. physicsUpdate ( physicsUpdate ) ; } return { onPhysicsUpdate : onPhysicsUpdate } ; } function _getTexture ( render, texturePath ) { var textures = render. world. textureManager. getTextures ( texturePath ) ; if ( textures. length === 1 ) { return textures [ 0 ] ; } if ( textures. length > 1 ) { return render. world. textureManager. createMipMapTexture ( textures ) ; } return null ; } function renderEntities ( render, entities ) { var batch, sprite, firstSprite ; entities. forEach ( function ( entity ) { var world = render. world, body = entity. body, renderProps = body. render ; if ( renderProps. type === 'batch' ) { batch = world. getBatch ( renderProps. name ) ; if (! batch ) { batch = world. createBatch ( renderProps. name ) ; } if ( batch ) { batch. add ( entity ) ; } } else if ( renderProps. type ==='sprite' ) { sprite = createSprite ( render, body ) ; firstSprite = world. getSprite ( sprite ) ;"
      ]
    ],
    "filtered_resps": [
      " function onPhysicsUpdate ( physicsUpdate ) { render. world. physicsUpdate ( physicsUpdate ) ; } return { onPhysicsUpdate : onPhysicsUpdate } ; } function _getTexture ( render, texturePath ) { var textures = render. world. textureManager. getTextures ( texturePath ) ; if ( textures. length === 1 ) { return textures [ 0 ] ; } if ( textures. length > 1 ) { return render. world. textureManager. createMipMapTexture ( textures ) ; } return null ; } function renderEntities ( render, entities ) { var batch, sprite, firstSprite ; entities. forEach ( function ( entity ) { var world = render. world, body = entity. body, renderProps = body. render ; if ( renderProps. type === 'batch' ) { batch = world. getBatch ( renderProps. name ) ; if (! batch ) { batch = world. createBatch ( renderProps. name ) ; } if ( batch ) { batch. add ( entity ) ; } } else if ( renderProps. type ==='sprite' ) { sprite = createSprite ( render, body ) ; firstSprite = world. getSprite ( sprite ) ;"
    ],
    "smoothed_bleu_4": 0.5374985203745782
  },
  {
    "doc_id": 84,
    "doc": {
      "id": 84,
      "repo": "liabru/matter-js",
      "path": "src/render/RenderPixi.js",
      "func_name": "",
      "original_string": "function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    }",
      "language": "javascript",
      "code": "function(render, body) {\n        var bodyRender = body.render,\n            options = render.options,\n            primitive = new PIXI.Graphics(),\n            fillStyle = Common.colorToNumber(bodyRender.fillStyle),\n            strokeStyle = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleIndicator = Common.colorToNumber(bodyRender.strokeStyle),\n            strokeStyleWireframe = Common.colorToNumber('#bbb'),\n            strokeStyleWireframeIndicator = Common.colorToNumber('#CD5C5C'),\n            part;\n\n        primitive.clear();\n\n        // handle compound parts\n        for (var k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n\n            if (!options.wireframes) {\n                primitive.beginFill(fillStyle, 1);\n                primitive.lineStyle(bodyRender.lineWidth, strokeStyle, 1);\n            } else {\n                primitive.beginFill(0, 0);\n                primitive.lineStyle(1, strokeStyleWireframe, 1);\n            }\n\n            primitive.moveTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            for (var j = 1; j < part.vertices.length; j++) {\n                primitive.lineTo(part.vertices[j].x - body.position.x, part.vertices[j].y - body.position.y);\n            }\n\n            primitive.lineTo(part.vertices[0].x - body.position.x, part.vertices[0].y - body.position.y);\n\n            primitive.endFill();\n\n            // angle indicator\n            if (options.showAngleIndicator || options.showAxes) {\n                primitive.beginFill(0, 0);\n\n                if (options.wireframes) {\n                    primitive.lineStyle(1, strokeStyleWireframeIndicator, 1);\n                } else {\n                    primitive.lineStyle(1, strokeStyleIndicator);\n                }\n\n                primitive.moveTo(part.position.x - body.position.x, part.position.y - body.position.y);\n                primitive.lineTo(((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2 - body.position.x), \n                                 ((part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2 - body.position.y));\n\n                primitive.endFill();\n            }\n        }\n\n        return primitive;\n    }",
      "code_tokens": [
        "function",
        "(",
        "render",
        ",",
        "body",
        ")",
        "{",
        "var",
        "bodyRender",
        "=",
        "body",
        ".",
        "render",
        ",",
        "options",
        "=",
        "render",
        ".",
        "options",
        ",",
        "primitive",
        "=",
        "new",
        "PIXI",
        ".",
        "Graphics",
        "(",
        ")",
        ",",
        "fillStyle",
        "=",
        "Common",
        ".",
        "colorToNumber",
        "(",
        "bodyRender",
        ".",
        "fillStyle",
        ")",
        ",",
        "strokeStyle",
        "=",
        "Common",
        ".",
        "colorToNumber",
        "(",
        "bodyRender",
        ".",
        "strokeStyle",
        ")",
        ",",
        "strokeStyleIndicator",
        "=",
        "Common",
        ".",
        "colorToNumber",
        "(",
        "bodyRender",
        ".",
        "strokeStyle",
        ")",
        ",",
        "strokeStyleWireframe",
        "=",
        "Common",
        ".",
        "colorToNumber",
        "(",
        "'#bbb'",
        ")",
        ",",
        "strokeStyleWireframeIndicator",
        "=",
        "Common",
        ".",
        "colorToNumber",
        "(",
        "'#CD5C5C'",
        ")",
        ",",
        "part",
        ";",
        "primitive",
        ".",
        "clear",
        "(",
        ")",
        ";",
        "// handle compound parts",
        "for",
        "(",
        "var",
        "k",
        "=",
        "body",
        ".",
        "parts",
        ".",
        "length",
        ">",
        "1",
        "?",
        "1",
        ":",
        "0",
        ";",
        "k",
        "<",
        "body",
        ".",
        "parts",
        ".",
        "length",
        ";",
        "k",
        "++",
        ")",
        "{",
        "part",
        "=",
        "body",
        ".",
        "parts",
        "[",
        "k",
        "]",
        ";",
        "if",
        "(",
        "!",
        "options",
        ".",
        "wireframes",
        ")",
        "{",
        "primitive",
        ".",
        "beginFill",
        "(",
        "fillStyle",
        ",",
        "1",
        ")",
        ";",
        "primitive",
        ".",
        "lineStyle",
        "(",
        "bodyRender",
        ".",
        "lineWidth",
        ",",
        "strokeStyle",
        ",",
        "1",
        ")",
        ";",
        "}",
        "else",
        "{",
        "primitive",
        ".",
        "beginFill",
        "(",
        "0",
        ",",
        "0",
        ")",
        ";",
        "primitive",
        ".",
        "lineStyle",
        "(",
        "1",
        ",",
        "strokeStyleWireframe",
        ",",
        "1",
        ")",
        ";",
        "}",
        "primitive",
        ".",
        "moveTo",
        "(",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "x",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ",",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "y",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        ";",
        "for",
        "(",
        "var",
        "j",
        "=",
        "1",
        ";",
        "j",
        "<",
        "part",
        ".",
        "vertices",
        ".",
        "length",
        ";",
        "j",
        "++",
        ")",
        "{",
        "primitive",
        ".",
        "lineTo",
        "(",
        "part",
        ".",
        "vertices",
        "[",
        "j",
        "]",
        ".",
        "x",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ",",
        "part",
        ".",
        "vertices",
        "[",
        "j",
        "]",
        ".",
        "y",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        ";",
        "}",
        "primitive",
        ".",
        "lineTo",
        "(",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "x",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ",",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "y",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        ";",
        "primitive",
        ".",
        "endFill",
        "(",
        ")",
        ";",
        "// angle indicator",
        "if",
        "(",
        "options",
        ".",
        "showAngleIndicator",
        "||",
        "options",
        ".",
        "showAxes",
        ")",
        "{",
        "primitive",
        ".",
        "beginFill",
        "(",
        "0",
        ",",
        "0",
        ")",
        ";",
        "if",
        "(",
        "options",
        ".",
        "wireframes",
        ")",
        "{",
        "primitive",
        ".",
        "lineStyle",
        "(",
        "1",
        ",",
        "strokeStyleWireframeIndicator",
        ",",
        "1",
        ")",
        ";",
        "}",
        "else",
        "{",
        "primitive",
        ".",
        "lineStyle",
        "(",
        "1",
        ",",
        "strokeStyleIndicator",
        ")",
        ";",
        "}",
        "primitive",
        ".",
        "moveTo",
        "(",
        "part",
        ".",
        "position",
        ".",
        "x",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ",",
        "part",
        ".",
        "position",
        ".",
        "y",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        ";",
        "primitive",
        ".",
        "lineTo",
        "(",
        "(",
        "(",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "x",
        "+",
        "part",
        ".",
        "vertices",
        "[",
        "part",
        ".",
        "vertices",
        ".",
        "length",
        "-",
        "1",
        "]",
        ".",
        "x",
        ")",
        "/",
        "2",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ")",
        ",",
        "(",
        "(",
        "part",
        ".",
        "vertices",
        "[",
        "0",
        "]",
        ".",
        "y",
        "+",
        "part",
        ".",
        "vertices",
        "[",
        "part",
        ".",
        "vertices",
        ".",
        "length",
        "-",
        "1",
        "]",
        ".",
        "y",
        ")",
        "/",
        "2",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        ")",
        ";",
        "primitive",
        ".",
        "endFill",
        "(",
        ")",
        ";",
        "}",
        "}",
        "return",
        "primitive",
        ";",
        "}"
      ],
      "docstring": "Creates a body primitive\n@method _createBodyPrimitive\n@private\n@param {RenderPixi} render\n@param {body} body\n@return {PIXI.Graphics} graphics\n@deprecated",
      "docstring_tokens": [
        "Creates",
        "a",
        "body",
        "primitive"
      ],
      "sha": "2ec247b7af1c6b5da6ee05c73274ed5822c73503",
      "url": "https://github.com/liabru/matter-js/blob/2ec247b7af1c6b5da6ee05c73274ed5822c73503/src/render/RenderPixi.js#L441-L495"
    },
    "target": "Creates a body primitive",
    "arguments": [
      [
        "function ( render , body ) { var bodyRender = body . render , options = render . options , primitive = new PIXI . Graphics ( ) , fillStyle = Common . colorToNumber ( bodyRender . fillStyle ) , strokeStyle = Common . colorToNumber ( bodyRender . strokeStyle ) , strokeStyleIndicator = Common . colorToNumber ( bodyRender . strokeStyle ) , strokeStyleWireframe = Common . colorToNumber ( '#bbb' ) , strokeStyleWireframeIndicator = Common . colorToNumber ( '#CD5C5C' ) , part ; primitive . clear ( ) ; // handle compound parts for ( var k = body . parts . length > 1 ? 1 : 0 ; k < body . parts . length ; k ++ ) { part = body . parts [ k ] ; if ( ! options . wireframes ) { primitive . beginFill ( fillStyle , 1 ) ; primitive . lineStyle ( bodyRender . lineWidth , strokeStyle , 1 ) ; } else { primitive . beginFill ( 0 , 0 ) ; primitive . lineStyle ( 1 , strokeStyleWireframe , 1 ) ; } primitive . moveTo ( part . vertices [ 0 ] . x - body . position . x , part . vertices [ 0 ] . y - body . position . y ) ; for ( var j = 1 ; j < part . vertices . length ; j ++ ) { primitive . lineTo ( part . vertices [ j ] . x - body . position . x , part . vertices [ j ] . y - body . position . y ) ; } primitive . lineTo ( part . vertices [ 0 ] . x - body . position . x , part . vertices [ 0 ] . y - body . position . y ) ; primitive . endFill ( ) ; // angle indicator if ( options . showAngleIndicator || options . showAxes ) { primitive . beginFill ( 0 , 0 ) ; if ( options . wireframes ) { primitive . lineStyle ( 1 , strokeStyleWireframeIndicator , 1 ) ; } else { primitive . lineStyle ( 1 , strokeStyleIndicator ) ; } primitive . moveTo ( part . position . x - body . position . x , part . position . y - body . position . y ) ; primitive . lineTo ( ( ( part . vertices [ 0 ] . x + part . vertices [ part . vertices . length - 1 ] . x ) / 2 - body . position . x ) , ( ( part . vertices [ 0 ] . y + part . vertices [ part . vertices . length - 1 ] . y ) / 2 - body . position . y ) ) ; primitive . endFill ( ) ; } } return primitive ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " },\nthen the i3dViewer.render() function should be called with options.showAxes set to true, or false, to indicate whether the axes should be shown. The problem with the previous implementation is that the drawAxes() function was not properly handled by the i3dViewer.render() function. We need to add a call to the drawAxes() function in the i3dViewer.render() function:\n```javascript\nfunction ( render, body ) { //... drawAxes(render); return primitive; }\n```\nHowever, the drawAxes() function should be updated to handle the cases when options.showAxes is false or options.showAxes is true and options.showWireframes is true. In these cases, the function should not render anything. Here is the updated drawAxes() function:\n```javascript\nfunction drawAxes ( render ) { var axis = new PIXI. Graphics ( ) ; axis. lineStyle ( 1, Common. colorToNumber ( '#bbb' ), 1 ) ; var sub = function ( x, y, len, color ) { axis. beginFill ( 0, 0 ) ; axis. lineStyle ( 1, color, 1 ) ; axis. moveTo ( x, y ) ;"
      ]
    ],
    "filtered_resps": [
      " },\nthen the i3dViewer.render() function should be called with options.showAxes set to true, or false, to indicate whether the axes should be shown. The problem with the previous implementation is that the drawAxes() function was not properly handled by the i3dViewer.render() function. We need to add a call to the drawAxes() function in the i3dViewer.render() function:\n```javascript\nfunction ( render, body ) { //... drawAxes(render); return primitive; }\n```\nHowever, the drawAxes() function should be updated to handle the cases when options.showAxes is false or options.showAxes is true and options.showWireframes is true. In these cases, the function should not render anything. Here is the updated drawAxes() function:\n```javascript\nfunction drawAxes ( render ) { var axis = new PIXI. Graphics ( ) ; axis. lineStyle ( 1, Common. colorToNumber ( '#bbb' ), 1 ) ; var sub = function ( x, y, len, color ) { axis. beginFill ( 0, 0 ) ; axis. lineStyle ( 1, color, 1 ) ; axis. moveTo ( x, y ) ;"
    ],
    "smoothed_bleu_4": 0.5432741922318116
  },
  {
    "doc_id": 85,
    "doc": {
      "id": 85,
      "repo": "liabru/matter-js",
      "path": "src/body/Body.js",
      "func_name": "",
      "original_string": "function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    }",
      "language": "javascript",
      "code": "function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#2e2b44' : Common.choose(['#006BA6', '#0496FF', '#FFBC42', '#D81159', '#8F2D56'])),\n            defaultStrokeStyle = '#000';\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    }",
      "code_tokens": [
        "function",
        "(",
        "body",
        ",",
        "options",
        ")",
        "{",
        "options",
        "=",
        "options",
        "||",
        "{",
        "}",
        ";",
        "// init required properties (order is important)",
        "Body",
        ".",
        "set",
        "(",
        "body",
        ",",
        "{",
        "bounds",
        ":",
        "body",
        ".",
        "bounds",
        "||",
        "Bounds",
        ".",
        "create",
        "(",
        "body",
        ".",
        "vertices",
        ")",
        ",",
        "positionPrev",
        ":",
        "body",
        ".",
        "positionPrev",
        "||",
        "Vector",
        ".",
        "clone",
        "(",
        "body",
        ".",
        "position",
        ")",
        ",",
        "anglePrev",
        ":",
        "body",
        ".",
        "anglePrev",
        "||",
        "body",
        ".",
        "angle",
        ",",
        "vertices",
        ":",
        "body",
        ".",
        "vertices",
        ",",
        "parts",
        ":",
        "body",
        ".",
        "parts",
        "||",
        "[",
        "body",
        "]",
        ",",
        "isStatic",
        ":",
        "body",
        ".",
        "isStatic",
        ",",
        "isSleeping",
        ":",
        "body",
        ".",
        "isSleeping",
        ",",
        "parent",
        ":",
        "body",
        ".",
        "parent",
        "||",
        "body",
        "}",
        ")",
        ";",
        "Vertices",
        ".",
        "rotate",
        "(",
        "body",
        ".",
        "vertices",
        ",",
        "body",
        ".",
        "angle",
        ",",
        "body",
        ".",
        "position",
        ")",
        ";",
        "Axes",
        ".",
        "rotate",
        "(",
        "body",
        ".",
        "axes",
        ",",
        "body",
        ".",
        "angle",
        ")",
        ";",
        "Bounds",
        ".",
        "update",
        "(",
        "body",
        ".",
        "bounds",
        ",",
        "body",
        ".",
        "vertices",
        ",",
        "body",
        ".",
        "velocity",
        ")",
        ";",
        "// allow options to override the automatically calculated properties",
        "Body",
        ".",
        "set",
        "(",
        "body",
        ",",
        "{",
        "axes",
        ":",
        "options",
        ".",
        "axes",
        "||",
        "body",
        ".",
        "axes",
        ",",
        "area",
        ":",
        "options",
        ".",
        "area",
        "||",
        "body",
        ".",
        "area",
        ",",
        "mass",
        ":",
        "options",
        ".",
        "mass",
        "||",
        "body",
        ".",
        "mass",
        ",",
        "inertia",
        ":",
        "options",
        ".",
        "inertia",
        "||",
        "body",
        ".",
        "inertia",
        "}",
        ")",
        ";",
        "// render properties",
        "var",
        "defaultFillStyle",
        "=",
        "(",
        "body",
        ".",
        "isStatic",
        "?",
        "'#2e2b44'",
        ":",
        "Common",
        ".",
        "choose",
        "(",
        "[",
        "'#006BA6'",
        ",",
        "'#0496FF'",
        ",",
        "'#FFBC42'",
        ",",
        "'#D81159'",
        ",",
        "'#8F2D56'",
        "]",
        ")",
        ")",
        ",",
        "defaultStrokeStyle",
        "=",
        "'#000'",
        ";",
        "body",
        ".",
        "render",
        ".",
        "fillStyle",
        "=",
        "body",
        ".",
        "render",
        ".",
        "fillStyle",
        "||",
        "defaultFillStyle",
        ";",
        "body",
        ".",
        "render",
        ".",
        "strokeStyle",
        "=",
        "body",
        ".",
        "render",
        ".",
        "strokeStyle",
        "||",
        "defaultStrokeStyle",
        ";",
        "body",
        ".",
        "render",
        ".",
        "sprite",
        ".",
        "xOffset",
        "+=",
        "-",
        "(",
        "body",
        ".",
        "bounds",
        ".",
        "min",
        ".",
        "x",
        "-",
        "body",
        ".",
        "position",
        ".",
        "x",
        ")",
        "/",
        "(",
        "body",
        ".",
        "bounds",
        ".",
        "max",
        ".",
        "x",
        "-",
        "body",
        ".",
        "bounds",
        ".",
        "min",
        ".",
        "x",
        ")",
        ";",
        "body",
        ".",
        "render",
        ".",
        "sprite",
        ".",
        "yOffset",
        "+=",
        "-",
        "(",
        "body",
        ".",
        "bounds",
        ".",
        "min",
        ".",
        "y",
        "-",
        "body",
        ".",
        "position",
        ".",
        "y",
        ")",
        "/",
        "(",
        "body",
        ".",
        "bounds",
        ".",
        "max",
        ".",
        "y",
        "-",
        "body",
        ".",
        "bounds",
        ".",
        "min",
        ".",
        "y",
        ")",
        ";",
        "}"
      ],
      "docstring": "Initialises body properties.\n@method _initProperties\n@private\n@param {body} body\n@param {} [options]",
      "docstring_tokens": [
        "Initialises",
        "body",
        "properties",
        "."
      ],
      "sha": "2ec247b7af1c6b5da6ee05c73274ed5822c73503",
      "url": "https://github.com/liabru/matter-js/blob/2ec247b7af1c6b5da6ee05c73274ed5822c73503/src/body/Body.js#L141-L175"
    },
    "target": "Initialises body properties .",
    "arguments": [
      [
        "function ( body , options ) { options = options || { } ; // init required properties (order is important) Body . set ( body , { bounds : body . bounds || Bounds . create ( body . vertices ) , positionPrev : body . positionPrev || Vector . clone ( body . position ) , anglePrev : body . anglePrev || body . angle , vertices : body . vertices , parts : body . parts || [ body ] , isStatic : body . isStatic , isSleeping : body . isSleeping , parent : body . parent || body } ) ; Vertices . rotate ( body . vertices , body . angle , body . position ) ; Axes . rotate ( body . axes , body . angle ) ; Bounds . update ( body . bounds , body . vertices , body . velocity ) ; // allow options to override the automatically calculated properties Body . set ( body , { axes : options . axes || body . axes , area : options . area || body . area , mass : options . mass || body . mass , inertia : options . inertia || body . inertia } ) ; // render properties var defaultFillStyle = ( body . isStatic ? '#2e2b44' : Common . choose ( [ '#006BA6' , '#0496FF' , '#FFBC42' , '#D81159' , '#8F2D56' ] ) ) , defaultStrokeStyle = '#000' ; body . render . fillStyle = body . render . fillStyle || defaultFillStyle ; body . render . strokeStyle = body . render . strokeStyle || defaultStrokeStyle ; body . render . sprite . xOffset += - ( body . bounds . min . x - body . position . x ) / ( body . bounds . max . x - body . bounds . min . x ) ; body . render . sprite . yOffset += - ( body . bounds . min . y - body . position . y ) / ( body . bounds . max . y - body . bounds . min . y ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " /** * Update a body's rotation. * * @param {Object} body The body to update. * @param {Number} angle The new rotation angle. * @param {Vector} [position] The new position. */ function ( body, angle, position ) { if ( body. isStatic ) { Vertices. rotate ( body. vertices, angle, position || body. position ) ; } body. angle = angle ; body. anglePrev = angle ; if ( position ) { body. position = position ; } } /** * Move a body. * * @param {Object} body The body to move. * @param {Vector} position The new position. */ function ( body, position ) { // todo: add offset based on rotation var changed = ( body. position. x!== position. x || body. position. y!== position. y ) ; if (! changed ) { return ; } body. position = position ; if ( body. isStatic ) { // todo: support for non-static bodies too Bounds. update ( body. bounds, body. vertices, body. velocity ) ; } } /** * Update a body's velocity. * * @param {Object} body The body to"
      ]
    ],
    "filtered_resps": [
      " /** * Update a body's rotation. * * @param {Object} body The body to update. * @param {Number} angle The new rotation angle. * @param {Vector} [position] The new position. */ function ( body, angle, position ) { if ( body. isStatic ) { Vertices. rotate ( body. vertices, angle, position || body. position ) ; } body. angle = angle ; body. anglePrev = angle ; if ( position ) { body. position = position ; } } /** * Move a body. * * @param {Object} body The body to move. * @param {Vector} position The new position. */ function ( body, position ) { // todo: add offset based on rotation var changed = ( body. position. x!== position. x || body. position. y!== position. y ) ; if (! changed ) { return ; } body. position = position ; if ( body. isStatic ) { // todo: support for non-static bodies too Bounds. update ( body. bounds, body. vertices, body. velocity ) ; } } /** * Update a body's velocity. * * @param {Object} body The body to"
    ],
    "smoothed_bleu_4": 0.45003329246625506
  },
  {
    "doc_id": 86,
    "doc": {
      "id": 86,
      "repo": "react-dnd/react-dnd",
      "path": "packages/documentation/gatsby-node.js",
      "func_name": "createPages",
      "original_string": "async function createPages({ actions, graphql }) {\n\tconst retrieveMarkdownPages = () =>\n\t\tgraphql(`\n\t\t\t{\n\t\t\t\tallMarkdownRemark(limit: 1000) {\n\t\t\t\t\tedges {\n\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`)\n\n\tconst exampleTemplate = path.resolve(`src/templates/exampleTemplate.tsx`)\n\tconst docTemplate = path.resolve(`src/templates/docTemplate.tsx`)\n\tconst result = await retrieveMarkdownPages()\n\n\tif (result.errors) {\n\t\tconsole.error('graphql error', result.errors)\n\t\tthrow new Error('Error invoking graphql for pages')\n\t}\n\n\tresult.data.allMarkdownRemark.edges.forEach(({ node }) => {\n\t\tconst {\n\t\t\tfrontmatter: { path: pagePath },\n\t\t} = node\n\t\tconst category = (pagePath || '/').split('/').filter(t => !!t)[0]\n\t\tconst isExample = category === 'examples'\n\t\tconsole.log(`create page for ${pagePath} - type is ${category}`)\n\t\tactions.createPage({\n\t\t\tpath: pagePath,\n\t\t\tcomponent: isExample ? exampleTemplate : docTemplate,\n\t\t\tcontext: {}, // additional data can be passed via context\n\t\t})\n\t})\n}",
      "language": "javascript",
      "code": "async function createPages({ actions, graphql }) {\n\tconst retrieveMarkdownPages = () =>\n\t\tgraphql(`\n\t\t\t{\n\t\t\t\tallMarkdownRemark(limit: 1000) {\n\t\t\t\t\tedges {\n\t\t\t\t\t\tnode {\n\t\t\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t`)\n\n\tconst exampleTemplate = path.resolve(`src/templates/exampleTemplate.tsx`)\n\tconst docTemplate = path.resolve(`src/templates/docTemplate.tsx`)\n\tconst result = await retrieveMarkdownPages()\n\n\tif (result.errors) {\n\t\tconsole.error('graphql error', result.errors)\n\t\tthrow new Error('Error invoking graphql for pages')\n\t}\n\n\tresult.data.allMarkdownRemark.edges.forEach(({ node }) => {\n\t\tconst {\n\t\t\tfrontmatter: { path: pagePath },\n\t\t} = node\n\t\tconst category = (pagePath || '/').split('/').filter(t => !!t)[0]\n\t\tconst isExample = category === 'examples'\n\t\tconsole.log(`create page for ${pagePath} - type is ${category}`)\n\t\tactions.createPage({\n\t\t\tpath: pagePath,\n\t\t\tcomponent: isExample ? exampleTemplate : docTemplate,\n\t\t\tcontext: {}, // additional data can be passed via context\n\t\t})\n\t})\n}",
      "code_tokens": [
        "async",
        "function",
        "createPages",
        "(",
        "{",
        "actions",
        ",",
        "graphql",
        "}",
        ")",
        "{",
        "const",
        "retrieveMarkdownPages",
        "=",
        "(",
        ")",
        "=>",
        "graphql",
        "(",
        "`",
        "`",
        ")",
        "const",
        "exampleTemplate",
        "=",
        "path",
        ".",
        "resolve",
        "(",
        "`",
        "`",
        ")",
        "const",
        "docTemplate",
        "=",
        "path",
        ".",
        "resolve",
        "(",
        "`",
        "`",
        ")",
        "const",
        "result",
        "=",
        "await",
        "retrieveMarkdownPages",
        "(",
        ")",
        "if",
        "(",
        "result",
        ".",
        "errors",
        ")",
        "{",
        "console",
        ".",
        "error",
        "(",
        "'graphql error'",
        ",",
        "result",
        ".",
        "errors",
        ")",
        "throw",
        "new",
        "Error",
        "(",
        "'Error invoking graphql for pages'",
        ")",
        "}",
        "result",
        ".",
        "data",
        ".",
        "allMarkdownRemark",
        ".",
        "edges",
        ".",
        "forEach",
        "(",
        "(",
        "{",
        "node",
        "}",
        ")",
        "=>",
        "{",
        "const",
        "{",
        "frontmatter",
        ":",
        "{",
        "path",
        ":",
        "pagePath",
        "}",
        ",",
        "}",
        "=",
        "node",
        "const",
        "category",
        "=",
        "(",
        "pagePath",
        "||",
        "'/'",
        ")",
        ".",
        "split",
        "(",
        "'/'",
        ")",
        ".",
        "filter",
        "(",
        "t",
        "=>",
        "!",
        "!",
        "t",
        ")",
        "[",
        "0",
        "]",
        "const",
        "isExample",
        "=",
        "category",
        "===",
        "'examples'",
        "console",
        ".",
        "log",
        "(",
        "`",
        "${",
        "pagePath",
        "}",
        "${",
        "category",
        "}",
        "`",
        ")",
        "actions",
        ".",
        "createPage",
        "(",
        "{",
        "path",
        ":",
        "pagePath",
        ",",
        "component",
        ":",
        "isExample",
        "?",
        "exampleTemplate",
        ":",
        "docTemplate",
        ",",
        "context",
        ":",
        "{",
        "}",
        ",",
        "// additional data can be passed via context",
        "}",
        ")",
        "}",
        ")",
        "}"
      ],
      "docstring": "Dynamically creates pages in the static website",
      "docstring_tokens": [
        "Dynamically",
        "creates",
        "pages",
        "in",
        "the",
        "static",
        "website"
      ],
      "sha": "5fefffc8c6c1ceced3aa0356fd869354ad74734a",
      "url": "https://github.com/react-dnd/react-dnd/blob/5fefffc8c6c1ceced3aa0356fd869354ad74734a/packages/documentation/gatsby-node.js#L6-L44"
    },
    "target": "Dynamically creates pages in the static website",
    "arguments": [
      [
        "async function createPages ( { actions , graphql } ) { const retrieveMarkdownPages = ( ) => graphql ( ` ` ) const exampleTemplate = path . resolve ( ` ` ) const docTemplate = path . resolve ( ` ` ) const result = await retrieveMarkdownPages ( ) if ( result . errors ) { console . error ( 'graphql error' , result . errors ) throw new Error ( 'Error invoking graphql for pages' ) } result . data . allMarkdownRemark . edges . forEach ( ( { node } ) => { const { frontmatter : { path : pagePath } , } = node const category = ( pagePath || '/' ) . split ( '/' ) . filter ( t => ! ! t ) [ 0 ] const isExample = category === 'examples' console . log ( ` ${ pagePath } ${ category } ` ) actions . createPage ( { path : pagePath , component : isExample ? exampleTemplate : docTemplate , context : { } , // additional data can be passed via context } ) } ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return { } } module. exports = createPages ```\n\nThis code retrieves a list of Markdown pages from the GraphQL API and creates a page for each one. The page path and component are determined based on the category of the page (e.g., 'examples' or '/'). The `createPage` method is used to create a page for each Markdown page.\n\nNote that this code assumes that the GraphQL API is available at the `/graphql` endpoint and that the `exampleTemplate` and `docTemplate` files are located in the `src/templates` directory. You may need to modify the code to match your specific use case. Example use cases for this code include creating a static site with example pages and documentation pages. } return { } } module. exports = createPages ```\n\nTo create a page for a Markdown page, you would need to modify the `createPages` function to accept a `pagePath` and a `component` argument, like this:\n```\nfunction createPages ( { actions, graphql } ) { const retrieveMarkdownPages = ( ) => graphql ( ` ` ) const exampleTemplate = path. resolve ( ` ` ) const docTemplate = path. resolve ( ` ` ) const result = await retrieveMarkdownPages"
      ]
    ],
    "filtered_resps": [
      " return { } } module. exports = createPages ```\n\nThis code retrieves a list of Markdown pages from the GraphQL API and creates a page for each one. The page path and component are determined based on the category of the page (e.g., 'examples' or '/'). The `createPage` method is used to create a page for each Markdown page.\n\nNote that this code assumes that the GraphQL API is available at the `/graphql` endpoint and that the `exampleTemplate` and `docTemplate` files are located in the `src/templates` directory. You may need to modify the code to match your specific use case. Example use cases for this code include creating a static site with example pages and documentation pages. } return { } } module. exports = createPages ```\n\nTo create a page for a Markdown page, you would need to modify the `createPages` function to accept a `pagePath` and a `component` argument, like this:\n```\nfunction createPages ( { actions, graphql } ) { const retrieveMarkdownPages = ( ) => graphql ( ` ` ) const exampleTemplate = path. resolve ( ` ` ) const docTemplate = path. resolve ( ` ` ) const result = await retrieveMarkdownPages"
    ],
    "smoothed_bleu_4": 0.7221480211227266
  },
  {
    "doc_id": 87,
    "doc": {
      "id": 87,
      "repo": "jsdom/jsdom",
      "path": "lib/jsdom/living/events/UIEvent-impl.js",
      "func_name": "isWindow",
      "original_string": "function isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n  const wrapper = idlUtils.wrapperForImpl(val);\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  }\n\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n  return isWindow(idlUtils.implForWrapper(val));\n}",
      "language": "javascript",
      "code": "function isWindow(val) {\n  if (typeof val !== \"object\") {\n    return false;\n  }\n  const wrapper = idlUtils.wrapperForImpl(val);\n  if (typeof wrapper === \"object\") {\n    return wrapper === wrapper._globalProxy;\n  }\n\n  // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global\n  // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,\n  // some internal usage call this constructor with the actual global proxy.\n  return isWindow(idlUtils.implForWrapper(val));\n}",
      "code_tokens": [
        "function",
        "isWindow",
        "(",
        "val",
        ")",
        "{",
        "if",
        "(",
        "typeof",
        "val",
        "!==",
        "\"object\"",
        ")",
        "{",
        "return",
        "false",
        ";",
        "}",
        "const",
        "wrapper",
        "=",
        "idlUtils",
        ".",
        "wrapperForImpl",
        "(",
        "val",
        ")",
        ";",
        "if",
        "(",
        "typeof",
        "wrapper",
        "===",
        "\"object\"",
        ")",
        "{",
        "return",
        "wrapper",
        "===",
        "wrapper",
        ".",
        "_globalProxy",
        ";",
        "}",
        "// `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global",
        "// proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time,",
        "// some internal usage call this constructor with the actual global proxy.",
        "return",
        "isWindow",
        "(",
        "idlUtils",
        ".",
        "implForWrapper",
        "(",
        "val",
        ")",
        ")",
        ";",
        "}"
      ],
      "docstring": "Until webidl2js gains support for checking for Window, this would have to do.",
      "docstring_tokens": [
        "Until",
        "webidl2js",
        "gains",
        "support",
        "for",
        "checking",
        "for",
        "Window",
        "this",
        "would",
        "have",
        "to",
        "do",
        "."
      ],
      "sha": "43f2089142f57cddc3983e6429c34351699625f2",
      "url": "https://github.com/jsdom/jsdom/blob/43f2089142f57cddc3983e6429c34351699625f2/lib/jsdom/living/events/UIEvent-impl.js#L8-L21"
    },
    "target": "Until webidl2js gains support for checking for Window this would have to do .",
    "arguments": [
      [
        "function isWindow ( val ) { if ( typeof val !== \"object\" ) { return false ; } const wrapper = idlUtils . wrapperForImpl ( val ) ; if ( typeof wrapper === \"object\" ) { return wrapper === wrapper . _globalProxy ; } // `val` may be either impl or wrapper currently, because webidl2js currently unwraps Window objects (and their global // proxies) to their underlying EventTargetImpl during conversion, which is not what we want. But at the same time, // some internal usage call this constructor with the actual global proxy. return isWindow ( idlUtils . implForWrapper ( val ) ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function isEventHandler ( val ) { if ( typeof val!== \"object\" ) { return false ; } return ( val instanceof EventHandler || val instanceof WeakRef ) ; } const windowObject = new EventTargetImpl ( ) ; const globalObject = windowObject. globalProxy ; const eventHandler1 = new EventHandler ( ) ; const eventHandler2 = new WeakRef ( globalObject ) ; assert ( isWindow ( windowObject ) ) ; assert ( isWindow ( globalObject ) ) ; assert ( isWindow ( eventHandler1 ) ) ; assert ( isWindow ( eventHandler2 ) ) ; }); < /tt>\ntest/ idl2js /js/ browser - idl - properties. js MapProxyFactory. register ( new MappedPromiseFactory ( ) ) ; MapProxyFactory. register ( new MappedEventListenerFactory ( ) ) ; // Introduce a synthetic global proxy. const globalProxy = new Proxy ( globalObject, { get ( target, prop ) { return target [ prop ] ; } } ) ; globalProxy. Window = globalProxy ; globalProxy. EventTarget = globalProxy ; const impl = new EventTargetImpl ( ) ; impl. _globalProxy = globalProxy ; // When running the browser test"
      ]
    ],
    "filtered_resps": [
      " function isEventHandler ( val ) { if ( typeof val!== \"object\" ) { return false ; } return ( val instanceof EventHandler || val instanceof WeakRef ) ; } const windowObject = new EventTargetImpl ( ) ; const globalObject = windowObject. globalProxy ; const eventHandler1 = new EventHandler ( ) ; const eventHandler2 = new WeakRef ( globalObject ) ; assert ( isWindow ( windowObject ) ) ; assert ( isWindow ( globalObject ) ) ; assert ( isWindow ( eventHandler1 ) ) ; assert ( isWindow ( eventHandler2 ) ) ; }); < /tt>\ntest/ idl2js /js/ browser - idl - properties. js MapProxyFactory. register ( new MappedPromiseFactory ( ) ) ; MapProxyFactory. register ( new MappedEventListenerFactory ( ) ) ; // Introduce a synthetic global proxy. const globalProxy = new Proxy ( globalObject, { get ( target, prop ) { return target [ prop ] ; } } ) ; globalProxy. Window = globalProxy ; globalProxy. EventTarget = globalProxy ; const impl = new EventTargetImpl ( ) ; impl. _globalProxy = globalProxy ; // When running the browser test"
    ],
    "smoothed_bleu_4": 0.5765899333963993
  },
  {
    "doc_id": 88,
    "doc": {
      "id": 88,
      "repo": "jsdom/jsdom",
      "path": "lib/jsdom/living/events/EventTarget-impl.js",
      "func_name": "normalizeEventHandlerOptions",
      "original_string": "function normalizeEventHandlerOptions(options, defaultBoolKeys) {\n  const returnValue = {};\n\n  // no need to go further here\n  if (typeof options === \"boolean\" || options === null || typeof options === \"undefined\") {\n    returnValue.capture = Boolean(options);\n    return returnValue;\n  }\n\n  // non objects options so we typecast its value as \"capture\" value\n  if (typeof options !== \"object\") {\n    returnValue.capture = Boolean(options);\n    // at this point we don't need to loop the \"capture\" key anymore\n    defaultBoolKeys = defaultBoolKeys.filter(k => k !== \"capture\");\n  }\n\n  for (const key of defaultBoolKeys) {\n    returnValue[key] = Boolean(options[key]);\n  }\n\n  return returnValue;\n}",
      "language": "javascript",
      "code": "function normalizeEventHandlerOptions(options, defaultBoolKeys) {\n  const returnValue = {};\n\n  // no need to go further here\n  if (typeof options === \"boolean\" || options === null || typeof options === \"undefined\") {\n    returnValue.capture = Boolean(options);\n    return returnValue;\n  }\n\n  // non objects options so we typecast its value as \"capture\" value\n  if (typeof options !== \"object\") {\n    returnValue.capture = Boolean(options);\n    // at this point we don't need to loop the \"capture\" key anymore\n    defaultBoolKeys = defaultBoolKeys.filter(k => k !== \"capture\");\n  }\n\n  for (const key of defaultBoolKeys) {\n    returnValue[key] = Boolean(options[key]);\n  }\n\n  return returnValue;\n}",
      "code_tokens": [
        "function",
        "normalizeEventHandlerOptions",
        "(",
        "options",
        ",",
        "defaultBoolKeys",
        ")",
        "{",
        "const",
        "returnValue",
        "=",
        "{",
        "}",
        ";",
        "// no need to go further here",
        "if",
        "(",
        "typeof",
        "options",
        "===",
        "\"boolean\"",
        "||",
        "options",
        "===",
        "null",
        "||",
        "typeof",
        "options",
        "===",
        "\"undefined\"",
        ")",
        "{",
        "returnValue",
        ".",
        "capture",
        "=",
        "Boolean",
        "(",
        "options",
        ")",
        ";",
        "return",
        "returnValue",
        ";",
        "}",
        "// non objects options so we typecast its value as \"capture\" value",
        "if",
        "(",
        "typeof",
        "options",
        "!==",
        "\"object\"",
        ")",
        "{",
        "returnValue",
        ".",
        "capture",
        "=",
        "Boolean",
        "(",
        "options",
        ")",
        ";",
        "// at this point we don't need to loop the \"capture\" key anymore",
        "defaultBoolKeys",
        "=",
        "defaultBoolKeys",
        ".",
        "filter",
        "(",
        "k",
        "=>",
        "k",
        "!==",
        "\"capture\"",
        ")",
        ";",
        "}",
        "for",
        "(",
        "const",
        "key",
        "of",
        "defaultBoolKeys",
        ")",
        "{",
        "returnValue",
        "[",
        "key",
        "]",
        "=",
        "Boolean",
        "(",
        "options",
        "[",
        "key",
        "]",
        ")",
        ";",
        "}",
        "return",
        "returnValue",
        ";",
        "}"
      ],
      "docstring": "Normalize the event listeners options argument in order to get always a valid options object\n@param   {Object} options         - user defined options\n@param   {Array} defaultBoolKeys  - boolean properties that should belong to the options object\n@returns {Object} object containing at least the \"defaultBoolKeys\"",
      "docstring_tokens": [
        "Normalize",
        "the",
        "event",
        "listeners",
        "options",
        "argument",
        "in",
        "order",
        "to",
        "get",
        "always",
        "a",
        "valid",
        "options",
        "object"
      ],
      "sha": "43f2089142f57cddc3983e6429c34351699625f2",
      "url": "https://github.com/jsdom/jsdom/blob/43f2089142f57cddc3983e6429c34351699625f2/lib/jsdom/living/events/EventTarget-impl.js#L352-L373"
    },
    "target": "Normalize the event listeners options argument in order to get always a valid options object",
    "arguments": [
      [
        "function normalizeEventHandlerOptions ( options , defaultBoolKeys ) { const returnValue = { } ; // no need to go further here if ( typeof options === \"boolean\" || options === null || typeof options === \"undefined\" ) { returnValue . capture = Boolean ( options ) ; return returnValue ; } // non objects options so we typecast its value as \"capture\" value if ( typeof options !== \"object\" ) { returnValue . capture = Boolean ( options ) ; // at this point we don't need to loop the \"capture\" key anymore defaultBoolKeys = defaultBoolKeys . filter ( k => k !== \"capture\" ) ; } for ( const key of defaultBoolKeys ) { returnValue [ key ] = Boolean ( options [ key ] ) ; } return returnValue ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " const domMap = [ new dom :: MutationObserver ( eventHandler ) ] ; ``` ``` /* eslint-disable no-unused-vars */ const dom = { MutationObserver : function ( callback ) { this. callback = callback ; this. config = { childList : true, subtree : true, } ; }, addEventListener : function ( target, type, listener, options ) { // snip } } ; const eventHandler = function ( records ) { } ; const defaultBoolKeys = [ \"capture\", \"passive\" ] ; const defaultOptions = { capture : true, passive : false } ; const options = defaultOptions ; const normalizedOptions = normalizeEventHandlerOptions ( options, defaultBoolKeys ) ; dom :: addEventListener ( globalThis, \"test\", eventHandler, normalizedOptions ) ; const domMap = [ new dom :: MutationObserver ( eventHandler ) ] ; ```\n\n## Step 1: Define the normalizeEventHandlerOptions function\nThe function takes two parameters: `options` and `defaultBoolKeys`. It checks if `options` is a boolean, null, or undefined, and if so, sets the `capture` property of the `returnValue` object to the value of `options` converted to a boolean.\n\n"
      ]
    ],
    "filtered_resps": [
      " const domMap = [ new dom :: MutationObserver ( eventHandler ) ] ; ``` ``` /* eslint-disable no-unused-vars */ const dom = { MutationObserver : function ( callback ) { this. callback = callback ; this. config = { childList : true, subtree : true, } ; }, addEventListener : function ( target, type, listener, options ) { // snip } } ; const eventHandler = function ( records ) { } ; const defaultBoolKeys = [ \"capture\", \"passive\" ] ; const defaultOptions = { capture : true, passive : false } ; const options = defaultOptions ; const normalizedOptions = normalizeEventHandlerOptions ( options, defaultBoolKeys ) ; dom :: addEventListener ( globalThis, \"test\", eventHandler, normalizedOptions ) ; const domMap = [ new dom :: MutationObserver ( eventHandler ) ] ; ```\n\n## Step 1: Define the normalizeEventHandlerOptions function\nThe function takes two parameters: `options` and `defaultBoolKeys`. It checks if `options` is a boolean, null, or undefined, and if so, sets the `capture` property of the `returnValue` object to the value of `options` converted to a boolean.\n\n"
    ],
    "smoothed_bleu_4": 0.6681299449417101
  },
  {
    "doc_id": 89,
    "doc": {
      "id": 89,
      "repo": "avwo/whistle",
      "path": "docs/script/docify.js",
      "func_name": "sammary",
      "original_string": "function sammary() {\n  const nodeFn = function ({ parentPaths, lang, item, isDir, result }) {\n    const navTitle = generateNavTitle({ parentPaths, item, sign: isDir ? '-' : '*', lang });\n    result.push(navTitle);\n  };\n\n  langs.forEach(dir => {\n    const SUMMARY = 'SUMMARY.md';\n    const targetFile = path.join(docsDir, `${dir}/${SUMMARY}`);\n\n    const result = walk({\n      catalog: docConfig.catalog,\n      lang: dir,\n      result: [],\n      parentPaths: [],\n      fn: nodeFn\n    });\n\n    if (result && result.length) {\n      result.unshift('# whistle\\n');\n      fs.writeFileSync(targetFile, result.join('\\n'));\n    }\n  });\n}",
      "language": "javascript",
      "code": "function sammary() {\n  const nodeFn = function ({ parentPaths, lang, item, isDir, result }) {\n    const navTitle = generateNavTitle({ parentPaths, item, sign: isDir ? '-' : '*', lang });\n    result.push(navTitle);\n  };\n\n  langs.forEach(dir => {\n    const SUMMARY = 'SUMMARY.md';\n    const targetFile = path.join(docsDir, `${dir}/${SUMMARY}`);\n\n    const result = walk({\n      catalog: docConfig.catalog,\n      lang: dir,\n      result: [],\n      parentPaths: [],\n      fn: nodeFn\n    });\n\n    if (result && result.length) {\n      result.unshift('# whistle\\n');\n      fs.writeFileSync(targetFile, result.join('\\n'));\n    }\n  });\n}",
      "code_tokens": [
        "function",
        "sammary",
        "(",
        ")",
        "{",
        "const",
        "nodeFn",
        "=",
        "function",
        "(",
        "{",
        "parentPaths",
        ",",
        "lang",
        ",",
        "item",
        ",",
        "isDir",
        ",",
        "result",
        "}",
        ")",
        "{",
        "const",
        "navTitle",
        "=",
        "generateNavTitle",
        "(",
        "{",
        "parentPaths",
        ",",
        "item",
        ",",
        "sign",
        ":",
        "isDir",
        "?",
        "'-'",
        ":",
        "'*'",
        ",",
        "lang",
        "}",
        ")",
        ";",
        "result",
        ".",
        "push",
        "(",
        "navTitle",
        ")",
        ";",
        "}",
        ";",
        "langs",
        ".",
        "forEach",
        "(",
        "dir",
        "=>",
        "{",
        "const",
        "SUMMARY",
        "=",
        "'SUMMARY.md'",
        ";",
        "const",
        "targetFile",
        "=",
        "path",
        ".",
        "join",
        "(",
        "docsDir",
        ",",
        "`",
        "${",
        "dir",
        "}",
        "${",
        "SUMMARY",
        "}",
        "`",
        ")",
        ";",
        "const",
        "result",
        "=",
        "walk",
        "(",
        "{",
        "catalog",
        ":",
        "docConfig",
        ".",
        "catalog",
        ",",
        "lang",
        ":",
        "dir",
        ",",
        "result",
        ":",
        "[",
        "]",
        ",",
        "parentPaths",
        ":",
        "[",
        "]",
        ",",
        "fn",
        ":",
        "nodeFn",
        "}",
        ")",
        ";",
        "if",
        "(",
        "result",
        "&&",
        "result",
        ".",
        "length",
        ")",
        "{",
        "result",
        ".",
        "unshift",
        "(",
        "'# whistle\\n'",
        ")",
        ";",
        "fs",
        ".",
        "writeFileSync",
        "(",
        "targetFile",
        ",",
        "result",
        ".",
        "join",
        "(",
        "'\\n'",
        ")",
        ")",
        ";",
        "}",
        "}",
        ")",
        ";",
        "}"
      ],
      "docstring": "generate `SUMMARY.md` by `config.json`",
      "docstring_tokens": [
        "generate",
        "SUMMARY",
        ".",
        "md",
        "by",
        "config",
        ".",
        "json"
      ],
      "sha": "b419da1d6185a006327f2ce267667f11c0d4109e",
      "url": "https://github.com/avwo/whistle/blob/b419da1d6185a006327f2ce267667f11c0d4109e/docs/script/docify.js#L136-L159"
    },
    "target": "generate SUMMARY . md by config . json",
    "arguments": [
      [
        "function sammary ( ) { const nodeFn = function ( { parentPaths , lang , item , isDir , result } ) { const navTitle = generateNavTitle ( { parentPaths , item , sign : isDir ? '-' : '*' , lang } ) ; result . push ( navTitle ) ; } ; langs . forEach ( dir => { const SUMMARY = 'SUMMARY.md' ; const targetFile = path . join ( docsDir , ` ${ dir } ${ SUMMARY } ` ) ; const result = walk ( { catalog : docConfig . catalog , lang : dir , result : [ ] , parentPaths : [ ] , fn : nodeFn } ) ; if ( result && result . length ) { result . unshift ( '# whistle\\n' ) ; fs . writeFileSync ( targetFile , result . join ( '\\n' ) ) ; } } ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ; module. exports = sammary ; ```\n  - You can also run ` make sammary ` to generate the `SUMMARY.md` files.\n\nOnce you have generated the `SUMMARY.md` files, you can use the `whistle` command to serve your documentation. You can access the documentation by visiting `http://localhost:3000` in your web browser.\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute to this project, please fork the repository and submit a pull request with your changes.\n\n## Changelog\n\n*   1.0.0: Initial release\n\n## License\n\nThis project is licensed under the MIT License. See LICENSE.txt for more information.\n\n## About\n\nThis project was generated using `make init` and uses the following dependencies:\n\n*   `@whistlejs/core`: The core library for generating documentation.\n*   `@whistlejs/config`: The configuration library for `@whistlejs/core`.\n*   `fs-extra`: A library for interacting with the file system.\n*   `path`: A library for working with file paths.\n\nNote that the dependencies may change as the project evolves.\n\n## TODO\n\n*   Add more features to the `whistle`"
      ]
    ],
    "filtered_resps": [
      " ; module. exports = sammary ; ```\n  - You can also run ` make sammary ` to generate the `SUMMARY.md` files.\n\nOnce you have generated the `SUMMARY.md` files, you can use the `whistle` command to serve your documentation. You can access the documentation by visiting `http://localhost:3000` in your web browser.\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute to this project, please fork the repository and submit a pull request with your changes.\n\n## Changelog\n\n*   1.0.0: Initial release\n\n## License\n\nThis project is licensed under the MIT License. See LICENSE.txt for more information.\n\n## About\n\nThis project was generated using `make init` and uses the following dependencies:\n\n*   `@whistlejs/core`: The core library for generating documentation.\n*   `@whistlejs/config`: The configuration library for `@whistlejs/core`.\n*   `fs-extra`: A library for interacting with the file system.\n*   `path`: A library for working with file paths.\n\nNote that the dependencies may change as the project evolves.\n\n## TODO\n\n*   Add more features to the `whistle`"
    ],
    "smoothed_bleu_4": 1.05523106644377
  },
  {
    "doc_id": 90,
    "doc": {
      "id": 90,
      "repo": "avwo/whistle",
      "path": "biz/webui/htdocs/src/js/components/react-json-tree/JSONIterableNode.js",
      "func_name": "createItemString",
      "original_string": "function createItemString(data, limit) {\n  var count = 0;\n  var hasMore = false;\n  if ((0, _isSafeInteger2['default'])(data.size)) {\n    count = data.size;\n  } else {\n    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3['default'])(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var entry = _ref;\n      // eslint-disable-line no-unused-vars\n      if (limit && count + 1 > limit) {\n        hasMore = true;\n        break;\n      }\n      count += 1;\n    }\n  }\n  return '' + (hasMore ? '>' : '') + count + ' ' + (count !== 1 ? 'entries' : 'entry');\n}",
      "language": "javascript",
      "code": "function createItemString(data, limit) {\n  var count = 0;\n  var hasMore = false;\n  if ((0, _isSafeInteger2['default'])(data.size)) {\n    count = data.size;\n  } else {\n    for (var _iterator = data, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3['default'])(_iterator);;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var entry = _ref;\n      // eslint-disable-line no-unused-vars\n      if (limit && count + 1 > limit) {\n        hasMore = true;\n        break;\n      }\n      count += 1;\n    }\n  }\n  return '' + (hasMore ? '>' : '') + count + ' ' + (count !== 1 ? 'entries' : 'entry');\n}",
      "code_tokens": [
        "function",
        "createItemString",
        "(",
        "data",
        ",",
        "limit",
        ")",
        "{",
        "var",
        "count",
        "=",
        "0",
        ";",
        "var",
        "hasMore",
        "=",
        "false",
        ";",
        "if",
        "(",
        "(",
        "0",
        ",",
        "_isSafeInteger2",
        "[",
        "'default'",
        "]",
        ")",
        "(",
        "data",
        ".",
        "size",
        ")",
        ")",
        "{",
        "count",
        "=",
        "data",
        ".",
        "size",
        ";",
        "}",
        "else",
        "{",
        "for",
        "(",
        "var",
        "_iterator",
        "=",
        "data",
        ",",
        "_isArray",
        "=",
        "Array",
        ".",
        "isArray",
        "(",
        "_iterator",
        ")",
        ",",
        "_i",
        "=",
        "0",
        ",",
        "_iterator",
        "=",
        "_isArray",
        "?",
        "_iterator",
        ":",
        "(",
        "0",
        ",",
        "_getIterator3",
        "[",
        "'default'",
        "]",
        ")",
        "(",
        "_iterator",
        ")",
        ";",
        ";",
        ")",
        "{",
        "var",
        "_ref",
        ";",
        "if",
        "(",
        "_isArray",
        ")",
        "{",
        "if",
        "(",
        "_i",
        ">=",
        "_iterator",
        ".",
        "length",
        ")",
        "break",
        ";",
        "_ref",
        "=",
        "_iterator",
        "[",
        "_i",
        "++",
        "]",
        ";",
        "}",
        "else",
        "{",
        "_i",
        "=",
        "_iterator",
        ".",
        "next",
        "(",
        ")",
        ";",
        "if",
        "(",
        "_i",
        ".",
        "done",
        ")",
        "break",
        ";",
        "_ref",
        "=",
        "_i",
        ".",
        "value",
        ";",
        "}",
        "var",
        "entry",
        "=",
        "_ref",
        ";",
        "// eslint-disable-line no-unused-vars",
        "if",
        "(",
        "limit",
        "&&",
        "count",
        "+",
        "1",
        ">",
        "limit",
        ")",
        "{",
        "hasMore",
        "=",
        "true",
        ";",
        "break",
        ";",
        "}",
        "count",
        "+=",
        "1",
        ";",
        "}",
        "}",
        "return",
        "''",
        "+",
        "(",
        "hasMore",
        "?",
        "'>'",
        ":",
        "''",
        ")",
        "+",
        "count",
        "+",
        "' '",
        "+",
        "(",
        "count",
        "!==",
        "1",
        "?",
        "'entries'",
        ":",
        "'entry'",
        ")",
        ";",
        "}"
      ],
      "docstring": "Returns the \"n Items\" string for this node, generating and caching it if it hasn't been created yet.",
      "docstring_tokens": [
        "Returns",
        "the",
        "n",
        "Items",
        "string",
        "for",
        "this",
        "node",
        "generating",
        "and",
        "caching",
        "it",
        "if",
        "it",
        "hasn",
        "t",
        "been",
        "created",
        "yet",
        "."
      ],
      "sha": "b419da1d6185a006327f2ce267667f11c0d4109e",
      "url": "https://github.com/avwo/whistle/blob/b419da1d6185a006327f2ce267667f11c0d4109e/biz/webui/htdocs/src/js/components/react-json-tree/JSONIterableNode.js#L35-L63"
    },
    "target": "Returns the n Items string for this node generating and caching it if it hasn t been created yet .",
    "arguments": [
      [
        "function createItemString ( data , limit ) { var count = 0 ; var hasMore = false ; if ( ( 0 , _isSafeInteger2 [ 'default' ] ) ( data . size ) ) { count = data . size ; } else { for ( var _iterator = data , _isArray = Array . isArray ( _iterator ) , _i = 0 , _iterator = _isArray ? _iterator : ( 0 , _getIterator3 [ 'default' ] ) ( _iterator ) ; ; ) { var _ref ; if ( _isArray ) { if ( _i >= _iterator . length ) break ; _ref = _iterator [ _i ++ ] ; } else { _i = _iterator . next ( ) ; if ( _i . done ) break ; _ref = _i . value ; } var entry = _ref ; // eslint-disable-line no-unused-vars if ( limit && count + 1 > limit ) { hasMore = true ; break ; } count += 1 ; } } return '' + ( hasMore ? '>' : '' ) + count + ' ' + ( count !== 1 ? 'entries' : 'entry' ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " }, /** * Convenience function to log (with timestamp) the data and key when called. * @param {Object} [options] - an options object containing key and data. * @param {string} [options.key] - the key to log. * @param {*} [options.data] - the data to log. * @param {string} [options.limit] - the limit of entries to log. * @param {string} [options.short] - set to `true` to log only the count. * @param {boolean} [options.priority] - set to `true` to log with priority. * @param {string} [options.label] - a label to add to the log entry. * @param {string} [options.x] - the key for x axis. * @param {string} [options.y] - the key for y axis. */ function log ( options ) { var key = options. key, data = options. data, limit = options. limit, short = options. short, priority = options. priority, label = options. label, x = options. x, y = options. y ; // eslint-disable-next-line no-unused-vars if ( short ) {"
      ]
    ],
    "filtered_resps": [
      " }, /** * Convenience function to log (with timestamp) the data and key when called. * @param {Object} [options] - an options object containing key and data. * @param {string} [options.key] - the key to log. * @param {*} [options.data] - the data to log. * @param {string} [options.limit] - the limit of entries to log. * @param {string} [options.short] - set to `true` to log only the count. * @param {boolean} [options.priority] - set to `true` to log with priority. * @param {string} [options.label] - a label to add to the log entry. * @param {string} [options.x] - the key for x axis. * @param {string} [options.y] - the key for y axis. */ function log ( options ) { var key = options. key, data = options. data, limit = options. limit, short = options. short, priority = options. priority, label = options. label, x = options. x, y = options. y ; // eslint-disable-next-line no-unused-vars if ( short ) {"
    ],
    "smoothed_bleu_4": 0.5812783690916163
  },
  {
    "doc_id": 91,
    "doc": {
      "id": 91,
      "repo": "acornjs/acorn",
      "path": "acorn/src/tokentype.js",
      "func_name": "kw",
      "original_string": "function kw(name, options = {}) {\n  options.keyword = name\n  return keywords[name] = new TokenType(name, options)\n}",
      "language": "javascript",
      "code": "function kw(name, options = {}) {\n  options.keyword = name\n  return keywords[name] = new TokenType(name, options)\n}",
      "code_tokens": [
        "function",
        "kw",
        "(",
        "name",
        ",",
        "options",
        "=",
        "{",
        "}",
        ")",
        "{",
        "options",
        ".",
        "keyword",
        "=",
        "name",
        "return",
        "keywords",
        "[",
        "name",
        "]",
        "=",
        "new",
        "TokenType",
        "(",
        "name",
        ",",
        "options",
        ")",
        "}"
      ],
      "docstring": "Succinct definitions of keyword token types",
      "docstring_tokens": [
        "Succinct",
        "definitions",
        "of",
        "keyword",
        "token",
        "types"
      ],
      "sha": "073a12c8285353866dfd74de5d88c543bd3ae20d",
      "url": "https://github.com/acornjs/acorn/blob/073a12c8285353866dfd74de5d88c543bd3ae20d/acorn/src/tokentype.js#L49-L52"
    },
    "target": "Succinct definitions of keyword token types",
    "arguments": [
      [
        "function kw ( name , options = { } ) { options . keyword = name return keywords [ name ] = new TokenType ( name , options ) }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " // Prepares a named function as an export. function fn ( name, func, options = { } ) { // Import and set the function's args if ( options. args ) { const args = require ( options. args ) for ( const arg of args ) { func. bind ( arg ) } } // Set the function's options. func. _options = options // Set the function's name. func. _name = name // Set the function's context. func. _context = options. context || 'default' // Set the function's flags. func. _flags = options. flags || ( options. context? 0 : 1 ) // If there is no name, and we are not in a context, return the function. if (! name &&! options. context ) { return func } // If there is no name, and we are in a context, throw an error. if (! name && options. context ) { throw new Error ( `Function ${ func. name } requires a name` ) } // Set the function's name as an export. exports [ name ] = func // Return the function. return func } // Prepares a named function as an export. function m ("
      ]
    ],
    "filtered_resps": [
      " // Prepares a named function as an export. function fn ( name, func, options = { } ) { // Import and set the function's args if ( options. args ) { const args = require ( options. args ) for ( const arg of args ) { func. bind ( arg ) } } // Set the function's options. func. _options = options // Set the function's name. func. _name = name // Set the function's context. func. _context = options. context || 'default' // Set the function's flags. func. _flags = options. flags || ( options. context? 0 : 1 ) // If there is no name, and we are not in a context, return the function. if (! name &&! options. context ) { return func } // If there is no name, and we are in a context, throw an error. if (! name && options. context ) { throw new Error ( `Function ${ func. name } requires a name` ) } // Set the function's name as an export. exports [ name ] = func // Return the function. return func } // Prepares a named function as an export. function m ("
    ],
    "smoothed_bleu_4": 0.3741832807730007
  },
  {
    "doc_id": 92,
    "doc": {
      "id": 92,
      "repo": "acornjs/acorn",
      "path": "acorn/src/identifier.js",
      "func_name": "isInAstralSet",
      "original_string": "function isInAstralSet(code, set) {\n  let pos = 0x10000\n  for (let i = 0; i < set.length; i += 2) {\n    pos += set[i]\n    if (pos > code) return false\n    pos += set[i + 1]\n    if (pos >= code) return true\n  }\n}",
      "language": "javascript",
      "code": "function isInAstralSet(code, set) {\n  let pos = 0x10000\n  for (let i = 0; i < set.length; i += 2) {\n    pos += set[i]\n    if (pos > code) return false\n    pos += set[i + 1]\n    if (pos >= code) return true\n  }\n}",
      "code_tokens": [
        "function",
        "isInAstralSet",
        "(",
        "code",
        ",",
        "set",
        ")",
        "{",
        "let",
        "pos",
        "=",
        "0x10000",
        "for",
        "(",
        "let",
        "i",
        "=",
        "0",
        ";",
        "i",
        "<",
        "set",
        ".",
        "length",
        ";",
        "i",
        "+=",
        "2",
        ")",
        "{",
        "pos",
        "+=",
        "set",
        "[",
        "i",
        "]",
        "if",
        "(",
        "pos",
        ">",
        "code",
        ")",
        "return",
        "false",
        "pos",
        "+=",
        "set",
        "[",
        "i",
        "+",
        "1",
        "]",
        "if",
        "(",
        "pos",
        ">=",
        "code",
        ")",
        "return",
        "true",
        "}",
        "}"
      ],
      "docstring": "This has a complexity linear to the value of the code. The assumption is that looking up astral identifier characters is rare.",
      "docstring_tokens": [
        "This",
        "has",
        "a",
        "complexity",
        "linear",
        "to",
        "the",
        "value",
        "of",
        "the",
        "code",
        ".",
        "The",
        "assumption",
        "is",
        "that",
        "looking",
        "up",
        "astral",
        "identifier",
        "characters",
        "is",
        "rare",
        "."
      ],
      "sha": "073a12c8285353866dfd74de5d88c543bd3ae20d",
      "url": "https://github.com/acornjs/acorn/blob/073a12c8285353866dfd74de5d88c543bd3ae20d/acorn/src/identifier.js#L53-L61"
    },
    "target": "This has a complexity linear to the value of the code . The assumption is that looking up astral identifier characters is rare .",
    "arguments": [
      [
        "function isInAstralSet ( code , set ) { let pos = 0x10000 for ( let i = 0 ; i < set . length ; i += 2 ) { pos += set [ i ] if ( pos > code ) return false pos += set [ i + 1 ] if ( pos >= code ) return true } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " let setAstral = [ 0x00, 0x09, 0x27, 0x2A, 0x45, 0x5B, 0x80, 0x8D, 0xA2, 0xA5, 0xAC, 0xB1, 0xB6, 0xBC, 0xC1, 0xC6, 0xCB, 0xD1, 0xD6, 0xDB, 0xE0, 0xE5, 0xEB, 0xF0, 0xF5, 0xFB, 0xFE ] if ( isInAstralSet ( code, setAstral ) ) return 'astral' if ( isInAstralSet ( code, setBmp ) ) return 'bmp' if ( isInAstralSet ( code, setCombining ) ) return 'combining' if ( isInAstralSet ( code, setExtension ) ) return 'extension' if ( isInAstralSet ( code, setFormat ) ) return 'format' if ( isInAstralSet ( code, setLetter ) ) return 'letter' if ( isInAstralSet"
      ]
    ],
    "filtered_resps": [
      " let setAstral = [ 0x00, 0x09, 0x27, 0x2A, 0x45, 0x5B, 0x80, 0x8D, 0xA2, 0xA5, 0xAC, 0xB1, 0xB6, 0xBC, 0xC1, 0xC6, 0xCB, 0xD1, 0xD6, 0xDB, 0xE0, 0xE5, 0xEB, 0xF0, 0xF5, 0xFB, 0xFE ] if ( isInAstralSet ( code, setAstral ) ) return 'astral' if ( isInAstralSet ( code, setBmp ) ) return 'bmp' if ( isInAstralSet ( code, setCombining ) ) return 'combining' if ( isInAstralSet ( code, setExtension ) ) return 'extension' if ( isInAstralSet ( code, setFormat ) ) return 'format' if ( isInAstralSet ( code, setLetter ) ) return 'letter' if ( isInAstralSet"
    ],
    "smoothed_bleu_4": 0.8602014799314174
  },
  {
    "doc_id": 93,
    "doc": {
      "id": 93,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/themes/tasks/build.js",
      "func_name": "transformMetadata",
      "original_string": "function transformMetadata(metadata) {\n  const namesRegEx = new RegExp(\n    metadata.tokens.map(token => token.name).join('|'),\n    'g'\n  );\n\n  const replaceMap = {};\n  metadata.tokens.map(token => {\n    replaceMap[token.name] = formatTokenName(token.name);\n  });\n\n  metadata.tokens.forEach((token, i) => {\n    // interactive01 to `$interactive-01`\n    if (token.role) {\n      token.role.forEach((role, j) => {\n        metadata.tokens[i].role[j] = role.replace(namesRegEx, match => {\n          return '`$' + replaceMap[match] + '`';\n        });\n      });\n    }\n\n    // brand01 to brand-01\n    if (token.alias) {\n      token.alias = formatTokenName(token.alias);\n    }\n  });\n\n  return metadata;\n}",
      "language": "javascript",
      "code": "function transformMetadata(metadata) {\n  const namesRegEx = new RegExp(\n    metadata.tokens.map(token => token.name).join('|'),\n    'g'\n  );\n\n  const replaceMap = {};\n  metadata.tokens.map(token => {\n    replaceMap[token.name] = formatTokenName(token.name);\n  });\n\n  metadata.tokens.forEach((token, i) => {\n    // interactive01 to `$interactive-01`\n    if (token.role) {\n      token.role.forEach((role, j) => {\n        metadata.tokens[i].role[j] = role.replace(namesRegEx, match => {\n          return '`$' + replaceMap[match] + '`';\n        });\n      });\n    }\n\n    // brand01 to brand-01\n    if (token.alias) {\n      token.alias = formatTokenName(token.alias);\n    }\n  });\n\n  return metadata;\n}",
      "code_tokens": [
        "function",
        "transformMetadata",
        "(",
        "metadata",
        ")",
        "{",
        "const",
        "namesRegEx",
        "=",
        "new",
        "RegExp",
        "(",
        "metadata",
        ".",
        "tokens",
        ".",
        "map",
        "(",
        "token",
        "=>",
        "token",
        ".",
        "name",
        ")",
        ".",
        "join",
        "(",
        "'|'",
        ")",
        ",",
        "'g'",
        ")",
        ";",
        "const",
        "replaceMap",
        "=",
        "{",
        "}",
        ";",
        "metadata",
        ".",
        "tokens",
        ".",
        "map",
        "(",
        "token",
        "=>",
        "{",
        "replaceMap",
        "[",
        "token",
        ".",
        "name",
        "]",
        "=",
        "formatTokenName",
        "(",
        "token",
        ".",
        "name",
        ")",
        ";",
        "}",
        ")",
        ";",
        "metadata",
        ".",
        "tokens",
        ".",
        "forEach",
        "(",
        "(",
        "token",
        ",",
        "i",
        ")",
        "=>",
        "{",
        "// interactive01 to `$interactive-01`",
        "if",
        "(",
        "token",
        ".",
        "role",
        ")",
        "{",
        "token",
        ".",
        "role",
        ".",
        "forEach",
        "(",
        "(",
        "role",
        ",",
        "j",
        ")",
        "=>",
        "{",
        "metadata",
        ".",
        "tokens",
        "[",
        "i",
        "]",
        ".",
        "role",
        "[",
        "j",
        "]",
        "=",
        "role",
        ".",
        "replace",
        "(",
        "namesRegEx",
        ",",
        "match",
        "=>",
        "{",
        "return",
        "'`$'",
        "+",
        "replaceMap",
        "[",
        "match",
        "]",
        "+",
        "'`'",
        ";",
        "}",
        ")",
        ";",
        "}",
        ")",
        ";",
        "}",
        "// brand01 to brand-01",
        "if",
        "(",
        "token",
        ".",
        "alias",
        ")",
        "{",
        "token",
        ".",
        "alias",
        "=",
        "formatTokenName",
        "(",
        "token",
        ".",
        "alias",
        ")",
        ";",
        "}",
        "}",
        ")",
        ";",
        "return",
        "metadata",
        ";",
        "}"
      ],
      "docstring": "Transform token names to formats expected by Sassdoc for descriptions and\naliases\n@param {Object} - token metadata\n@return {Object} token metadata",
      "docstring_tokens": [
        "Transform",
        "token",
        "names",
        "to",
        "formats",
        "expected",
        "by",
        "Sassdoc",
        "for",
        "descriptions",
        "and",
        "aliases"
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/themes/tasks/build.js#L203-L231"
    },
    "target": "Transform token names to formats expected by Sassdoc for descriptions and aliases",
    "arguments": [
      [
        "function transformMetadata ( metadata ) { const namesRegEx = new RegExp ( metadata . tokens . map ( token => token . name ) . join ( '|' ) , 'g' ) ; const replaceMap = { } ; metadata . tokens . map ( token => { replaceMap [ token . name ] = formatTokenName ( token . name ) ; } ) ; metadata . tokens . forEach ( ( token , i ) => { // interactive01 to `$interactive-01` if ( token . role ) { token . role . forEach ( ( role , j ) => { metadata . tokens [ i ] . role [ j ] = role . replace ( namesRegEx , match => { return '`$' + replaceMap [ match ] + '`' ; } ) ; } ) ; } // brand01 to brand-01 if ( token . alias ) { token . alias = formatTokenName ( token . alias ) ; } } ) ; return metadata ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " return transformMetadata ( metadata ) ; } This code takes the metadata object, loops over its tokens array, and formats each token's name and role according to the custom naming conventions. It then replaces the original names with the formatted ones in the role and alias properties of each token. The code also includes a regular expression that matches any of the original token names, which is used to replace the names in the role strings. The `formatTokenName` function is not defined in this snippet, but it's assumed to take a string as input and return the formatted name. The function is called for each token's name and alias, and its return value is used to replace the original names in the role strings. The function also returns the modified metadata object.\n\nThe final function is called `transformMetadata`, and it takes the metadata object as input and returns the modified metadata object. It calls itself recursively until all tokens have been processed.\n\nYou can use this code as a starting point to customize the naming conventions for your tokens and roles. Just make sure to define the `formatTokenName` function according to your specific requirements.\n\nAs for the usage, you can call the `transformMetadata` function with the metadata object as an argument, like this:\n``"
      ]
    ],
    "filtered_resps": [
      " return transformMetadata ( metadata ) ; } This code takes the metadata object, loops over its tokens array, and formats each token's name and role according to the custom naming conventions. It then replaces the original names with the formatted ones in the role and alias properties of each token. The code also includes a regular expression that matches any of the original token names, which is used to replace the names in the role strings. The `formatTokenName` function is not defined in this snippet, but it's assumed to take a string as input and return the formatted name. The function is called for each token's name and alias, and its return value is used to replace the original names in the role strings. The function also returns the modified metadata object.\n\nThe final function is called `transformMetadata`, and it takes the metadata object as input and returns the modified metadata object. It calls itself recursively until all tokens have been processed.\n\nYou can use this code as a starting point to customize the naming conventions for your tokens and roles. Just make sure to define the `formatTokenName` function according to your specific requirements.\n\nAs for the usage, you can call the `transformMetadata` function with the metadata object as an argument, like this:\n``"
    ],
    "smoothed_bleu_4": 0.7527685320545144
  },
  {
    "doc_id": 94,
    "doc": {
      "id": 94,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/bundler/src/commands/measure.js",
      "func_name": "findPackageFor",
      "original_string": "async function findPackageFor(filepath) {\n  let directory = filepath;\n\n  while (directory !== '/') {\n    const directoryToSearch = path.dirname(directory);\n    const files = await fs.readdir(directoryToSearch);\n\n    if (files.indexOf('package.json') !== -1) {\n      const packageJson = await fs.readJson(\n        path.join(directoryToSearch, 'package.json')\n      );\n      return packageJson.name;\n    }\n\n    directory = path.resolve(directory, '..');\n  }\n\n  throw new Error(`Unable to find package for: ${filepath}`);\n}",
      "language": "javascript",
      "code": "async function findPackageFor(filepath) {\n  let directory = filepath;\n\n  while (directory !== '/') {\n    const directoryToSearch = path.dirname(directory);\n    const files = await fs.readdir(directoryToSearch);\n\n    if (files.indexOf('package.json') !== -1) {\n      const packageJson = await fs.readJson(\n        path.join(directoryToSearch, 'package.json')\n      );\n      return packageJson.name;\n    }\n\n    directory = path.resolve(directory, '..');\n  }\n\n  throw new Error(`Unable to find package for: ${filepath}`);\n}",
      "code_tokens": [
        "async",
        "function",
        "findPackageFor",
        "(",
        "filepath",
        ")",
        "{",
        "let",
        "directory",
        "=",
        "filepath",
        ";",
        "while",
        "(",
        "directory",
        "!==",
        "'/'",
        ")",
        "{",
        "const",
        "directoryToSearch",
        "=",
        "path",
        ".",
        "dirname",
        "(",
        "directory",
        ")",
        ";",
        "const",
        "files",
        "=",
        "await",
        "fs",
        ".",
        "readdir",
        "(",
        "directoryToSearch",
        ")",
        ";",
        "if",
        "(",
        "files",
        ".",
        "indexOf",
        "(",
        "'package.json'",
        ")",
        "!==",
        "-",
        "1",
        ")",
        "{",
        "const",
        "packageJson",
        "=",
        "await",
        "fs",
        ".",
        "readJson",
        "(",
        "path",
        ".",
        "join",
        "(",
        "directoryToSearch",
        ",",
        "'package.json'",
        ")",
        ")",
        ";",
        "return",
        "packageJson",
        ".",
        "name",
        ";",
        "}",
        "directory",
        "=",
        "path",
        ".",
        "resolve",
        "(",
        "directory",
        ",",
        "'..'",
        ")",
        ";",
        "}",
        "throw",
        "new",
        "Error",
        "(",
        "`",
        "${",
        "filepath",
        "}",
        "`",
        ")",
        ";",
        "}"
      ],
      "docstring": "Rough heuristic used to find the package name for a given file. Idea is to move upwards looking for directories that have a `package.json` file. Once we find one, we report back the name from that file.",
      "docstring_tokens": [
        "Rough",
        "heuristic",
        "used",
        "to",
        "find",
        "the",
        "package",
        "name",
        "for",
        "a",
        "given",
        "file",
        ".",
        "Idea",
        "is",
        "to",
        "move",
        "upwards",
        "looking",
        "for",
        "directories",
        "that",
        "have",
        "a",
        "package",
        ".",
        "json",
        "file",
        ".",
        "Once",
        "we",
        "find",
        "one",
        "we",
        "report",
        "back",
        "the",
        "name",
        "from",
        "that",
        "file",
        "."
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/bundler/src/commands/measure.js#L89-L107"
    },
    "target": "Rough heuristic used to find the package name for a given file . Idea is to move upwards looking for directories that have a package . json file . Once we find one we report back the name from that file .",
    "arguments": [
      [
        "async function findPackageFor ( filepath ) { let directory = filepath ; while ( directory !== '/' ) { const directoryToSearch = path . dirname ( directory ) ; const files = await fs . readdir ( directoryToSearch ) ; if ( files . indexOf ( 'package.json' ) !== - 1 ) { const packageJson = await fs . readJson ( path . join ( directoryToSearch , 'package.json' ) ) ; return packageJson . name ; } directory = path . resolve ( directory , '..' ) ; } throw new Error ( ` ${ filepath } ` ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " function logPackageNames ( packageNames ) { console. log ( packageNames. map ( ( packageName ) => packageName. replace ( path. sep, '/' ) ). join ( ',') ) ; } // Run the script logPackageNames ( await Promise. all ( [ findPackageFor ( '/path/to/file1.js' ), findPackageFor ( '/path/to/file2.js' ) ] ) ) ; ```\nIn this code, we first define a function `findPackageFor` that takes a file path as an argument. It uses a while loop to traverse up the directory tree until it finds a `package.json` file, at which point it reads the `name` property from the JSON file and returns it. If it can't find a `package.json` file, it throws an error.\n\nThe `logPackageNames` function takes an array of package names and logs them to the console, joined by commas.\n\nFinally, we run the script by calling `logPackageNames` with an array of promises, where each promise resolves to the package name for a given file path. We use `Promise.all` to wait for all the promises to resolve before logging the package names.\n\nNote that this code assumes that the `"
      ]
    ],
    "filtered_resps": [
      " function logPackageNames ( packageNames ) { console. log ( packageNames. map ( ( packageName ) => packageName. replace ( path. sep, '/' ) ). join ( ',') ) ; } // Run the script logPackageNames ( await Promise. all ( [ findPackageFor ( '/path/to/file1.js' ), findPackageFor ( '/path/to/file2.js' ) ] ) ) ; ```\nIn this code, we first define a function `findPackageFor` that takes a file path as an argument. It uses a while loop to traverse up the directory tree until it finds a `package.json` file, at which point it reads the `name` property from the JSON file and returns it. If it can't find a `package.json` file, it throws an error.\n\nThe `logPackageNames` function takes an array of package names and logs them to the console, joined by commas.\n\nFinally, we run the script by calling `logPackageNames` with an array of promises, where each promise resolves to the package name for a given file path. We use `Promise.all` to wait for all the promises to resolve before logging the package names.\n\nNote that this code assumes that the `"
    ],
    "smoothed_bleu_4": 3.9399095569691878
  },
  {
    "doc_id": 95,
    "doc": {
      "id": 95,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/components/src/globals/js/misc/svg-toggle-class.js",
      "func_name": "svgToggleClass",
      "original_string": "function svgToggleClass(svg, name, forceAdd) {\n  const list = svg\n    .getAttribute('class')\n    .trim()\n    .split(/\\s+/);\n  const uniqueList = Object.keys(list.reduce((o, item) => Object.assign(o, { [item]: 1 }), {}));\n  const index = uniqueList.indexOf(name);\n  const found = index >= 0;\n  const add = forceAdd === undefined ? !found : forceAdd;\n\n  if (found === !add) {\n    if (add) {\n      uniqueList.push(name);\n    } else {\n      uniqueList.splice(index, 1);\n    }\n    svg.setAttribute('class', uniqueList.join(' '));\n  }\n}",
      "language": "javascript",
      "code": "function svgToggleClass(svg, name, forceAdd) {\n  const list = svg\n    .getAttribute('class')\n    .trim()\n    .split(/\\s+/);\n  const uniqueList = Object.keys(list.reduce((o, item) => Object.assign(o, { [item]: 1 }), {}));\n  const index = uniqueList.indexOf(name);\n  const found = index >= 0;\n  const add = forceAdd === undefined ? !found : forceAdd;\n\n  if (found === !add) {\n    if (add) {\n      uniqueList.push(name);\n    } else {\n      uniqueList.splice(index, 1);\n    }\n    svg.setAttribute('class', uniqueList.join(' '));\n  }\n}",
      "code_tokens": [
        "function",
        "svgToggleClass",
        "(",
        "svg",
        ",",
        "name",
        ",",
        "forceAdd",
        ")",
        "{",
        "const",
        "list",
        "=",
        "svg",
        ".",
        "getAttribute",
        "(",
        "'class'",
        ")",
        ".",
        "trim",
        "(",
        ")",
        ".",
        "split",
        "(",
        "/",
        "\\s+",
        "/",
        ")",
        ";",
        "const",
        "uniqueList",
        "=",
        "Object",
        ".",
        "keys",
        "(",
        "list",
        ".",
        "reduce",
        "(",
        "(",
        "o",
        ",",
        "item",
        ")",
        "=>",
        "Object",
        ".",
        "assign",
        "(",
        "o",
        ",",
        "{",
        "[",
        "item",
        "]",
        ":",
        "1",
        "}",
        ")",
        ",",
        "{",
        "}",
        ")",
        ")",
        ";",
        "const",
        "index",
        "=",
        "uniqueList",
        ".",
        "indexOf",
        "(",
        "name",
        ")",
        ";",
        "const",
        "found",
        "=",
        "index",
        ">=",
        "0",
        ";",
        "const",
        "add",
        "=",
        "forceAdd",
        "===",
        "undefined",
        "?",
        "!",
        "found",
        ":",
        "forceAdd",
        ";",
        "if",
        "(",
        "found",
        "===",
        "!",
        "add",
        ")",
        "{",
        "if",
        "(",
        "add",
        ")",
        "{",
        "uniqueList",
        ".",
        "push",
        "(",
        "name",
        ")",
        ";",
        "}",
        "else",
        "{",
        "uniqueList",
        ".",
        "splice",
        "(",
        "index",
        ",",
        "1",
        ")",
        ";",
        "}",
        "svg",
        ".",
        "setAttribute",
        "(",
        "'class'",
        ",",
        "uniqueList",
        ".",
        "join",
        "(",
        "' '",
        ")",
        ")",
        ";",
        "}",
        "}"
      ],
      "docstring": "Copyright IBM Corp. 2016, 2018\n\nThis source code is licensed under the Apache-2.0 license found in the\nLICENSE file in the root directory of this source tree.",
      "docstring_tokens": [
        "Copyright",
        "IBM",
        "Corp",
        ".",
        "2016",
        "2018"
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/components/src/globals/js/misc/svg-toggle-class.js#L8-L26"
    },
    "target": "Copyright IBM Corp . 2016 2018",
    "arguments": [
      [
        "function svgToggleClass ( svg , name , forceAdd ) { const list = svg . getAttribute ( 'class' ) . trim ( ) . split ( / \\s+ / ) ; const uniqueList = Object . keys ( list . reduce ( ( o , item ) => Object . assign ( o , { [ item ] : 1 } ) , { } ) ) ; const index = uniqueList . indexOf ( name ) ; const found = index >= 0 ; const add = forceAdd === undefined ? ! found : forceAdd ; if ( found === ! add ) { if ( add ) { uniqueList . push ( name ) ; } else { uniqueList . splice ( index , 1 ) ; } svg . setAttribute ( 'class' , uniqueList . join ( ' ' ) ) ; } }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ``` Here's an explanation of the code:\n\n* The function takes two parameters: `svg` (the SVG element) and `name` (the class name to toggle).\n* It first gets the current class list of the SVG element and splits it into an array of unique class names.\n* It then checks if the `name` class is already in the list by finding its index in the `uniqueList` array. If it's found, `found` is set to `true`.\n* The `forceAdd` parameter determines whether to add the class even if it's already present. If `forceAdd` is `undefined` (default), it will only add the class if it's not already present.\n* If the class should be added (either because it's not present or because `forceAdd` is `true`), the `uniqueList` array is updated by adding the `name` class.\n* If the class should be removed, the `uniqueList` array is updated by removing the `name` class at the found index.\n* Finally, the updated `uniqueList` array is joined back into a string and set as the `class` attribute of the SVG element.\n\nYou can use this function like this:\n"
      ]
    ],
    "filtered_resps": [
      " ``` Here's an explanation of the code:\n\n* The function takes two parameters: `svg` (the SVG element) and `name` (the class name to toggle).\n* It first gets the current class list of the SVG element and splits it into an array of unique class names.\n* It then checks if the `name` class is already in the list by finding its index in the `uniqueList` array. If it's found, `found` is set to `true`.\n* The `forceAdd` parameter determines whether to add the class even if it's already present. If `forceAdd` is `undefined` (default), it will only add the class if it's not already present.\n* If the class should be added (either because it's not present or because `forceAdd` is `true`), the `uniqueList` array is updated by adding the `name` class.\n* If the class should be removed, the `uniqueList` array is updated by removing the `name` class at the found index.\n* Finally, the updated `uniqueList` array is joined back into a string and set as the `class` attribute of the SVG element.\n\nYou can use this function like this:\n"
    ],
    "smoothed_bleu_4": 0.394868851164534
  },
  {
    "doc_id": 96,
    "doc": {
      "id": 96,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/icons/src/tools.js",
      "func_name": "flatMapAsync",
      "original_string": "async function flatMapAsync(source, mapFn) {\n  const results = await Promise.all(source.map(mapFn));\n  return results.reduce((acc, result) => acc.concat(result), []);\n}",
      "language": "javascript",
      "code": "async function flatMapAsync(source, mapFn) {\n  const results = await Promise.all(source.map(mapFn));\n  return results.reduce((acc, result) => acc.concat(result), []);\n}",
      "code_tokens": [
        "async",
        "function",
        "flatMapAsync",
        "(",
        "source",
        ",",
        "mapFn",
        ")",
        "{",
        "const",
        "results",
        "=",
        "await",
        "Promise",
        ".",
        "all",
        "(",
        "source",
        ".",
        "map",
        "(",
        "mapFn",
        ")",
        ")",
        ";",
        "return",
        "results",
        ".",
        "reduce",
        "(",
        "(",
        "acc",
        ",",
        "result",
        ")",
        "=>",
        "acc",
        ".",
        "concat",
        "(",
        "result",
        ")",
        ",",
        "[",
        "]",
        ")",
        ";",
        "}"
      ],
      "docstring": "Copyright IBM Corp. 2018, 2018\n\nThis source code is licensed under the Apache-2.0 license found in the\nLICENSE file in the root directory of this source tree.",
      "docstring_tokens": [
        "Copyright",
        "IBM",
        "Corp",
        ".",
        "2018",
        "2018"
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/icons/src/tools.js#L8-L11"
    },
    "target": "Copyright IBM Corp . 2018 2018",
    "arguments": [
      [
        "async function flatMapAsync ( source , mapFn ) { const results = await Promise . all ( source . map ( mapFn ) ) ; return results . reduce ( ( acc , result ) => acc . concat ( result ) , [ ] ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " # end def\n\n## Example Use Cases\n```\nconst numbers = [1, 2, 3, 4, 5];\n\nconst mappedNumbers = await flatMapAsync(numbers, async (number) => {\n  // Perform some IO-bound operation and return an array\n  return await new Promise(resolve => setTimeout(resolve, 1000, [number * 2, number * 3]));\n});\n\nconsole.log(mappedNumbers); // Output: [2, 4, 6, 8, 10, 3, 6, 9, 12, 15]\n```\n\n```\nconst promises = [Promise.resolve(1), Promise.resolve(2), Promise.reject(3)];\n\nconst results = await flatMapAsync(promises, async (value) => {\n  if (value === 3) return []; // Reject the promise and return an empty array\n  return [value];\n});\n\nconsole.log(results); // Output: [1, 2]\n```\n\n```\nconst array = [[1, 2], [3, 4], [5, 6]];\n\nconst flatArray = await flatMapAsync(array, (subArray) => subArray);\n\nconsole.log(flatArray); // Output"
      ]
    ],
    "filtered_resps": [
      " # end def\n\n## Example Use Cases\n```\nconst numbers = [1, 2, 3, 4, 5];\n\nconst mappedNumbers = await flatMapAsync(numbers, async (number) => {\n  // Perform some IO-bound operation and return an array\n  return await new Promise(resolve => setTimeout(resolve, 1000, [number * 2, number * 3]));\n});\n\nconsole.log(mappedNumbers); // Output: [2, 4, 6, 8, 10, 3, 6, 9, 12, 15]\n```\n\n```\nconst promises = [Promise.resolve(1), Promise.resolve(2), Promise.reject(3)];\n\nconst results = await flatMapAsync(promises, async (value) => {\n  if (value === 3) return []; // Reject the promise and return an empty array\n  return [value];\n});\n\nconsole.log(results); // Output: [1, 2]\n```\n\n```\nconst array = [[1, 2], [3, 4], [5, 6]];\n\nconst flatArray = await flatMapAsync(array, (subArray) => subArray);\n\nconsole.log(flatArray); // Output"
    ],
    "smoothed_bleu_4": 0.38277704950301533
  },
  {
    "doc_id": 97,
    "doc": {
      "id": 97,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/bundler/src/tools/sassdoc.js",
      "func_name": "createJson",
      "original_string": "async function createJson(sourceDir, config) {\n  config = config || {};\n\n  return sassdoc.parse(sourceDir, config).then(\n    data => {\n      return data;\n    },\n    err => {\n      console.error(err);\n    }\n  );\n}",
      "language": "javascript",
      "code": "async function createJson(sourceDir, config) {\n  config = config || {};\n\n  return sassdoc.parse(sourceDir, config).then(\n    data => {\n      return data;\n    },\n    err => {\n      console.error(err);\n    }\n  );\n}",
      "code_tokens": [
        "async",
        "function",
        "createJson",
        "(",
        "sourceDir",
        ",",
        "config",
        ")",
        "{",
        "config",
        "=",
        "config",
        "||",
        "{",
        "}",
        ";",
        "return",
        "sassdoc",
        ".",
        "parse",
        "(",
        "sourceDir",
        ",",
        "config",
        ")",
        ".",
        "then",
        "(",
        "data",
        "=>",
        "{",
        "return",
        "data",
        ";",
        "}",
        ",",
        "err",
        "=>",
        "{",
        "console",
        ".",
        "error",
        "(",
        "err",
        ")",
        ";",
        "}",
        ")",
        ";",
        "}"
      ],
      "docstring": "Create a JSON file of documented Sass items\n@see {@link http://sassdoc.com/configuration/|Sassdoc configuration}\n@param {string} sourceDir - source directory\n@param {Object} config - configuration object\n@return {Object} json object",
      "docstring_tokens": [
        "Create",
        "a",
        "JSON",
        "file",
        "of",
        "documented",
        "Sass",
        "items"
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/bundler/src/tools/sassdoc.js#L41-L52"
    },
    "target": "Create a JSON file of documented Sass items",
    "arguments": [
      [
        "async function createJson ( sourceDir , config ) { config = config || { } ; return sassdoc . parse ( sourceDir , config ) . then ( data => { return data ; } , err => { console . error ( err ) ; } ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " export { createJson } ; ```\nTo include a sample implementation, we will create a sample SCSS file. Here is an example of the code that uses the sample SCSS file.\n```bash\n//style.scss\n@mixin flexbox() {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nbody {\n  @include flexbox;\n  background-color: #f2f2f2;\n}\n```\nAnd the SCSS documentation file will look like this:\n\n```javascript\n//style.scssdoc.js\nimport { createJson } from '../scssdoc.js';\n\nasync function main () {\n  const sourceDir = './style.scss';\n  const config = {\n    ignore: ['flexbox'],\n    language:'scss'\n  };\n  const data = await createJson(sourceDir, config);\n  console.log(data);\n}\n\nmain();\n```\n\nThis example demonstrates how to create a JSON representation of the SCSS file using the sassdoc module, with custom configuration options.\n\nTo create a table of contents for the SCSS documentation, you can modify the code to use the sassdoc module's `tableOfContents` method. Here's an updated example:\n\n```javascript\n//style.scssdoc.js\nimport"
      ]
    ],
    "filtered_resps": [
      " export { createJson } ; ```\nTo include a sample implementation, we will create a sample SCSS file. Here is an example of the code that uses the sample SCSS file.\n```bash\n//style.scss\n@mixin flexbox() {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nbody {\n  @include flexbox;\n  background-color: #f2f2f2;\n}\n```\nAnd the SCSS documentation file will look like this:\n\n```javascript\n//style.scssdoc.js\nimport { createJson } from '../scssdoc.js';\n\nasync function main () {\n  const sourceDir = './style.scss';\n  const config = {\n    ignore: ['flexbox'],\n    language:'scss'\n  };\n  const data = await createJson(sourceDir, config);\n  console.log(data);\n}\n\nmain();\n```\n\nThis example demonstrates how to create a JSON representation of the SCSS file using the sassdoc module, with custom configuration options.\n\nTo create a table of contents for the SCSS documentation, you can modify the code to use the sassdoc module's `tableOfContents` method. Here's an updated example:\n\n```javascript\n//style.scssdoc.js\nimport"
    ],
    "smoothed_bleu_4": 0.9749266053302242
  },
  {
    "doc_id": 98,
    "doc": {
      "id": 98,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/bundler/src/tools/sassdoc.js",
      "func_name": "dedupeArray",
      "original_string": "function dedupeArray(arr) {\n  return arr.reduce(\n    (p, item) => {\n      const type = item.type || item.context.type;\n      const name = item.name || item.context.name;\n      const id = [type, name].join('|');\n\n      if (p.temp.indexOf(id) === -1) {\n        p.out.push(item);\n        p.temp.push(id);\n      }\n      return p;\n    },\n    { temp: [], out: [] }\n  ).out;\n}",
      "language": "javascript",
      "code": "function dedupeArray(arr) {\n  return arr.reduce(\n    (p, item) => {\n      const type = item.type || item.context.type;\n      const name = item.name || item.context.name;\n      const id = [type, name].join('|');\n\n      if (p.temp.indexOf(id) === -1) {\n        p.out.push(item);\n        p.temp.push(id);\n      }\n      return p;\n    },\n    { temp: [], out: [] }\n  ).out;\n}",
      "code_tokens": [
        "function",
        "dedupeArray",
        "(",
        "arr",
        ")",
        "{",
        "return",
        "arr",
        ".",
        "reduce",
        "(",
        "(",
        "p",
        ",",
        "item",
        ")",
        "=>",
        "{",
        "const",
        "type",
        "=",
        "item",
        ".",
        "type",
        "||",
        "item",
        ".",
        "context",
        ".",
        "type",
        ";",
        "const",
        "name",
        "=",
        "item",
        ".",
        "name",
        "||",
        "item",
        ".",
        "context",
        ".",
        "name",
        ";",
        "const",
        "id",
        "=",
        "[",
        "type",
        ",",
        "name",
        "]",
        ".",
        "join",
        "(",
        "'|'",
        ")",
        ";",
        "if",
        "(",
        "p",
        ".",
        "temp",
        ".",
        "indexOf",
        "(",
        "id",
        ")",
        "===",
        "-",
        "1",
        ")",
        "{",
        "p",
        ".",
        "out",
        ".",
        "push",
        "(",
        "item",
        ")",
        ";",
        "p",
        ".",
        "temp",
        ".",
        "push",
        "(",
        "id",
        ")",
        ";",
        "}",
        "return",
        "p",
        ";",
        "}",
        ",",
        "{",
        "temp",
        ":",
        "[",
        "]",
        ",",
        "out",
        ":",
        "[",
        "]",
        "}",
        ")",
        ".",
        "out",
        ";",
        "}"
      ],
      "docstring": "Remove duplicate objects in `require` and `usedBy` arrays. Array objects have\n`name` and `type` properties, sometimes nested in a `context` object.\n@param {Array} arr - array with potential duplicates\n@return {Array} deduped array",
      "docstring_tokens": [
        "Remove",
        "duplicate",
        "objects",
        "in",
        "require",
        "and",
        "usedBy",
        "arrays",
        ".",
        "Array",
        "objects",
        "have",
        "name",
        "and",
        "type",
        "properties",
        "sometimes",
        "nested",
        "in",
        "a",
        "context",
        "object",
        "."
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/bundler/src/tools/sassdoc.js#L60-L75"
    },
    "target": "Remove duplicate objects in require and usedBy arrays . Array objects have name and type properties sometimes nested in a context object .",
    "arguments": [
      [
        "function dedupeArray ( arr ) { return arr . reduce ( ( p , item ) => { const type = item . type || item . context . type ; const name = item . name || item . context . name ; const id = [ type , name ] . join ( '|' ) ; if ( p . temp . indexOf ( id ) === - 1 ) { p . out . push ( item ) ; p . temp . push ( id ) ; } return p ; } , { temp : [ ] , out : [ ] } ) . out ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " dedupeArray ( [ { name : 'a' }, { name : 'b' }, { name : 'a' } ] ) // ['{name: a}', '{name: b}'] ``` [Type Checking](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) We can modify the function to also check the type of the objects. For example, we can return `null` if the type is `string` and the value is empty. ```javascript dedupeArray ( arr ) { return arr. reduce ( ( p, item ) => { const type = item. type || item. context. type ; const name = item. name || item. context. name ; const id = [ type, name ]. join ( '|' ) ; if ( type ==='string' &&! name ) { return null ; } if ( p. temp. indexOf ( id ) === - 1 ) { p. out. push ( item ) ; p. temp. push ( id ) ; } return p ; }, { temp : [ ], out : [ ] } ). out ; } dedupeArray ( [ { name : 'a' },"
      ]
    ],
    "filtered_resps": [
      " dedupeArray ( [ { name : 'a' }, { name : 'b' }, { name : 'a' } ] ) // ['{name: a}', '{name: b}'] ``` [Type Checking](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is) We can modify the function to also check the type of the objects. For example, we can return `null` if the type is `string` and the value is empty. ```javascript dedupeArray ( arr ) { return arr. reduce ( ( p, item ) => { const type = item. type || item. context. type ; const name = item. name || item. context. name ; const id = [ type, name ]. join ( '|' ) ; if ( type ==='string' &&! name ) { return null ; } if ( p. temp. indexOf ( id ) === - 1 ) { p. out. push ( item ) ; p. temp. push ( id ) ; } return p ; }, { temp : [ ], out : [ ] } ). out ; } dedupeArray ( [ { name : 'a' },"
    ],
    "smoothed_bleu_4": 0.6507914383329939
  },
  {
    "doc_id": 99,
    "doc": {
      "id": 99,
      "repo": "carbon-design-system/carbon-components",
      "path": "packages/bundler/src/tools/sassdoc.js",
      "func_name": "createMarkdown",
      "original_string": "async function createMarkdown(sourceDir, config) {\n  config = config || {};\n\n  return sassdoc.parse(sourceDir, config).then(\n    data => {\n      let markdownFile = '';\n\n      const documentedItems = data.filter(\n        (item, index) => item.access === 'public' || item.access === 'private'\n      );\n\n      markdownFile += `# Sass API\n\n| Mark | Description |\n| --- | --- |\n| \u2705 | Public functions, mixins, placeholders, and variables |\n| \u274c | Private items - not supported outside package's build |\n| \u26a0\ufe0f | Deprecated items - may not be available in future releases |\n\n<!-- toc -->\n<!-- tocstop -->`;\n\n      let currentGroup = '';\n\n      documentedItems.forEach(item => {\n        const itemGroup = createGroupName(item.group);\n\n        if (itemGroup !== currentGroup) {\n          markdownFile += `\\n\\n## ${itemGroup}`;\n          currentGroup = itemGroup;\n        }\n\n        markdownFile += createMarkdownItem(item);\n      });\n\n      return prettier.format(\n        toc.insert(markdownFile, { slugify }),\n        prettierOptions\n      );\n    },\n    err => {\n      console.error(err);\n    }\n  );\n}",
      "language": "javascript",
      "code": "async function createMarkdown(sourceDir, config) {\n  config = config || {};\n\n  return sassdoc.parse(sourceDir, config).then(\n    data => {\n      let markdownFile = '';\n\n      const documentedItems = data.filter(\n        (item, index) => item.access === 'public' || item.access === 'private'\n      );\n\n      markdownFile += `# Sass API\n\n| Mark | Description |\n| --- | --- |\n| \u2705 | Public functions, mixins, placeholders, and variables |\n| \u274c | Private items - not supported outside package's build |\n| \u26a0\ufe0f | Deprecated items - may not be available in future releases |\n\n<!-- toc -->\n<!-- tocstop -->`;\n\n      let currentGroup = '';\n\n      documentedItems.forEach(item => {\n        const itemGroup = createGroupName(item.group);\n\n        if (itemGroup !== currentGroup) {\n          markdownFile += `\\n\\n## ${itemGroup}`;\n          currentGroup = itemGroup;\n        }\n\n        markdownFile += createMarkdownItem(item);\n      });\n\n      return prettier.format(\n        toc.insert(markdownFile, { slugify }),\n        prettierOptions\n      );\n    },\n    err => {\n      console.error(err);\n    }\n  );\n}",
      "code_tokens": [
        "async",
        "function",
        "createMarkdown",
        "(",
        "sourceDir",
        ",",
        "config",
        ")",
        "{",
        "config",
        "=",
        "config",
        "||",
        "{",
        "}",
        ";",
        "return",
        "sassdoc",
        ".",
        "parse",
        "(",
        "sourceDir",
        ",",
        "config",
        ")",
        ".",
        "then",
        "(",
        "data",
        "=>",
        "{",
        "let",
        "markdownFile",
        "=",
        "''",
        ";",
        "const",
        "documentedItems",
        "=",
        "data",
        ".",
        "filter",
        "(",
        "(",
        "item",
        ",",
        "index",
        ")",
        "=>",
        "item",
        ".",
        "access",
        "===",
        "'public'",
        "||",
        "item",
        ".",
        "access",
        "===",
        "'private'",
        ")",
        ";",
        "markdownFile",
        "+=",
        "`",
        "`",
        ";",
        "let",
        "currentGroup",
        "=",
        "''",
        ";",
        "documentedItems",
        ".",
        "forEach",
        "(",
        "item",
        "=>",
        "{",
        "const",
        "itemGroup",
        "=",
        "createGroupName",
        "(",
        "item",
        ".",
        "group",
        ")",
        ";",
        "if",
        "(",
        "itemGroup",
        "!==",
        "currentGroup",
        ")",
        "{",
        "markdownFile",
        "+=",
        "`",
        "\\n",
        "\\n",
        "${",
        "itemGroup",
        "}",
        "`",
        ";",
        "currentGroup",
        "=",
        "itemGroup",
        ";",
        "}",
        "markdownFile",
        "+=",
        "createMarkdownItem",
        "(",
        "item",
        ")",
        ";",
        "}",
        ")",
        ";",
        "return",
        "prettier",
        ".",
        "format",
        "(",
        "toc",
        ".",
        "insert",
        "(",
        "markdownFile",
        ",",
        "{",
        "slugify",
        "}",
        ")",
        ",",
        "prettierOptions",
        ")",
        ";",
        "}",
        ",",
        "err",
        "=>",
        "{",
        "console",
        ".",
        "error",
        "(",
        "err",
        ")",
        ";",
        "}",
        ")",
        ";",
        "}"
      ],
      "docstring": "Create a markdown file of documented Sass items\n@see {@link http://sassdoc.com/configuration/|Sassdoc configuration}\n@param {string} sourceDir - source directory\n@param {Object} config - configuration object\n@return {string} markdown",
      "docstring_tokens": [
        "Create",
        "a",
        "markdown",
        "file",
        "of",
        "documented",
        "Sass",
        "items"
      ],
      "sha": "e5ae58647d32aaae687e811d3f61e988cab1c302",
      "url": "https://github.com/carbon-design-system/carbon-components/blob/e5ae58647d32aaae687e811d3f61e988cab1c302/packages/bundler/src/tools/sassdoc.js#L347-L391"
    },
    "target": "Create a markdown file of documented Sass items",
    "arguments": [
      [
        "async function createMarkdown ( sourceDir , config ) { config = config || { } ; return sassdoc . parse ( sourceDir , config ) . then ( data => { let markdownFile = '' ; const documentedItems = data . filter ( ( item , index ) => item . access === 'public' || item . access === 'private' ) ; markdownFile += ` ` ; let currentGroup = '' ; documentedItems . forEach ( item => { const itemGroup = createGroupName ( item . group ) ; if ( itemGroup !== currentGroup ) { markdownFile += ` \\n \\n ${ itemGroup } ` ; currentGroup = itemGroup ; } markdownFile += createMarkdownItem ( item ) ; } ) ; return prettier . format ( toc . insert ( markdownFile , { slugify } ) , prettierOptions ) ; } , err => { console . error ( err ) ; } ) ; }",
        {
          "num_beams": 1,
          "max_length": 128,
          "until": [
            "</s>"
          ],
          "do_sample": true,
          "temperature": 1.0,
          "top_p": 1.0,
          "top_k": 0,
          "typical_p": 0.8,
          "max_new_tokens": 250
        }
      ]
    ],
    "resps": [
      [
        " ```\n\nThis code creates a Markdown file for the SassDoc documentation. It filters out items with access set to \"protected\" and uses the `createGroupName` function to group items by their \"group\" property. It then uses the `createMarkdownItem` function to generate the Markdown content for each item.\n\nThe `prettier.format` function is used to format the Markdown content with proper indentation and spacing. The `toc.insert` function is used to insert the table of contents into the Markdown file. The `slugify` function is used to slugify the headings.\n\nNote that this code assumes that the `sassdoc` library is installed and imported, and that the `prettier` and `toc` libraries are installed and imported. It also assumes that the `createGroupName` and `createMarkdownItem` functions are defined elsewhere in the codebase.\n\nHere is an example of how you might use this function:\n```\ncreateMarkdown ( sourceDir, {\n  sassdocOptions : {\n    output :'markdown'\n  }\n} )\n . then ( markdownFile => {\n    fs. writeFileSync ( 'docs/index.md', markdownFile ) ;\n  } )\n . catch ( err => {\n    console. error"
      ]
    ],
    "filtered_resps": [
      " ```\n\nThis code creates a Markdown file for the SassDoc documentation. It filters out items with access set to \"protected\" and uses the `createGroupName` function to group items by their \"group\" property. It then uses the `createMarkdownItem` function to generate the Markdown content for each item.\n\nThe `prettier.format` function is used to format the Markdown content with proper indentation and spacing. The `toc.insert` function is used to insert the table of contents into the Markdown file. The `slugify` function is used to slugify the headings.\n\nNote that this code assumes that the `sassdoc` library is installed and imported, and that the `prettier` and `toc` libraries are installed and imported. It also assumes that the `createGroupName` and `createMarkdownItem` functions are defined elsewhere in the codebase.\n\nHere is an example of how you might use this function:\n```\ncreateMarkdown ( sourceDir, {\n  sassdocOptions : {\n    output :'markdown'\n  }\n} )\n . then ( markdownFile => {\n    fs. writeFileSync ( 'docs/index.md', markdownFile ) ;\n  } )\n . catch ( err => {\n    console. error"
    ],
    "smoothed_bleu_4": 1.0298626694673325
  }
]